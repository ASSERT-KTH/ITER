bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	254	None	add
2	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	254	2	add
3	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	254	2	add
4	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	254	None	add
5	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	254	None	add
6	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	254	2	add
7	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	254	2	add
8	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	254	2	add
9	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	254	2	add
10	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	254	2	add
11	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	254	2	add
12	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  lhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	254	None	add
13	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
14	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
16	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
17	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
18	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
19	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
20	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
21	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
22	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
24	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
26	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
28	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
29	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
30	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
31	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
32	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  var.getLocalPart());  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  var.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  var.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
33	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	22	None	replace
34	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	22	2	replace
35	[BUG]  [BUGGY]  n.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	22	2	replace
36	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	22	2	replace
37	[BUG]  [BUGGY]  n.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	22	2	replace
38	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	147	2	replace
39	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	147	2	replace
40	[BUG]  [BUGGY]  lhs.addChildToBack(a);  [CE]  cannot  find  symbol  a  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(a);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(a);	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  a	147	None	replace
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
42	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
44	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
46	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
47	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
48	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
50	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
51	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
52	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
53	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
54	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	148	1	add
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
56	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
57	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
58	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
59	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
60	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
61	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
62	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
63	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
64	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
65	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
66	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
67	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
68	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
70	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	193	2	add
71	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
72	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.NAME)  {  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
73	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	180	2	replace
74	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	180	2	replace
75	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
76	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	117	2	replace
77	[BUG]  [BUGGY]  rhs.addChildToBack(assign.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	117	2	replace
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(assign.getFirstChild());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  IllegalArgumentException  	117	2	replace
79	[BUG]  [BUGGY]  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign.getFirstChild());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  IllegalArgumentException  	117	2	replace
80	[BUG]  [BUGGY]  rhs.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign.detachFromRoot());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
81	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(assign.removeFirstChild());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	117	2	replace
82	[BUG]  [BUGGY]  rhs.addChildToBack(assign.removeFirstChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign.removeFirstChild());	  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	117	2	replace
83	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
84	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
85	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
86	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
87	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
88	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
89	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
90	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
91	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
92	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
93	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
94	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	195	2	add
95	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getString(),  c);  [CE]  cannot  find  symbol  c  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getString(),  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getString(),  c);	  lhs.addChildToBack(rhs.getString());    	non-compiled	[CE]  cannot  find  symbol  c	92	None	replace
96	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getString());	  lhs.addChildToBack(rhs.getString());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
97	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getString(),  assign);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getString(),  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getString(),  assign);	  lhs.addChildToBack(rhs.getString());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
98	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getString(),  b);  [CE]  cannot  find  symbol  b  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getString(),  b);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getString(),  b);	  lhs.addChildToBack(rhs.getString());    	non-compiled	[CE]  cannot  find  symbol  b	92	None	replace
99	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.getString());	  lhs.addChildToBack(rhs.getString());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(lhs);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  RuntimeException  	106	2	replace
101	[BUG]  [BUGGY]  n.removeChild(lhs);  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(lhs);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  RuntimeException  	106	2	replace
102	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(assign);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	106	2	replace
103	[BUG]  [BUGGY]  n.removeChild(assign);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(assign);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	106	2	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(rhs);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  RuntimeException  	106	2	replace
105	[BUG]  [BUGGY]  n.removeChild(rhs);  [FE]  RuntimeException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(rhs);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	compilable	  [FE]  RuntimeException  	106	2	replace
106	[BUG]  [BUGGY]  NodeUtil.removeChild(lhs);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeUtil.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeUtil.removeChild(lhs);	  lhs.addChildToBack(rhs);    n.removeChild(rhs);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	106	None	replace
107	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.cloneTree());	  lhs.addChildToBack(assign.cloneTree());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	198	1	replace
108	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.cloneTree());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.cloneTree());	  lhs.addChildToBack(assign.cloneTree());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	198	1	replace
109	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree(),  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree(),  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree(),  rhs);	  lhs.addChildToBack(assign.cloneTree());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
110	[BUG]  [BUGGY]  Node  c  =  rhs.getCurrentNode();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getCurrentNode();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  rhs.getCurrentNode();	  Node    c    =    rhs.getNext();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
111	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  assign.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  assign.getNext();	  Node    c    =    rhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	2	replace
112	[BUG]  [BUGGY]  Node  c  =  assign.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  assign.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  assign.getNext();	  Node    c    =    rhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	2	replace
113	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	139	None	add
114	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	139	None	add
115	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	139	None	add
116	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	139	None	add
117	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChild  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	139	None	add
118	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFrom  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFrom	  	non-compiled	[CE]  ')'  expected	139	None	add
119	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	139	None	add
120	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	139	None	add
121	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  var.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());  var.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	131	2	replace
122	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  var.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  var.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  var.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	131	2	replace
123	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
124	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
125	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
126	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
127	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
128	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
129	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
130	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
132	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
133	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
134	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
135	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
136	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
137	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
138	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	221	2	add
139	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
140	[BUG]  [BUGGY]  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
141	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
142	[BUG]  [BUGGY]  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
143	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(assign.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
144	[BUG]  [BUGGY]  lhs.removeChild(assign.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	241	2	replace
145	[BUG]  [BUGGY]  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  lhs.getNext();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getNext();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	103	None	replace
146	[BUG]  [BUGGY]  lhs.addChildToBack(n);  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n);  Node  rhs  =  lhs.getNext();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getNext();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	103	None	replace
147	[BUG]  [BUGGY]  lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getNext();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getNext();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	103	None	replace
148	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Node  lhs  =  lhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  Node  lhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  Node  lhs  =  lhs.getNext();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getNext();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	103	None	replace
149	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Node  var  =  lhs.getNext();  [CE]  variable  var  is  already  defined  in  method  applyCollapses()  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  Node  var  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  Node  var  =  lhs.getNext();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getNext();    	non-compiled	[CE]  variable  var  is  already  defined  in  method  applyCollapses()	103	None	replace
150	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	249	None	add
151	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	249	None	add
152	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
153	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    lhs.detachFromParent();	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
155	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  lhs.detachFromParent();  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    lhs.detachFromParent();	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
156	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	249	None	add
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
158	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
159	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Node  lhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	249	None	add
160	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
161	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    Node    parent    =    n.getParent();    var.removeChild(parent);    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalArgumentException  	249	2	add
162	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.getFirstChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
163	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.getFirstChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
164	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.getLastChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
165	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs).detachFromParent();  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs).detachFromParent();	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
166	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  lhs.addChildToBack(rhs).detachFromParent();	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	62	None	replace
167	[BUG]  [BUGGY]  n.addChildToBack(assign);  n.addChildToBack(assign).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign);  n.addChildToBack(assign).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign);  n.addChildToBack(assign).detachFromParent();	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	62	None	replace
168	[BUG]  [BUGGY]  n.addChildToBack(assign);  lhs.addChildToBack(assign).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]                          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign);  lhs.addChildToBack(assign).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign);  lhs.addChildToBack(assign).detachFromParent();	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	62	None	replace
169	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
170	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
171	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
172	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
173	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
174	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
175	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
176	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
177	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
178	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
179	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	89	2	add
180	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	89	2	add
181	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());    rhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
182	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    rhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	89	1	add
183	[BUG]  [BUGGY]  var  x=3!=  ';'  expected  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  ';'  expected  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  ';'  expected	  foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	13	None	replace
184	[BUG]  [BUGGY]  var  x=3!=  ';'  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  ';'  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  ';'	  foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	13	None	replace
185	[BUG]  [BUGGY]  var  x=3  >>  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >>  ';'  expected  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >>  ';'  expected	  foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	13	None	replace
186	[BUG]  [BUGGY]  var  x=3  >>  ';'  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >>  ';'  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >>  ';'	  foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	13	None	replace
187	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	83	None	add
188	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	83	1	add
189	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	83	1	add
190	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	83	None	add
191	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	83	None	add
192	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	83	None	add
193	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	83	None	add
194	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChild  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	83	None	add
195	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFrom  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFrom	  	non-compiled	[CE]  ')'  expected	83	None	add
196	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
197	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
198	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
199	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
200	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
201	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
202	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
203	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
204	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
205	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
206	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
207	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
208	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
209	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	279	2	add
210	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [CE]  ';'  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());	  	non-compiled	[CE]  ';'  expected	279	None	add
211	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalStateException  	280	2	replace
212	[BUG]  [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalStateException  	280	2	replace
213	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalStateException  	280	2	replace
214	[BUG]  [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalStateException  	280	2	replace
215	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
216	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
217	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
218	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
219	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
220	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
221	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    rhs.addChildToBack(lhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
222	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    rhs.addChildToBack(lhs.getFirstChild());  rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
223	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.detachFromParent();  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.detachFromParent();  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
224	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.detachFromParent();  rhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.detachFromParent();  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.detachFromParent();  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
225	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
226	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
227	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
228	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        rhs.addChildToBack(lhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	25	2	add
229	[BUG]  [BUGGY]  lhs.addChildToBack(n);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	207	None	replace
230	[BUG]  [BUGGY]  lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	207	None	replace
231	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Node  var  =  lhs.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  Node  var  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  Node  var  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  var  is  already  defined  in  method  applyCollapses()	207	None	replace
232	[BUG]  [BUGGY]  n.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	207	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  redeclaration);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  redeclaration);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  redeclaration);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	162	None	replace
234	[BUG]  [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  rhs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.traverse(compiler,  lhs,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  assign,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	162	None	replace
236	[BUG]  [BUGGY]  node.traverse(compiler,  lhs,  rhs);  [CE]  cannot  find  symbol  node  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  node.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	node.traverse(compiler,  lhs,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  node	162	None	replace
237	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  cannot  find  symbol  nodeTraversal  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodeTraversal.traverse(compiler,  lhs,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	162	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseVariableDeclarations)  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  this);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  this);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseVariableDeclarations)	162	None	replace
239	[BUG]  [BUGGY]  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  lhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  lhs  =  assign.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	134	None	replace
240	[BUG]  [BUGGY]  Node  rhs  =  assign.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  assign.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	134	None	replace
241	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	134	2	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	134	2	replace
243	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	compilable	  [FE]  IllegalStateException  	134	2	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]                          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  lhs.addChildToBack(assign.getFirstChild());    Node    lhs    =    assign.getFirstChild();    	compilable	  [FE]  IllegalStateException  	134	2	replace
245	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	143	None	add
246	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	143	None	add
247	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChild  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	143	None	add
248	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	143	None	add
249	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	143	None	add
250	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	143	None	add
251	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	143	None	add
252	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFrom  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFrom	  	non-compiled	[CE]  ')'  expected	143	None	add
253	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getLastChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  c  =  rhs.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	16	None	add
254	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  c  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getLastChild();    c  =  rhs.getLastChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
255	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  c  =  rhs.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  c  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    c  =  rhs.getLastChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
256	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  rhs  =  rhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  rhs  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  rhs  =  rhs.getLastChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	16	None	add
257	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  nodesToCollapse.add(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getLastChild();    nodesToCollapse.add(rhs.getLastChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
258	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  nodesToCollapse.add(rhs.getLastChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  nodesToCollapse.add(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    nodesToCollapse.add(rhs.getLastChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
259	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  lhs.getLastChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  c  =  lhs.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	16	None	add
260	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getLastChild());  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  c  =  rhs.getLastChild());	  	non-compiled	[CE]  ';'  expected	16	None	add
261	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  x  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getLastChild();    Node  x  =  rhs.getLastChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
262	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  x  =  rhs.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  x  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  x  =  rhs.getLastChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	add
263	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  lhs.getParent();	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
264	[BUG]  [BUGGY]  Node  c  =  lhs.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  lhs.getParent();	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
265	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.EXPR_RESULT)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
266	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  Node  c  =  lhs.getNext();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.EXPR_RESULT)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
267	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
268	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  Node  c  =  lhs.getNext();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
269	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
270	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  Node  c  =  lhs.getNext();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
271	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
272	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  Node  c  =  lhs.getNext();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  Node  c  =  lhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  Node  c  =  lhs.getNext();  }	  Node    c    =    lhs.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	178	2	replace
273	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
274	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
275	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
276	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
277	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  rhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());  rhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
278	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  rhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());  rhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
279	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
280	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
281	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
282	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
283	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
284	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	116	2	add
285	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
286	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  rhs  =  rhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  rhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  rhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	18	None	add
287	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  parent.replaceChild(n,  assign);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
288	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.removeChild(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();  conn.removeChild(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
289	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.addChildToBack(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();  conn.addChildToBack(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
290	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();redeclaration  =  true;  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();redeclaration  =  true;  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();redeclaration  =  true;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
291	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  x  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getNext();    Node  x  =  rhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	add
292	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  x  =  rhs.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  x  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  x  =  rhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	add
293	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.removeChild(rhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Node  c  =  rhs.getNext();  conn.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Node  c  =  rhs.getNext();  conn.removeChild(rhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	18	None	add
294	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  lhs.getLastChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
295	[BUG]  [BUGGY]  Node  c  =  lhs.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  lhs.getLastChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
296	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  assign.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  assign.getLastChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
297	[BUG]  [BUGGY]  Node  c  =  assign.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  assign.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  assign.getLastChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
298	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
299	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
300	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
301	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
302	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
303	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
304	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
305	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
306	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
307	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	152	1	add
308	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SEMI)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  SEMI  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SEMI)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SEMI)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI	152	None	add
309	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachfromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	152	None	add
310	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	compilable	  [FE]  IllegalStateException  	244	2	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	compilable	  [FE]  IllegalStateException  	244	2	replace
312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
313	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
314	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
315	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
316	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
317	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
319	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
320	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(lhs);	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	97	2	replace
321	[BUG]  [BUGGY]  n.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs);	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	97	2	replace
322	[BUG]  [BUGGY]  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
323	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
324	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
325	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild(),  lhs.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild(),  lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild(),  lhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	189	None	replace
326	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  var.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  var.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());  var.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
327	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
328	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
329	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
330	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
331	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
332	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
333	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
334	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
335	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
336	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
337	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
338	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getLastChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
339	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.next());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.next());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.next());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
340	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
341	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  IllegalArgumentException  	8	2	add
342	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromNext());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
343	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromNext());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
344	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs,  var.detachFromNext());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs,  var.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs,  var.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
345	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
346	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
347	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
348	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
349	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
350	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
351	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
352	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
353	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildIntoBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildIntoBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildIntoBack(rhs.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	130	None	add
354	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getLastChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getLastChild());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	130	None	add
355	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
356	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
357	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
358	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	130	2	add
359	[BUG]  [BUGGY]  lhs.addChildToBack(rhs).replaceChild(n,  assign);  [CE]  void  cannot  be  dereferenced  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs).replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs).replaceChild(n,  assign);	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).replaceChild(n,    assign);    	non-compiled	[CE]  void  cannot  be  dereferenced	271	None	replace
360	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).replaceChild(var,  assign);  [CE]  void  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).replaceChild(var,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).replaceChild(var,  assign);	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).replaceChild(n,    assign);    	non-compiled	[CE]  void  cannot  be  dereferenced	271	None	replace
361	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  varNode).replaceChild(n,  assign);  [CE]  cannot  find  symbol  varNode  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  varNode).replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  varNode).replaceChild(n,  assign);	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).replaceChild(n,    assign);    	non-compiled	[CE]  cannot  find  symbol  varNode	271	None	replace
362	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  lhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(assign);    lhs.removeChild(assign);	  	compilable	  [FE]  NullPointerException  	6	2	add
363	[BUG]  [BUGGY]  lhs.removeChild(assign);  lhs.removeChild(assign);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  lhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    lhs.removeChild(assign);	  	compilable	  [FE]  NullPointerException  	6	2	add
364	[BUG]  [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    NodeTraversal.traverse(compiler,  lhs,  rhs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	6	None	add
365	[BUG]  [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	6	None	add
366	[BUG]  [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    NodeTraversal.traverse(compiler,  lhs,  rhs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)	6	None	add
367	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  rhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(assign);    rhs.removeChild(assign);	  	compilable	  [FE]  NullPointerException  	6	2	add
368	[BUG]  [BUGGY]  lhs.removeChild(assign);  rhs.removeChild(assign);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  rhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    rhs.removeChild(assign);	  	compilable	  [FE]  NullPointerException  	6	2	add
369	[BUG]  [BUGGY]  lhs.removeChild(assign);  NodeUtil.removeChild(assign);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  NodeUtil.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    NodeUtil.removeChild(assign);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	6	None	add
370	[BUG]  [BUGGY]  lhs.removeChild(assign);  nodesToCollapse.removeChild(assign);  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  nodesToCollapse.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    nodesToCollapse.removeChild(assign);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
371	[BUG]  [BUGGY]  lhs.removeChild(assign);  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign);  Node  lhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	6	None	add
372	[BUG]  [BUGGY]  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
373	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
374	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
375	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  n.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	199	None	replace
376	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  }	  if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	44	2	replace
377	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  }	  if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	44	2	replace
378	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	44	2	replace
379	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	44	2	replace
380	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	259	2	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	259	2	replace
382	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	29	None	replace
383	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	29	None	replace
384	[BUG]  [BUGGY]  nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	29	None	replace
385	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	compilable	  [FE]  NullPointerException  	29	2	replace
386	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	compilable	  [FE]  NullPointerException  	29	2	replace
387	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	29	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getLastChild()!=  null);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getLastChild()!=  null);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getLastChild()!=  null);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	29	None	replace
389	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign,  n.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign,  n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign,  n.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
390	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  lhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  lhs.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
391	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  n,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  n,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  n,  rhs.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
392	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  n.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
393	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.detachFromParent();    lhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
394	[BUG]  [BUGGY]  lhs.detachFromParent();  lhs.detachFromParent();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    lhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
395	[BUG]  [BUGGY]  lhs.detachFromParent();  Node  lhs.detachFromParent();  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Node  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Node  lhs.detachFromParent();	  	non-compiled	[CE]  ';'  expected	3	None	add
396	[BUG]  [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Node  lhs  =  rhs.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	3	None	add
397	[BUG]  [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	3	None	add
398	[BUG]  [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	3	None	add
399	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.detachFromParent();    rhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
400	[BUG]  [BUGGY]  lhs.detachFromParent();  rhs.detachFromParent();  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    rhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
401	[BUG]  [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.next();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Node  lhs  =  rhs.next();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Node  lhs  =  rhs.next();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	3	None	add
402	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.cloneTree());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.cloneTree());	  lhs.addChildToBack(assignment,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	208	None	replace
403	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.next());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.next());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.next());	  lhs.addChildToBack(assignment,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
404	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	79	None	add
405	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	79	None	add
406	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	79	1	add
407	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	79	1	add
408	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	79	None	add
409	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	79	None	add
410	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	79	None	add
411	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	79	None	add
412	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	79	None	add
413	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
414	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
415	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
416	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
417	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
418	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
419	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	238	None	add
420	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
421	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
422	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	238	None	add
423	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	238	None	add
424	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
425	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	238	2	add
426	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Il  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	114	None	add
427	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
428	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	114	2	add
429	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	114	2	add
430	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( "  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	114	None	add
431	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	114	2	add
432	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	114	2	add
433	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(  [CE]  ')'  expected  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(	  	non-compiled	[CE]  ')'  expected	114	None	add
434	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalS  [CE]  '('  or  '['  expected  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalS  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalS	  	non-compiled	[CE]  '('  or  '['  expected	114	None	add
435	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Illegal  [CE]  '('  or  '['  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Illegal  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  Illegal	  	non-compiled	[CE]  '('  or  '['  expected	114	None	add
436	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
437	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs.detachFromParent());  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.addChildToBack(lhs.detachFromParent());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
438	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getLastChild());  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.removeChild(lhs.getLastChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
439	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getFirstChild());  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.removeChild(lhs.getFirstChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
440	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getString());  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.removeChild(lhs.getString());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
441	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs,  rhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.addChildToBack(lhs,  rhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
442	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.addChildToBack(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
443	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  conn.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  conn.removeChild(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
444	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs,  lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs,  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs,  lhs.detachFromParent());	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	45	None	replace
445	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs,  assign.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs,  assign.detachFromParent());	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	45	None	replace
446	[BUG]  [BUGGY]  Lhs.addChildToBack(n.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(n.detachFromParent());	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	45	None	replace
447	[BUG]  [BUGGY]  Lhs.addChildToBack(a.detachFromParent());  [CE]  cannot  find  symbol  a  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(a.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(a.detachFromParent());	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  a	45	None	replace
448	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
449	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
450	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    rhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
451	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    rhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
452	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
453	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
454	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  rhs.addChildToBack(assign);  [CE]  cannot  find  symbol  alloc  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(alloc);  rhs.addChildToBack(assign);	  	non-compiled	[CE]  cannot  find  symbol  alloc	57	None	add
455	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  rhs.addChildToBack(alloc);  [CE]  cannot  find  symbol  alloc  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  rhs.addChildToBack(alloc);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(alloc);  rhs.addChildToBack(alloc);	  	non-compiled	[CE]  cannot  find  symbol  alloc	57	None	add
456	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(n);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
457	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(n);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
458	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(n);  rhs.addChildToBack(n);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
459	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(n);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);  lhs.addChildToBack(n);  rhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        rhs.addChildToBack(assign);    lhs.addChildToBack(n);  rhs.addChildToBack(n);	  	compilable	  [FE]  IllegalArgumentException  	57	2	add
460	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
461	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
462	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
463	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
464	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
465	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
466	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	234	2	add
467	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	234	2	add
468	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
469	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	234	2	add
470	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	234	2	add
471	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	234	2	add
472	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	234	None	add
473	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	234	2	add
474	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	234	2	add
475	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	66	2	replace
476	[BUG]  [BUGGY]  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	66	2	replace
477	[BUG]  [BUGGY]  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  lhs  =  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  lhs  =  assign.detachFromParent();	  lhs.addChildToBack(assign.detachFromParent());    Node    lhs    =    assign.detachFromParent();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	184	None	replace
478	[BUG]  [BUGGY]  nodesToCollapse.add(assign.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.add(assign.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.add(assign.detachFromParent());  Node  lhs  =  assign.detachFromParent();	  lhs.addChildToBack(assign.detachFromParent());    Node    lhs    =    assign.detachFromParent();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	184	None	replace
479	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  Node  lhs  =  assign.detachFromParent();	  lhs.addChildToBack(assign.detachFromParent());    Node    lhs    =    assign.detachFromParent();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	184	None	replace
480	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.detachFromParent();	  lhs.addChildToBack(assign.detachFromParent());    Node    lhs    =    assign.detachFromParent();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	184	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  lhs  =  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  lhs  =  assign.detachFromParent();	  lhs.addChildToBack(assign.detachFromParent());    Node    lhs    =    assign.detachFromParent();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	184	None	replace
482	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(assign.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  RuntimeException  	133	2	replace
483	[BUG]  [BUGGY]  n.removeChild(assign.getFirstChild());  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(assign.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  RuntimeException  	133	2	replace
484	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  RuntimeException  	133	2	replace
485	[BUG]  [BUGGY]  n.removeChild(assign.getLastChild());  [FE]  RuntimeException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  RuntimeException  	133	2	replace
486	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(lhs.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  NullPointerException  	133	2	replace
487	[BUG]  [BUGGY]  n.removeChild(lhs.getFirstChild());  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(lhs.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());    	compilable	  [FE]  NullPointerException  	133	2	replace
488	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	81	None	add
489	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	81	1	add
490	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	81	1	add
491	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	81	None	add
492	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	81	None	add
493	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	81	None	add
494	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	81	None	add
495	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	81	None	add
496	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	81	None	add
497	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.getLastChild());	  lhs.addChildToBack(assign,    rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
498	[BUG]  [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  assign,  rhs.getLastChild());	  lhs.addChildToBack(assign,    rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
499	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildBefore(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildBefore(assign,  rhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
500	[BUG]  [BUGGY]  lhs.addChildBefore(assign,  rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildBefore(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildBefore(assign,  rhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
501	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildBefore(rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildBefore(rhs,  assign);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
502	[BUG]  [BUGGY]  lhs.addChildBefore(rhs,  assign);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildBefore(rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildBefore(rhs,  assign);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
503	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildBefore(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildBefore(assign,  rhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
504	[BUG]  [BUGGY]  n.addChildBefore(assign,  rhs);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildBefore(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildBefore(assign,  rhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
505	[BUG]  [BUGGY]  n.addChildBefore(assign);  [CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildBefore(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildBefore(assign);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	non-compiled	[CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;	263	None	replace
506	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildBefore(assign,  lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildBefore(assign,  lhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
507	[BUG]  [BUGGY]  n.addChildBefore(assign,  lhs);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildBefore(assign,  lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildBefore(assign,  lhs);	  lhs.addChildToBack(assign);    lhs.addChildBefore(assign);    	compilable	  [FE]  IllegalArgumentException  	263	2	replace
508	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	75	None	add
509	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	75	None	add
510	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	75	None	add
511	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	75	None	add
512	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	75	1	add
513	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	75	1	add
514	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	75	None	add
515	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	75	None	add
516	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	75	None	add
517	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	125	2	replace
518	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	125	2	replace
519	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
520	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
521	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
522	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(n);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
523	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(n);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
524	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
525	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
526	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  n.removeChild(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    n.removeChild(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
527	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  n.removeChild(lhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  n.removeChild(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    n.removeChild(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
528	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  lhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  lhs.addChildIntoBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildIntoBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
529	[BUG]  [BUGGY]  parent.replaceChild(lhs,  rhs);  [CE]  cannot  find  symbol  parent  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  parent.replaceChild(lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	parent.replaceChild(lhs,  rhs);	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  parent	255	None	replace
530	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
531	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
532	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
533	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
534	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.removeChildToBack(rhs);  rhs.addChildToBack(lhs);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.removeChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.removeChildToBack(rhs);  rhs.addChildToBack(lhs);	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
535	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
536	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
537	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  Lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  Lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    Lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	101	None	add
538	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildIntoBack(lhs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildIntoBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildIntoBack(lhs);	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
539	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(assign.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
540	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(assign.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
541	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
542	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
543	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  rhs.addChildToBack(assign.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getNext());    rhs.addChildToBack(assign.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
544	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  rhs.addChildToBack(assign.getNext());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  rhs.addChildToBack(assign.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    rhs.addChildToBack(assign.getNext());	  	compilable	  [FE]  NullPointerException  	156	2	add
545	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  parent.replaceChild(n,  assign);  [CE]  cannot  find  symbol  parent  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(assign.getNext());  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  cannot  find  symbol  parent	156	None	add
546	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	156	None	add
547	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    NodeTraversal.traverse(compiler,  lhs,  rhs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	156	None	add
548	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  nodesToCollapse.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  lhs.addChildToBack(assign.getNext());  nodesToCollapse.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    lhs.addChildToBack(assign.getNext());  nodesToCollapse.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
549	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext());  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());    NodeTraversal.traverse(compiler,  lhs,  rhs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)	156	None	add
550	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    b=    	non-compiled	[CE]  ';'  expected	220	None	replace
551	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    b=    	non-compiled	[CE]  ';'  expected	220	None	replace
552	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c=  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c=  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c=	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    b=    	non-compiled	[CE]  ';'  expected	220	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	264	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	264	None	replace
555	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  assign,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	264	None	replace
556	[BUG]  [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.traverse(compiler,  lhs,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	264	None	replace
557	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  n,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	264	None	replace
558	[BUG]  [BUGGY]  nodesToCollapse  =  compiler.traverse(lhs,  rhs,  new  Collapse());  [CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse  =  compiler.traverse(lhs,  rhs,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse  =  compiler.traverse(lhs,  rhs,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse	264	None	replace
559	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
560	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
561	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
562	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
563	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
564	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
565	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
566	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
567	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
568	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
569	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
570	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
571	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
572	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
573	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
574	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
575	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
576	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
577	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
578	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
579	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
580	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
581	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
582	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
583	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
584	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
585	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
586	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
587	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
588	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	67	2	add
589	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs,  c.detachFromParent());  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs,  c.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs,  c.detachFromParent());	  Lhs.addChildToBack(rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	46	None	replace
590	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs,  var.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs,  var.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs,  var.detachFromParent());	  Lhs.addChildToBack(rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	46	None	replace
591	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs,  b.detachFromParent());  [CE]  cannot  find  symbol  b  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs,  b.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs,  b.detachFromParent());	  Lhs.addChildToBack(rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  b	46	None	replace
592	[BUG]  [BUGGY]  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	69	None	replace
593	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	69	None	replace
594	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	69	None	replace
595	[BUG]  [BUGGY]  nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	69	None	replace
596	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	69	2	replace
597	[BUG]  [BUGGY]  rhs  =  lhs.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	69	2	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	69	None	replace
599	[BUG]  [BUGGY]  LHs.addChildToBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  LHs  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  LHs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	LHs.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.CAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  LHs	145	None	replace
600	[BUG]  [BUGGY]  lhs.addChildToBack(a.detachFromParent());  [CE]  cannot  find  symbol  a  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(a.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(a.detachFromParent());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.CAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  a	145	None	replace
601	[BUG]  [BUGGY]  Lhs  lhs  =  rhs.getLastChild();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs  lhs  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs  lhs  =  rhs.getLastChild();	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.CAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
602	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	146	None	add
603	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	146	None	add
604	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	146	None	add
605	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	146	None	add
606	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChild  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	146	None	add
607	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	146	None	add
608	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	146	None	add
609	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	146	None	add
610	[BUG]  [BUGGY]  n.addChildToBack(assign,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign,  rhs.detachFromParent());	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
611	[BUG]  [BUGGY]  n.addChildToBack(lhs,  assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs,  assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs,  assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
612	[BUG]  [BUGGY]  n.addChildToBack(assign,  lhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign,  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign,  lhs.detachFromParent());	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
613	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  varNode,  rhs.detachFromParent());  [CE]  cannot  find  symbol  varNode  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  varNode,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  varNode,  rhs.detachFromParent());	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  varNode	61	None	replace
614	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
615	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
616	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
617	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
618	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
619	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
620	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  ';'  expected	33	None	replace
621	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChil	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  ';'  expected	33	None	replace
622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
623	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
624	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
625	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
626	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
627	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
628	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
629	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
630	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
631	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
632	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
633	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
634	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
635	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
636	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  assign.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    Node  rhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	10	None	add
637	[BUG]  [BUGGY]  Lhs.removeChild(rhs.getString());  [CE]  cannot  find  symbol  Lhs  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(rhs.getString());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
638	[BUG]  [BUGGY]  Lhs.removeChild(lhs.getString(),  rhs);  [CE]  cannot  find  symbol  Lhs  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(lhs.getString(),  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(lhs.getString(),  rhs);	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
639	[BUG]  [BUGGY]  NodeUtil.removeChild(lhs.getString());  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeUtil.removeChild(lhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeUtil.removeChild(lhs.getString());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
640	[BUG]  [BUGGY]  Lhs.removeChild(lhs.getString(),  assign);  [CE]  cannot  find  symbol  Lhs  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(lhs.getString(),  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(lhs.getString(),  assign);	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
641	[BUG]  [BUGGY]  Node.removeChild(lhs.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node.removeChild(lhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node.removeChild(lhs.getString());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	93	None	replace
642	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	213	None	add
643	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	213	1	add
644	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	213	1	add
645	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	213	None	add
646	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	213	None	add
647	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	213	None	add
648	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	213	None	add
649	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	213	None	add
650	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	213	None	add
651	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
652	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
653	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
654	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
655	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
656	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
657	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
658	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
659	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(n);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
660	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(n);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(n);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
661	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
662	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	54	2	add
663	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assigned);  lhs.addChildToBack(assign);  [CE]  cannot  find  symbol  assigned  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(assigned);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(assigned);  lhs.addChildToBack(assign);	  	non-compiled	[CE]  cannot  find  symbol  assigned	54	None	add
664	[BUG]  [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  lhs.addChildToBack(assign);  [CE]  cannot  find  symbol  alloc  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);  lhs.addChildToBack(alloc);  lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);        lhs.addChildToBack(assign);    lhs.addChildToBack(alloc);  lhs.addChildToBack(assign);	  	non-compiled	[CE]  cannot  find  symbol  alloc	54	None	add
665	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
666	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
667	[BUG]  [BUGGY]  nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.add(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
668	[BUG]  [BUGGY]  n.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs.getLastChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
669	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	87	None	add
670	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	87	None	add
671	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	87	1	add
672	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	87	1	add
673	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	87	None	add
674	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	87	None	add
675	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	87	None	add
676	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	87	None	add
677	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	87	None	add
678	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.removeFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.removeFirstChild());	  lhs.addChildToBack(assign,    rhs.removeFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	229	None	replace
679	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.removeFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.removeFirstChild());	  lhs.addChildToBack(assign,    rhs.removeFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	229	None	replace
680	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  c.removeFirstChild());  [CE]  cannot  find  symbol  c  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  c.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  c.removeFirstChild());	  lhs.addChildToBack(assign,    rhs.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol  c	229	None	replace
681	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	153	2	replace
682	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	153	2	replace
683	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	153	2	replace
684	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	153	2	replace
685	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	153	2	replace
686	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	153	2	replace
687	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
688	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
689	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild(),  lhs.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild(),  lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild(),  lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	192	None	replace
690	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	176	2	replace
691	[BUG]  [BUGGY]  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	176	2	replace
692	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	176	2	replace
693	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	176	2	replace
694	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	176	2	replace
695	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	176	2	replace
696	[BUG]  [BUGGY]  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(lhs,  rhs.getLastChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(lhs,  rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(lhs,  rhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	176	None	replace
697	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  lhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToFront(rhs);    lhs.addChildToFront(rhs);	  	compilable	  [FE]  IllegalArgumentException  	227	2	add
698	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  lhs.addChildToFront(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  lhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    lhs.addChildToFront(rhs);	  	compilable	  [FE]  IllegalArgumentException  	227	2	add
699	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs);  lhs.addChildToFront(rhs);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs);  lhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    NodeUtil.copyCurrentStructure(lhs);  lhs.addChildToFront(rhs);	  	non-compiled	[CE]  cannot  find  symbol	227	None	add
700	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  rhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToFront(rhs);    rhs.addChildToFront(rhs);	  	compilable	  [FE]  IllegalArgumentException  	227	2	add
701	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  rhs.addChildToFront(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  rhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    rhs.addChildToFront(rhs);	  	compilable	  [FE]  IllegalArgumentException  	227	2	add
702	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  Node  lhs.addChildToFront(rhs);  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  Node  lhs.addChildToFront(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    Node  lhs.addChildToFront(rhs);	  	non-compiled	[CE]  ';'  expected	227	None	add
703	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs,  rhs);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    NodeUtil.copyCurrentStructure(lhs,  rhs);	  	non-compiled	[CE]  cannot  find  symbol	227	None	add
704	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  lhs.addChildToFront(rhs);  parent.replaceChild(n,  assign);  [CE]  cannot  find  symbol  parent  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  lhs.addChildToFront(rhs);  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    lhs.addChildToFront(rhs);  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  cannot  find  symbol  parent	227	None	add
705	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs,  rhs).removeChild(rhs);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(rhs);  NodeUtil.copyCurrentStructure(lhs,  rhs).removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);    NodeUtil.copyCurrentStructure(lhs,  rhs).removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol	227	None	add
706	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getNext());	  lhs.addChildToBack(assign.getNext());    	compilable	  [FE]  NullPointerException  	157	2	replace
707	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getNext());	  lhs.addChildToBack(assign.getNext());    	compilable	  [FE]  NullPointerException  	157	2	replace
708	[BUG]  [BUGGY]  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  lhs  =  rhs.getFirstChild();	  if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	49	None	replace
709	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.detachFromParent();  lhs.addChildToBack(rhs);	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalStateException  	282	2	replace
710	[BUG]  [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  lhs.addChildToBack(rhs);	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalStateException  	282	2	replace
711	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  n.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  n.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	282	None	replace
712	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent(),  n);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent(),  n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent(),  n);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
713	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  rhs,  varNode);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	159	None	replace
714	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  assign,  rhs);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
715	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  rhs,  var);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
716	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  parent);  [CE]  cannot  find  symbol  parent  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  parent);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  rhs,  parent);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  parent	159	None	replace
717	[BUG]  [BUGGY]  lhs.removeChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(rhs);	  lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
718	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.removeChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  lhs.removeChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  lhs.removeChildToBack(rhs);	  lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
719	[BUG]  [BUGGY]  lhs.addChildToBack(n);  lhs.removeChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  lhs.removeChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n);  lhs.removeChildToBack(rhs);	  lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
720	[BUG]  [BUGGY]  lhs.removeChildToBack(assign);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(assign);	  lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	270	None	replace
721	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	115	None	replace
722	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
723	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
724	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
725	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
726	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChil	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	115	None	replace
727	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
728	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
729	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
730	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	2	replace
731	[BUG]  [BUGGY]  lhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildIntoBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildIntoBack(rhs);	  lhs.addChildToBack(rhs);    lhs.addChildIntoBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
732	[BUG]  [BUGGY]  lhs.detachFromParent();  lhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  lhs.addChildIntoBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();  lhs.addChildIntoBack(rhs);	  lhs.addChildToBack(rhs);    lhs.addChildIntoBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
733	[BUG]  [BUGGY]  lhs.removeChildIntoBack(assign);  lhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildIntoBack(assign);  lhs.addChildIntoBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildIntoBack(assign);  lhs.addChildIntoBack(rhs);	  lhs.addChildToBack(rhs);    lhs.addChildIntoBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
734	[BUG]  [BUGGY]  lhs.addChildIntoBack(assign);  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildIntoBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildIntoBack(assign);	  lhs.addChildToBack(rhs);    lhs.addChildIntoBack(rhs);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
735	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(lhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());    	compilable	  [FE]  NullPointerException  	26	2	replace
736	[BUG]  [BUGGY]  rhs.addChildToBack(lhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(lhs.getFirstChild());	  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());    	compilable	  [FE]  NullPointerException  	26	2	replace
737	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());    	compilable	  [FE]  NullPointerException  	26	2	replace
738	[BUG]  [BUGGY]  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(lhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());    	compilable	  [FE]  NullPointerException  	26	2	replace
739	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
740	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getLastChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
741	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.removeChild(rhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  conn.removeChild(rhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
742	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.addChildToBack(rhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  conn.addChildToBack(rhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
743	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.addChildToBack(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  conn.addChildToBack(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
744	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.removeChild(lhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  conn.removeChild(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  conn.removeChild(lhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
745	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  nodesToCollapse.add(rhs);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  nodesToCollapse.add(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  nodesToCollapse.add(rhs);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
746	[BUG]  [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  parent.replaceChild(n,  assign);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  assign.getFirstChild();  Node  c  =  assign.getFirstChild();  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    assign.getFirstChild();    Node  c  =  assign.getFirstChild();  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	63	None	add
747	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  endNode);  [CE]  cannot  find  symbol  endNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  endNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  endNode);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    varNode);    	non-compiled	[CE]  cannot  find  symbol  endNode	167	None	replace
748	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  parent);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  parent);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  parent);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    varNode);    	non-compiled	[CE]  cannot  find  symbol  parent	167	None	replace
749	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  var);  [CE]  cannot  find  symbol  c  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  var);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  cannot  find  symbol  c	166	None	replace
750	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  c);  [CE]  cannot  find  symbol  c  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  c);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  cannot  find  symbol  c	166	None	replace
751	[BUG]  [BUGGY]  lhs.addChildToBack(var,  rhs.detachFromParent(),  assign);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(var,  rhs.detachFromParent(),  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(var,  rhs.detachFromParent(),  assign);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	166	None	replace
752	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  c  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	14	None	add
753	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getLastChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  c  =  rhs.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	14	None	add
754	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  rhs  =  rhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  rhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  rhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	14	None	add
755	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getFirstChild();    c  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	add
756	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  c  =  rhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    c  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	add
757	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  x  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    rhs.getFirstChild();    Node  x  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	add
758	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  x  =  rhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  x  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  x  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	add
759	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  lhs.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  c  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	14	None	add
760	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getFirstChild());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  c  =  rhs.getFirstChild());	  	non-compiled	[CE]  ';'  expected	14	None	add
761	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign);  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(assign);  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	129	2	replace
762	[BUG]  [BUGGY]  n.removeChild(assign);  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign);  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(assign);  lhs.addChildToBack(rhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  NullPointerException  	129	2	replace
763	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	141	None	add
764	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	141	None	add
765	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	141	None	add
766	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addCh  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	141	None	add
767	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	141	None	add
768	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	141	None	add
769	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	141	None	add
770	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	141	None	add
771	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  n.getLastChild();	  Node    c    =    rhs.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	2	replace
772	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  n.getLastChild();	  Node    c    =    rhs.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	2	replace
773	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  foo(x);var  x=3  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	177	None	add
774	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  x=3  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    x=3	  	non-compiled	[CE]  ';'  expected	177	None	add
775	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  Node  x  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node    c    =    lhs.getNext();    Node  x  =  lhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	177	1	add
776	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  Node  x  =  lhs.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  Node  x  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    Node  x  =  lhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	177	1	add
777	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    ||  x!=  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
778	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    ||  x!=  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
779	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  ||  x  ==  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  ||  x  ==  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    ||  x  ==  Expected.AssertionFailedError:  Expected.var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
780	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected.VAR  x=2;foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  ||  x!=  Expected.AssertionFailedError:  Expected.VAR  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    ||  x!=  Expected.AssertionFailedError:  Expected.VAR  x=2;foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
781	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  ||  x  ==  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  ||  x  ==  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    ||  x  ==  Expected.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
782	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
783	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
784	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
785	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
786	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
787	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
788	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
789	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
790	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
791	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
792	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
793	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
794	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
795	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
796	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeLastChild());  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	223	None	add
797	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
798	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
799	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
800	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
801	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
802	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
803	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
804	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
805	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNode());  lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNode());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNode());  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
806	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
807	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	107	2	add
808	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromName());  lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromName());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromName());  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
809	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
810	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
811	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
812	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
813	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
814	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
815	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
816	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
817	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
818	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
819	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
820	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
821	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.CALL)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.CALL)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
822	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.CALL)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.CALL)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.CALL)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
823	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
824	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	252	2	add
825	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(assign.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalArgumentException  	251	2	replace
826	[BUG]  [BUGGY]  n.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalArgumentException  	251	2	replace
827	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(lhs.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  NullPointerException  	251	2	replace
828	[BUG]  [BUGGY]  n.addChildToBack(lhs.getFirstChild());  [FE]  NullPointerException  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs.getFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  NullPointerException  	251	2	replace
829	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
830	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
831	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
832	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
833	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
834	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
835	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
836	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
837	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
838	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
839	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	173	None	add
840	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
841	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
842	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  Node  lhs  =  assign.getFirstChild();  n.removeChild(rhs.getLastChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  Node  lhs  =  assign.getFirstChild();  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    Node  lhs  =  assign.getFirstChild();  n.removeChild(rhs.getLastChild());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	173	None	add
843	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToFront(assign);	  lhs.addChildToFront(rhs);    	compilable	  [FE]  IllegalArgumentException  	228	2	replace
844	[BUG]  [BUGGY]  lhs.addChildToFront(assign);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToFront(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(assign);	  lhs.addChildToFront(rhs);    	compilable	  [FE]  IllegalArgumentException  	228	2	replace
845	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
846	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
847	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
848	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
849	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
850	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
851	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
852	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
853	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
854	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
855	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
856	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
857	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
858	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	126	2	add
859	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getFirstChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getFirstChild());    Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getFirstChild());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	126	None	add
860	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromNext());  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromNext());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
861	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
862	[BUG]  [BUGGY]  n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
863	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	77	None	add
864	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	77	None	add
865	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	77	None	add
866	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	77	None	add
867	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	77	None	add
868	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	77	None	add
869	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	77	None	add
870	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	77	1	add
871	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	77	1	add
872	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	202	2	replace
873	[BUG]  [BUGGY]  n.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(rhs.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	202	2	replace
874	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
875	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
876	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
877	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
878	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
879	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
880	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
881	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
882	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
883	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  IllegalStateException  	110	2	replace
884	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
885	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	110	2	replace
886	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	155	2	replace
887	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	155	2	replace
888	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	155	2	replace
889	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	155	2	replace
890	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	155	2	replace
891	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	155	2	replace
892	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	58	2	replace
893	[BUG]  [BUGGY]  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	58	2	replace
894	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	58	2	replace
895	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	58	2	replace
896	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs);  rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	58	2	replace
897	[BUG]  [BUGGY]  lhs.removeChild(rhs);  rhs.addChildToBack(assign);  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  rhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);  rhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	58	2	replace
898	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(assign,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  rhs.addChildToBack(assign,  varNode);	  lhs.addChildToBack(assign);    rhs.addChildToBack(assign);    	non-compiled	[CE]  cannot  find  symbol  varNode	58	None	replace
899	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
900	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromNext());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
901	[BUG]  [BUGGY]  n.detachFromParent();  lhs.addChildToBack(n.detachFromNext());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(n.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  lhs.addChildToBack(n.detachFromNext());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
902	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	160	None	replace
903	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  assign,  lhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	160	None	replace
904	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  assign,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	160	None	replace
905	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  assign,  rhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	160	None	replace
906	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapses,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>,Node)  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapses,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  collapses,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>,Node)	160	None	replace
907	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	160	None	replace
908	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
909	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
910	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
911	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
912	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
913	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
914	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
915	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
916	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
917	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
918	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
919	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
920	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChild(assign.getFirstChild());  n.removeChild(assign.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
921	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
922	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  n.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	132	2	add
923	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  c);  [CE]  cannot  find  symbol  c  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  c);	  lhs.addChildToBack(assign,    rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	53	None	replace
924	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  collapse);	  lhs.addChildToBack(assign,    rhs,    assign.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
925	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  parent);  [CE]  cannot  find  symbol  parent  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  parent);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  parent);	  lhs.addChildToBack(assign,    rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  parent	53	None	replace
926	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  b);  [CE]  cannot  find  symbol  b  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  b);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.detachFromParent(),  b);	  lhs.addChildToBack(assign,    rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  b	53	None	replace
927	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  c,  assign.detachFromParent());  [CE]  cannot  find  symbol  c  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  c,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  c,  assign.detachFromParent());	  lhs.addChildToBack(assign,    rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	53	None	replace
928	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange	  	non-compiled	[CE]  ';'  expected	118	None	add
929	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
930	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
931	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.  [CE]  reached  end  of  file  while  parsing  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
932	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
933	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.re  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.re  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.re	  	non-compiled	[CE]  ';'  expected	118	None	add
934	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange  [CE]  ';'  expected  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange	  	non-compiled	[CE]  ';'  expected	118	None	add
935	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCode  [CE]  ';'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCode  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCode	  	non-compiled	[CE]  ';'  expected	118	None	add
936	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
937	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
938	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
939	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
940	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
941	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
942	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
943	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
944	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
945	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
946	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
947	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
948	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
949	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
950	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
951	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
952	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
953	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	236	2	add
954	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
955	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
956	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
957	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
958	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
959	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
960	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
961	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
962	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
963	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	121	2	replace
964	[BUG]  [BUGGY]  ';'  expected  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  expected  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  expected	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
965	[BUG]  [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
966	[BUG]  [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
967	[BUG]  [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
968	[BUG]  [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
969	[BUG]  [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  ';'  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	';'  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	non-compiled	[CE]  not  a  statement	216	None	replace
970	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(lhs);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	99	2	replace
971	[BUG]  [BUGGY]  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(lhs);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	99	2	replace
972	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.removeChild(assign);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);    	compilable	  [FE]  NullPointerException  	99	2	replace
973	[BUG]  [BUGGY]  rhs.removeChild(assign);  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.removeChild(assign);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);    	compilable	  [FE]  NullPointerException  	99	2	replace
974	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs,  varNode);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	99	None	replace
975	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
976	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
977	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
978	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
979	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EMPTY)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EMPTY)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
980	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EMPTY)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EMPTY)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EMPTY)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
981	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
982	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
983	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
984	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
985	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
986	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
987	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.removeChildToBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.removeChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.removeChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
988	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
989	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	150	1	add
990	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs);	  lhs.addChildToBack(c);    	non-compiled	[CE]  cannot  find  symbol  Lhs	158	None	replace
991	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n);	  lhs.addChildToBack(c);    	compilable	  [FE]  IllegalStateException  	158	2	replace
992	[BUG]  [BUGGY]  lhs.addChildToBack(n);  [FE]  IllegalStateException  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n);	  lhs.addChildToBack(c);    	compilable	  [FE]  IllegalStateException  	158	2	replace
993	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs);  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs);	  lhs.addChildToBack(c);    	non-compiled	[CE]  cannot  find  symbol  Lhs	158	None	replace
994	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  c  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	203	None	add
995	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getLastChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  c  =  lhs.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	203	None	add
996	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  lhs  =  lhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  lhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  lhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	203	None	add
997	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  x  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	                Node    c    =    lhs.getFirstChild();    Node  x  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	203	1	add
998	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  x  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  x  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  x  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	203	1	add
999	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	                Node    c    =    lhs.getFirstChild();    c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	203	1	add
1000	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  c  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	203	1	add
1001	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  rhs.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  c  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	203	None	add
1002	[BUG]  [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getFirstChild());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  lhs.getFirstChild();  Node  c  =  lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    lhs.getFirstChild();    Node  c  =  lhs.getFirstChild());	  	non-compiled	[CE]  ';'  expected	203	None	add
1003	[BUG]  [BUGGY]  Node  assign  =  lhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  assign  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  assign  =  lhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1004	[BUG]  [BUGGY]  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  assign  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1005	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());  Node  assign  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1006	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());  Node  assign  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1007	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  assign  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1008	[BUG]  [BUGGY]  var  x=3!=  lhs.detachFromParent());  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  lhs.detachFromParent());	  var    x=3    	non-compiled	[CE]  ';'  expected	12	None	replace
1009	[BUG]  [BUGGY]  var  x=2!=  lhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=2!=  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=2!=  lhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1010	[BUG]  [BUGGY]  var  x=3  >>  lhs.detachFromParent());  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >>  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >>  lhs.detachFromParent());	  var    x=3    	non-compiled	[CE]  ';'  expected	12	None	replace
1011	[BUG]  [BUGGY]  var  x=3!=  rhs.detachFromParent());  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  rhs.detachFromParent());	  var    x=3    	non-compiled	[CE]  ';'  expected	12	None	replace
1012	[BUG]  [BUGGY]  var  x=3  ==  lhs.detachFromParent());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  ==  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  ==  lhs.detachFromParent());	  var    x=3    	non-compiled	[CE]  ';'  expected	12	None	replace
1013	[BUG]  [BUGGY]  var  x=3!=  lhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  lhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1014	[BUG]  [BUGGY]  var  x=3  >=  lhs.detachFromParent());  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >=  lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >=  lhs.detachFromParent());	  var    x=3    	non-compiled	[CE]  ';'  expected	12	None	replace
1015	[BUG]  [BUGGY]  Lhs.addChildToBack(assign.getFirstChild());  [CE]  cannot  find  symbol  Lhs  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign.getFirstChild());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	212	None	replace
1016	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1017	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1018	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1019	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1020	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1021	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  rhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1022	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1023	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1024	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1025	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1026	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1027	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(lhs.detachFromParent());  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1028	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1029	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1030	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1031	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getFirstChild());  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        rhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	36	2	add
1032	[BUG]  [BUGGY]  lhs.addChildToBack(rhs).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs).removeFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs).removeFirstChild();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	272	None	replace
1033	[BUG]  [BUGGY]  n.addChildToBack(lhs).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs).removeFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs).removeFirstChild();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	272	None	replace
1034	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  varNode).removeFirstChild();  [CE]  cannot  find  symbol  varNode  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  varNode).removeFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  varNode).removeFirstChild();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  varNode	272	None	replace
1035	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs,  varNode).removeFirstChild();  [CE]  cannot  find  symbol  varNode  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs,  varNode).removeFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs,  varNode).removeFirstChild();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  varNode	272	None	replace
1036	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	137	None	add
1037	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	137	None	add
1038	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	137	None	add
1039	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	137	None	add
1040	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	137	None	add
1041	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	137	None	add
1042	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	137	None	add
1043	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom	  	non-compiled	[CE]  ')'  expected	137	None	add
1044	[BUG]  [BUGGY]  lhs.addChildToBack(n);  Lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n);  Lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n);  Lhs.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  Lhs	100	None	replace
1045	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  Lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  Lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  Lhs.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  Lhs	100	None	replace
1046	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  var.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);  var.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	100	2	replace
1047	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  var.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  var.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  var.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	100	2	replace
1048	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1049	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1050	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1051	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1052	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1053	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1054	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1055	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1056	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1057	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1058	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1059	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    n.removeChild(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	128	2	add
1060	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getFirstChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    Node  lhs  =  assign.getFirstChild();  lhs.addChildToBack(assign.getFirstChild());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	128	None	add
1061	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getType());  lhs.addChildToBack(rhs.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getType());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(assign.getType());  lhs.addChildToBack(rhs.getFirstChild());	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	128	None	add
1062	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1063	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1064	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1065	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1066	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1067	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.GETPROP  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.GETPROP  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1068	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1069	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()!=  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1070	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.NAME  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1071	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.NAME  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.NAME  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1072	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1073	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1074	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachfromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	154	None	add
1075	[BUG]  [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.traverse(compiler,  lhs,  rhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1076	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assign,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assign,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  assign,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	161	None	replace
1077	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assignment,  collapses);  [CE]  cannot  find  symbol  assignment  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assignment,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  assignment,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  cannot  find  symbol  assignment	161	None	replace
1078	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(assign.getString());    lhs.setString(assign.getString());	  	compilable	  [FE]  UnsupportedOperationException  	267	2	add
1079	[BUG]  [BUGGY]  lhs.setString(assign.getString());  lhs.setString(assign.getString());  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    lhs.setString(assign.getString());	  	compilable	  [FE]  UnsupportedOperationException  	267	2	add
1080	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(assign.getString());    lhs.setString(rhs.getString());	  	compilable	  [FE]  UnsupportedOperationException  	267	2	add
1081	[BUG]  [BUGGY]  lhs.setString(assign.getString());  lhs.setString(rhs.getString());  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    lhs.setString(rhs.getString());	  	compilable	  [FE]  UnsupportedOperationException  	267	2	add
1082	[BUG]  [BUGGY]  lhs.setString(assign.getString());  Node  lhs.setString(assign.getString());  [CE]  ';'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  Node  lhs.setString(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    Node  lhs.setString(assign.getString());	  	non-compiled	[CE]  ';'  expected	267	None	add
1083	[BUG]  [BUGGY]  lhs.setString(assign.getString());  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    NodeTraversal.traverse(compiler,  lhs,  rhs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	267	None	add
1084	[BUG]  [BUGGY]  lhs.setString(assign.getString());  Lhs.setString(assign.getString());  [CE]  cannot  find  symbol  Lhs  [FE]            UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  Lhs.setString(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    Lhs.setString(assign.getString());	  	non-compiled	[CE]  cannot  find  symbol  Lhs	267	None	add
1085	[BUG]  [BUGGY]  lhs.setString(assign.getString());  lhs.setString(Assign.getString());  [CE]  cannot  find  symbol  Assign  [FE]              UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(Assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    lhs.setString(Assign.getString());	  	non-compiled	[CE]  cannot  find  symbol  Assign	267	None	add
1086	[BUG]  [BUGGY]  lhs.setString(assign.getString());  lhs.setString(alloc.getString());  [CE]  cannot  find  symbol  alloc  [FE]                UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString());  lhs.setString(alloc.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());    lhs.setString(alloc.getString());	  	non-compiled	[CE]  cannot  find  symbol  alloc	267	None	add
1087	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1088	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1089	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1090	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1091	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1092	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1093	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()  ==  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()  ==  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1094	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()  ==  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()  ==  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()  ==  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1095	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1096	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1097	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getLastChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.getLastChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1098	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getLastChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(rhs.getLastChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(rhs.getLastChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1099	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1100	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1101	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	add
1102	[BUG]  [BUGGY]  Node  assign  =  assign.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  assign  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  assign  =  assign.getFirstChild();	  lhs.addChildToBack(assign.detachFromParent());    Node    assign    =    assign.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	185	None	replace
1103	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Node  assign  =  assign.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Node  assign  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  Node  assign  =  assign.getFirstChild();	  lhs.addChildToBack(assign.detachFromParent());    Node    assign    =    assign.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	185	None	replace
1104	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  Node  assign  =  assign.getFirstChild();  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  Node  assign  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs);  Node  assign  =  assign.getFirstChild();	  lhs.addChildToBack(assign.detachFromParent());    Node    assign    =    assign.getFirstChild();    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	185	None	replace
1105	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());  Node  assign  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.detachFromParent());    Node    assign    =    assign.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	185	None	replace
1106	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  not  a  statement	215	None	replace
1107	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  not  a  statement	215	None	replace
1108	[BUG]  [BUGGY]  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());    nodesToCollapse.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1109	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());    nodesToCollapse.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1110	[BUG]  [BUGGY]  n.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());    nodesToCollapse.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1111	[BUG]  [BUGGY]  Node  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  nodesToCollapse.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());    nodesToCollapse.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  ';'  expected	113	None	replace
1112	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs);  nodesToCollapse.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());    nodesToCollapse.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	113	None	replace
1113	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	151	2	replace
1114	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	151	2	replace
1115	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	151	2	replace
1116	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()!=  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	151	2	replace
1117	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	151	2	replace
1118	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  &&  rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(rhs.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.EXPR_RESULT)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	151	2	replace
1119	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1120	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1121	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1122	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1123	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1124	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1125	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1126	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1127	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	190	None	add
1128	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1129	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1130	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	190	None	add
1131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1132	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1133	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.getString());	  lhs.addChildToBack(assign,    rhs.getString());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	242	None	replace
1134	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  lhs.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  lhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  lhs.getString());	  lhs.addChildToBack(assign,    rhs.getString());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	242	None	replace
1135	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  c.getString());  [CE]  cannot  find  symbol  c  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  c.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  c.getString());	  lhs.addChildToBack(assign,    rhs.getString());    	non-compiled	[CE]  cannot  find  symbol  c	242	None	replace
1136	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getString(),  c);  [CE]  cannot  find  symbol  c  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.getString(),  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getString(),  c);	  lhs.addChildToBack(assign,    rhs.getString());    	non-compiled	[CE]  cannot  find  symbol  c	242	None	replace
1137	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  rhs,  varNode);	  lhs.addChildAfter(assign,    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	266	None	replace
1138	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs,  nodesToCollapse);  [CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs,  nodesToCollapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  rhs,  nodesToCollapse);	  lhs.addChildAfter(assign,    rhs);    	non-compiled	[CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;	266	None	replace
1139	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(rhs,  assign);	  lhs.addChildAfter(assign,    rhs);    	compilable	  [FE]  IllegalArgumentException  	266	2	replace
1140	[BUG]  [BUGGY]  lhs.addChildAfter(rhs,  assign);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(rhs,  assign);	  lhs.addChildAfter(assign,    rhs);    	compilable	  [FE]  IllegalArgumentException  	266	2	replace
1141	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromRoot());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1142	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromRoot());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1143	[BUG]  [BUGGY]  n.addChildToBack(lhs.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs.detachFromRoot());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1144	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromRoot());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1145	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs.detachFromRoot());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1146	[BUG]  [BUGGY]  n.addChildToBack(assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign,  rhs);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
1147	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  varNode);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	59	None	replace
1148	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
1149	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  nodesToCollapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  nodesToCollapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  nodesToCollapse);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
1150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  this);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  rhs,  this);	  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,CollapseVariableDeclarations)	226	None	replace
1151	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  lhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs);    lhs.removeChild(rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1152	[BUG]  [BUGGY]  lhs.removeChild(rhs);  lhs.removeChild(rhs);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  lhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    lhs.removeChild(rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1153	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  NodeUtil.removeChild(lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs);    NodeUtil.removeChild(lhs,  rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1154	[BUG]  [BUGGY]  lhs.removeChild(rhs);  NodeUtil.removeChild(lhs,  rhs);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  NodeUtil.removeChild(lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    NodeUtil.removeChild(lhs,  rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1155	[BUG]  [BUGGY]  lhs.removeChild(rhs);  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	1	None	add
1156	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  rhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs);    rhs.removeChild(rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1157	[BUG]  [BUGGY]  lhs.removeChild(rhs);  rhs.removeChild(rhs);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  rhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    rhs.removeChild(rhs);	  	compilable	  [FE]  NullPointerException  	1	2	add
1158	[BUG]  [BUGGY]  lhs.removeChild(rhs);  lhs.removeChild(rhs);  parent.replaceChild(n,  assign);  [CE]  cannot  find  symbol  parent  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  lhs.removeChild(rhs);  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    lhs.removeChild(rhs);  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  cannot  find  symbol  parent	1	None	add
1159	[BUG]  [BUGGY]  lhs.removeChild(rhs);  nodesToCollapse.removeChild(rhs);  lhs.removeChild(rhs);  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  nodesToCollapse.removeChild(rhs);  lhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    nodesToCollapse.removeChild(rhs);  lhs.removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
1160	[BUG]  [BUGGY]  lhs.removeChild(rhs);  NodeUtil.removeChild(lhs,  rhs).removeChild(rhs);  [CE]  void  cannot  be  dereferenced  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  NodeUtil.removeChild(lhs,  rhs).removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    NodeUtil.removeChild(lhs,  rhs).removeChild(rhs);	  	non-compiled	[CE]  void  cannot  be  dereferenced	1	None	add
1161	[BUG]  [BUGGY]  lhs.removeChild(rhs);  nodesToCollapse.removeChild(rhs);  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs);  nodesToCollapse.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);    nodesToCollapse.removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
1162	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Lhs.addChildToBack(assign);  [CE]  cannot  find  symbol  Lhs  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  Lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  Lhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);    	non-compiled	[CE]  cannot  find  symbol  Lhs	164	None	replace
1163	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  var.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);  var.addChildToBack(assign);	  lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	164	2	replace
1164	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  var.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  var.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  var.addChildToBack(assign);	  lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	164	2	replace
1165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  rhs);	  lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	164	None	replace
1166	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachfromParent());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachfromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachfromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachfromParent());    }    	non-compiled	[CE]  cannot  find  symbol	275	None	replace
1167	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1168	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1169	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1170	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1172	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1173	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1174	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1175	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1176	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1177	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1178	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
1179	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1180	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1181	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1182	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1183	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1184	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1185	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1186	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1187	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1188	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1189	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(rhs.getString());	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	41	None	add
1190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1191	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1192	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1193	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	41	2	add
1194	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
1195	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
1196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1197	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1198	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1199	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1200	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1201	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1202	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1203	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1204	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(rhs.getFirstChild());  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(rhs.getFirstChild());  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1205	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(rhs.getFirstChild());  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(rhs.getFirstChild());  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(rhs.getFirstChild());  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1206	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1207	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1208	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1209	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1210	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1211	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	243	2	add
1212	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	82	2	replace
1213	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	82	2	replace
1214	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1215	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1216	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1217	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1218	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1219	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1220	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [CE]  cannot  find  symbol  CAR  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	non-compiled	[CE]  cannot  find  symbol  CAR	211	None	add
1221	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1222	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
1223	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()!=  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()!=  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	211	2	add
1224	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()!=  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()!=  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()!=  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	211	2	add
1225	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  If(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  If(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    If(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	non-compiled	[CE]  ';'  expected	211	None	add
1226	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  lhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    lhs    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	31	None	replace
1227	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  rhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  rhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  Node  rhs  =  rhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    lhs    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	31	None	replace
1228	[BUG]  [BUGGY]  Node  lhs  =  lhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  lhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  lhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    lhs    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	31	None	replace
1229	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());  Node  lhs  =  rhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    lhs    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	31	None	replace
1230	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  var);	  lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
1231	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  parent);  [CE]  cannot  find  symbol  parent  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  parent);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  parent);	  lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
1232	[BUG]  [BUGGY]  lhs.addChildToBack(n,  assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n,  assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  assign,  rhs);	  lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
1233	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  lhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(assign,    rhs);    lhs.addChildAfter(assign,  rhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1234	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  lhs.addChildAfter(assign,  rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  lhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    lhs.addChildAfter(assign,  rhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1235	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  lhs.addChildAfter(assign,  rhs);  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  lhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    Node  lhs.addChildAfter(assign,  rhs);	  	non-compiled	[CE]  ';'  expected	265	None	add
1236	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    NodeTraversal.traverse(compiler,  lhs,  rhs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	265	None	add
1237	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  Lhs.addChildAfter(assign,  rhs);  [CE]  cannot  find  symbol  Lhs  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  Lhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    Lhs.addChildAfter(assign,  rhs);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	265	None	add
1238	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(assign,    rhs);    rhs.addChildAfter(assign,  rhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1239	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  rhs);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    rhs.addChildAfter(assign,  rhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1240	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  rhs  =  assign.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  rhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    Node  rhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	265	None	add
1241	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(assign,    rhs);    rhs.addChildAfter(assign,  lhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1242	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  lhs);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  rhs.addChildAfter(assign,  lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    rhs.addChildAfter(assign,  lhs);	  	compilable	  [FE]  IllegalArgumentException  	265	2	add
1243	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  c);  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs,  c);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  c	95	None	replace
1244	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  c,  rhs);  [CE]  cannot  find  symbol  c  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  c,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  c,  rhs);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  c	95	None	replace
1245	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  b);  [CE]  cannot  find  symbol  b  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  b);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs,  b);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  b	95	None	replace
1246	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  var,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  var,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  var,  rhs);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
1247	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs,  varNode);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	95	None	replace
1248	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	149	2	replace
1249	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  }	  if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	149	2	replace
1250	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1251	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1252	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1253	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	135	None	add
1254	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1255	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1256	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	135	None	add
1257	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	135	None	add
1258	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1259	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1260	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1261	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1262	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1263	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1264	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1265	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1266	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1267	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1268	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.BLOCK)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.BLOCK)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1269	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.BLOCK)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.BLOCK)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.BLOCK)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1270	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
1271	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1272	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	111	2	add
1273	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	214	1	replace
1274	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	214	1	replace
1275	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.detachFromParent();  lhs.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  IllegalStateException  	38	2	replace
1276	[BUG]  [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  lhs.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  IllegalStateException  	38	2	replace
1277	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(lhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	2	replace
1278	[BUG]  [BUGGY]  n.addChildToBack(lhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	2	replace
1279	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	1	replace
1280	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	1	replace
1281	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	2	replace
1282	[BUG]  [BUGGY]  n.addChildToBack(rhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	38	2	replace
1283	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1284	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1285	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  rhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.removeFirstChild());    rhs.addChildToBack(assign.removeFirstChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1286	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  rhs.addChildToBack(assign.removeFirstChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  rhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    rhs.addChildToBack(assign.removeFirstChild());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1287	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());  assign.detachFromParent();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1288	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  assign.detachFromParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  assign.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());  assign.detachFromParent();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	169	1	add
1289	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  nodesToCollapse.detachFromParent();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  nodesToCollapse.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());  nodesToCollapse.detachFromParent();	  	non-compiled	[CE]  cannot  find  symbol	169	None	add
1290	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeLastChild());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	169	None	add
1291	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  parent.replaceChild(n,  assign);  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  parent.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());  parent.replaceChild(n,  assign);	  	non-compiled	[CE]  cannot  find  symbol  parent	169	None	add
1292	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  parent.detachFromParent();  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  lhs.addChildToBack(assign.removeFirstChild());  parent.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    lhs.addChildToBack(assign.removeFirstChild());  parent.detachFromParent();	  	non-compiled	[CE]  cannot  find  symbol  parent	169	None	add
1293	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1294	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1295	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1296	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1297	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1298	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1299	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  n.detachFromParent());  lhs.addChildToBack(rhs);  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  n.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    n.detachFromParent());  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  ';'  expected	281	None	add
1300	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
1301	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
1302	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
1303	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1304	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs);    lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	281	2	add
1305	[BUG]  [BUGGY]  lhs.removeChild(assign.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign.getString());	  lhs.removeChild(rhs.getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1306	[BUG]  [BUGGY]  lhs.removeChild(rhs.getString(),  assign);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getString(),  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getString(),  assign);	  lhs.removeChild(rhs.getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1307	[BUG]  [BUGGY]  lhs.removeChild(rhs.getString(),  b);  [CE]  cannot  find  symbol  b  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(rhs.getString(),  b);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getString(),  b);	  lhs.removeChild(rhs.getString());    	non-compiled	[CE]  cannot  find  symbol  b	94	None	replace
1308	[BUG]  [BUGGY]  lhs.removeChild(assign,  rhs.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign,  rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign,  rhs.getString());	  lhs.removeChild(rhs.getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1309	[BUG]  [BUGGY]  Lhs.addChildToBack(a,  rhs.detachFromParent());  [CE]  cannot  find  symbol  a  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(a,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(a,  rhs.detachFromParent());	  Lhs.addChildToBack(lhs,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  a	91	None	replace
1310	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs,  assign.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs,  assign.detachFromParent());	  Lhs.addChildToBack(lhs,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	91	None	replace
1311	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs,  n.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs,  n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs,  n.detachFromParent());	  Lhs.addChildToBack(lhs,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	91	None	replace
1312	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs,  rhs.getLastChild());  [CE]  cannot  find  symbol  Lhs  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs,  rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs,  rhs.getLastChild());	  Lhs.addChildToBack(lhs,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	91	None	replace
1313	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs,  c.detachFromParent());  [CE]  cannot  find  symbol  c  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs,  c.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs,  c.detachFromParent());	  Lhs.addChildToBack(lhs,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	91	None	replace
1314	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  collapse);  [CE]  cannot  find  symbol  b  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  collapse);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    collapse);    	non-compiled	[CE]  cannot  find  symbol  b	165	None	replace
1315	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode,  collapse);  [CE]  cannot  find  symbol  varNode  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode,  collapse);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    collapse);    	non-compiled	[CE]  cannot  find  symbol  varNode	165	None	replace
1316	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent(),  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent(),  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.detachFromParent(),  collapse);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    collapse);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	165	None	replace
1317	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse,  c);  [CE]  cannot  find  symbol  c  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse,  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse,  c);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    collapse);    	non-compiled	[CE]  cannot  find  symbol  c	165	None	replace
1318	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  collapse);  [CE]  cannot  find  symbol  c  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  c,  collapse);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    collapse);    	non-compiled	[CE]  cannot  find  symbol  c	165	None	replace
1319	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1320	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1321	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1322	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1323	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1324	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	55	2	replace
1325	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	55	2	replace
1326	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	55	2	replace
1327	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	55	2	replace
1328	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	55	2	replace
1329	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	55	2	replace
1330	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	55	2	replace
1331	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(rhs.getString());	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1332	[BUG]  [BUGGY]  lhs.setString(rhs.getString());  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(rhs.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(rhs.getString());	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1333	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString()  + ": ");  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(assign.getString()  + ": ");	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1334	[BUG]  [BUGGY]  lhs.setString(assign.getString()  + ": ");  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString()  + ": ");  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString()  + ": ");	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1335	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString()  + "n ");  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(assign.getString()  + "n ");	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1336	[BUG]  [BUGGY]  lhs.setString(assign.getString()  + "n ");  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.setString(assign.getString()  + "n ");  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString()  + "n ");	  lhs.setString(assign.getString());    	compilable	  [FE]  UnsupportedOperationException  	268	2	replace
1337	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1338	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1339	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  rhs.addChildToBack(lhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    rhs.addChildToBack(lhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1340	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  rhs.addChildToBack(lhs);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  rhs.addChildToBack(lhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    rhs.addChildToBack(lhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1341	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.replaceChild(rhs);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.replaceChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.replaceChild(rhs);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	105	None	add
1342	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  Lhs.addChildToBack(rhs);  n.removeChild(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  Lhs.addChildToBack(rhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    Lhs.addChildToBack(rhs);  n.removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	105	None	add
1343	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  redeclaration  =  true;  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(rhs);  redeclaration  =  true;	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1344	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  redeclaration  =  true;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(rhs);  redeclaration  =  true;  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(rhs);  redeclaration  =  true;	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1345	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  n.removeChild(rhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    n.removeChild(rhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1346	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  n.removeChild(rhs);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  n.removeChild(rhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    n.removeChild(rhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1347	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  t.removeChild(rhs);  [CE]  cannot  find  symbol  t  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  t.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  t.removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol  t	105	None	add
1348	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1;var    c    }    Result:    function    f(a)    {    var    b=1    	non-compiled	[CE]  ';'  expected	277	None	replace
1349	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1!=  var.addChildToBack(lhs.detachFromParent());  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1!=  var.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1!=  var.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1;var    c    }    Result:    function    f(a)    {    var    b=1    	non-compiled	[CE]  ';'  expected	277	None	replace
1350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapsed);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  collapsed);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  collapsed	163	None	replace
1351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  redeclaration);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  redeclaration);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  redeclaration);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	163	None	replace
1352	[BUG]  [BUGGY]  nodesToCollapse.traverse(compiler,  rhs,  assign);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.traverse(compiler,  rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.traverse(compiler,  rhs,  assign);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1353	[BUG]  [BUGGY]  nodesToCollapse.traverse(compiler,  rhs,  assignment);  [CE]  cannot  find  symbol  assignment  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.traverse(compiler,  rhs,  assignment);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.traverse(compiler,  rhs,  assignment);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  assignment	163	None	replace
1354	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1355	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1356	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1357	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1358	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1359	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1360	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1361	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1362	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1363	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1364	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1365	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1366	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1367	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1368	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1369	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
1370	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1371	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1372	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1373	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1374	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1375	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1376	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1377	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1378	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1379	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1380	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1381	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1382	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1383	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1384	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1385	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	245	2	add
1386	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1387	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1388	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1389	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1390	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1391	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1392	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1393	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1394	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1395	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1396	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1397	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1398	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1399	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalStateException  	32	2	add
1400	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [CE]  ';'  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(n.detachFromParent());    n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	non-compiled	[CE]  ';'  expected	32	None	add
1401	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	179	1	add
1402	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	179	1	add
1403	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	179	None	add
1404	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	179	None	add
1405	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	179	None	add
1406	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	179	None	add
1407	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	179	None	add
1408	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	179	None	add
1409	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	179	None	add
1410	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.removeChild(lhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	174	2	replace
1411	[BUG]  [BUGGY]  n.removeChild(lhs.getLastChild());  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(lhs.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());    	compilable	  [FE]  NullPointerException  	174	2	replace
1412	[BUG]  [BUGGY]  Node  rhs  =  assign.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  assign.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  assign.getLastChild();	  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	174	None	replace
1413	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1414	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1415	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1416	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1417	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	258	2	add
1418	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	258	2	add
1419	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	258	None	add
1420	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1421	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1422	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  assign.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	258	None	add
1423	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1424	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	258	2	add
1425	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	258	None	add
1426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapse);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collapse)  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  rhs,  collapse);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collapse)	56	None	replace
1427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assign);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  assign);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	56	None	replace
1428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapsed);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  rhs,  collapsed);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  collapsed	56	None	replace
1429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assignment);  [CE]  cannot  find  symbol  assignment  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  assignment);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  assignment);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  cannot  find  symbol  assignment	56	None	replace
1430	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  IllegalStateException  	183	2	replace
1431	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  IllegalStateException  	183	2	replace
1432	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	183	2	replace
1433	[BUG]  [BUGGY]  n.addChildToBack(assign.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	183	2	replace
1434	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  IllegalStateException  	183	2	replace
1435	[BUG]  [BUGGY]  n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());    	compilable	  [FE]  IllegalStateException  	183	2	replace
1436	[BUG]  [BUGGY]  nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.add(lhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	74	None	replace
1437	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  var  =  lhs.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  applyCollapses()  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  var  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());  Node  var  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  var  is  already  defined  in  method  applyCollapses()	74	None	replace
1438	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  Lhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs.getFirstChild());	  lhs.addChildToBack(a.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  Lhs	47	None	replace
1439	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1440	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1441	[BUG]  [BUGGY]  n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1442	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1443	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getName());  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getName());  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getName());  lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1444	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent(),  c);  [CE]  cannot  find  symbol  c  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent(),  c);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.detachFromParent(),  c);	  lhs.addChildToBack(rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
1445	[BUG]  [BUGGY]  Lhs.addChildToBack(assign,  rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign,  rhs.detachFromParent());	  lhs.addChildToBack(rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	51	None	replace
1446	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  c,  assign.detachFromParent());  [CE]  cannot  find  symbol  c  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  c,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  c,  assign.detachFromParent());	  lhs.addChildToBack(rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
1447	[BUG]  [BUGGY]  lhs.addChildToBack(n,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  rhs.detachFromParent());	  lhs.addChildToBack(rhs,    assign.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
1448	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	85	None	add
1449	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	85	None	add
1450	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	85	None	add
1451	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	85	None	add
1452	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	85	None	add
1453	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	85	1	add
1454	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	85	1	add
1455	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	85	None	add
1456	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	85	None	add
1457	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1458	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1459	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  rhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);  rhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
1460	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1461	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1462	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(n);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(n);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1463	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(n);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(n);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(n);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1464	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  Lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  Lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    Lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	98	None	add
1465	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  rhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  rhs.addChildIntoBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  rhs.addChildIntoBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
1466	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1467	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1468	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1469	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1470	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1471	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1472	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1473	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1474	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1475	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1476	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1477	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
1478	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	247	None	add
1479	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.addChildToBack(assign.getLastChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	247	None	add
1480	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1481	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1482	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1483	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1484	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1485	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1486	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1487	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1488	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1489	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1490	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.STRING)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.STRING)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1491	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.STRING)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.STRING)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.STRING)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1492	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1493	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1494	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1495	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	256	2	add
1496	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1497	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1498	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	119	2	replace
1499	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	119	2	replace
1500	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1501	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1502	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1503	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1504	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1505	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1506	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1507	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	119	2	replace
1508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  n,  lhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	60	None	replace
1509	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs,  varNode);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	102	None	replace
1510	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1511	[BUG]  [BUGGY]  n.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1512	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1513	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1514	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1515	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1516	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1517	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1518	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1519	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1520	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1521	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1522	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1523	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1524	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1525	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1526	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1527	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	65	2	add
1528	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	262	2	replace
1529	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	262	2	replace
1530	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  IllegalStateException  	262	2	replace
1531	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign);  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  IllegalStateException  	262	2	replace
1532	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(lhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	37	2	replace
1533	[BUG]  [BUGGY]  rhs.addChildToBack(lhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(lhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	37	2	replace
1534	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	rhs.addChildToBack(n.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	37	2	replace
1535	[BUG]  [BUGGY]  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  rhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	rhs.addChildToBack(n.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	37	2	replace
1536	[BUG]  [BUGGY]  lhs.removeChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(rhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.removeChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
1537	[BUG]  [BUGGY]  Lhs.removeChildToBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.removeChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	276	None	replace
1538	[BUG]  [BUGGY]  n.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign.detachFromRoot());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1539	[BUG]  [BUGGY]  Lhs.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign.detachFromRoot());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1540	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromRoot());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1541	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getNext());	  lhs.addChildToBack(a.getNext());    	compilable	  [FE]  NullPointerException  	278	2	replace
1542	[BUG]  [BUGGY]  lhs.addChildToBack(n.getNext());  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getNext());	  lhs.addChildToBack(a.getNext());    	compilable	  [FE]  NullPointerException  	278	2	replace
1543	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs.getNext());  [CE]  cannot  find  symbol  Lhs  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs.getNext());	  lhs.addChildToBack(a.getNext());    	non-compiled	[CE]  cannot  find  symbol  Lhs	278	None	replace
1544	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1545	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1546	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1547	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1548	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1549	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1550	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1551	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1552	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1553	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1554	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1555	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1556	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1557	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1558	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  rhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  rhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1559	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  rhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.addChildToBack(lhs.getFirstChild());  rhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.addChildToBack(lhs.getFirstChild());  rhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1560	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  var  x=3  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    var  x=3	  	non-compiled	[CE]  ';'  expected	43	None	add
1561	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  foo(x);var  x=3  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	43	None	add
1562	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1563	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  rhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1564	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Foo(x);var  x=3  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	43	None	add
1565	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1566	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1567	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  .foo(x);var  x=3  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  .foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    .foo(x);var  x=3	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
1568	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1569	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1570	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1571	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1572	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1573	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1574	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1575	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1576	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1577	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1578	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1579	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1580	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1581	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1582	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1583	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	225	2	add
1584	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1585	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1586	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  rhs.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());    rhs.addChildToBack(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1587	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  rhs.addChildToBack(assign.cloneTree());  [FE]  IllegalStateException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  rhs.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    rhs.addChildToBack(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1588	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(assign.cloneTree());  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(assign.cloneTree());	  	non-compiled	[CE]  cannot  find  symbol	197	None	add
1589	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(rhs.cloneTree());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(rhs.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.addChildToBack(rhs.cloneTree());	  	non-compiled	[CE]  cannot  find  symbol	197	None	add
1590	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  assign.cloneTree();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  assign.cloneTree();	  	compilable	  [FE]  IllegalStateException  	197	2	add
1591	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  assign.cloneTree();  [FE]  IllegalStateException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  assign.cloneTree();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  assign.cloneTree();	  	compilable	  [FE]  IllegalStateException  	197	2	add
1592	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  Lhs.addChildToBack(assign.cloneTree());  [CE]  cannot  find  symbol  Lhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  Lhs.addChildToBack(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    Lhs.addChildToBack(assign.cloneTree());	  	non-compiled	[CE]  cannot  find  symbol  Lhs	197	None	add
1593	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;	  	compilable	  [FE]  IllegalStateException  	197	2	add
1594	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  [FE]  IllegalStateException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;	  	compilable	  [FE]  IllegalStateException  	197	2	add
1595	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1596	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1597	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1598	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1599	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1600	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1601	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1602	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1603	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1604	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1605	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1606	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1607	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1608	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(lhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1609	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1610	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
1611	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.RETURN)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.RETURN)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.removeFirstChild());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	261	2	replace
1612	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.RETURN)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.removeFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.RETURN)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.RETURN)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.removeFirstChild());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	261	2	replace
1613	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1614	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1615	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1616	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1617	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1618	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1619	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1620	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1621	[BUG]  [BUGGY]  var  x=3  ==  ';'  expected  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  ==  ';'  expected  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  ==  ';'  expected	  Foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	20	None	replace
1622	[BUG]  [BUGGY]  var  x=3  >=  ';'  expected  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >=  ';'  expected  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >=  ';'  expected	  Foo(x);var    x=3    	non-compiled	[CE]  ';'  expected	20	None	replace
1623	[BUG]  [BUGGY]  lhs.addChildToBack(rhs).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs).detachFromParent();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	206	None	replace
1624	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  varNode).detachFromParent();  [CE]  cannot  find  symbol  varNode  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs,  varNode).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  varNode).detachFromParent();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).detachFromParent();    	non-compiled	[CE]  cannot  find  symbol  varNode	206	None	replace
1625	[BUG]  [BUGGY]  n.addChildToBack(lhs).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs).detachFromParent();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	206	None	replace
1626	[BUG]  [BUGGY]  n.addChildToBack(lhs);  rhs.addChildToBack(lhs).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(lhs);  rhs.addChildToBack(lhs).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(lhs);  rhs.addChildToBack(lhs).detachFromParent();	  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	206	None	replace
1627	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1628	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1629	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1630	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1631	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1632	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	217	None	add
1633	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(	  	non-compiled	[CE]  ')'  expected	217	None	add
1634	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VOID)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFrom	  	non-compiled	[CE]  ')'  expected	217	None	add
1635	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1636	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1637	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.removeLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.removeLastChild());	  	non-compiled	[CE]  cannot  find  symbol	209	None	add
1638	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	209	2	add
1639	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	209	2	add
1640	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1641	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1642	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1643	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1644	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  rhs.addChildToBack(lhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    rhs.addChildToBack(lhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1645	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  rhs.addChildToBack(lhs.removeFirstChild());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  rhs.addChildToBack(lhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    rhs.addChildToBack(lhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1646	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    Node  rhs  =  lhs.getLastChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	209	None	add
1647	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(lhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    Lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	187	None	replace
1648	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(rhs.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    Lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	187	None	replace
1649	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(n.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.detachFromParent());  Lhs.addChildToBack(n.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    Lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	187	None	replace
1650	[BUG]  [BUGGY]  n.detachFromParent();  Lhs.addChildToBack(n.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.detachFromParent();  Lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.detachFromParent();  Lhs.addChildToBack(n.detachFromParent());	  lhs.addChildToBack(n.detachFromParent());    Lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	187	None	replace
1651	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1652	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1653	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1654	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1655	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1656	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1657	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());	  	non-compiled	[CE]  ';'  expected	34	None	add
1658	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());  lhs.addChildToBack(rhs.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
1659	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
1660	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1661	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	34	2	add
1662	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(n.detachFromPrefix());  lhs.addChildToBack(rhs.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
1663	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1664	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1665	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1666	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1667	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1668	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1669	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1670	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1671	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1672	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1673	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1674	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1675	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1676	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1677	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1678	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	124	2	add
1679	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1680	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1681	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1682	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1683	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1684	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1685	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1686	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    rhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1687	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.removeChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	175	None	add
1688	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getLastChild());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    Node  lhs  =  assign.getFirstChild();  rhs.addChildToBack(assign.getLastChild());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	175	None	add
1689	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1690	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  rhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1691	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  rhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1692	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(n.getFirstChild());  rhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        rhs.addChildToBack(assign.getLastChild());    lhs.addChildToBack(n.getFirstChild());  rhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	175	2	add
1693	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede	  	non-compiled	[CE]  ';'  expected	120	None	add
1694	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	add
1695	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
1696	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
1697	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  red  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  red  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  red	  	non-compiled	[CE]  ';'  expected	120	None	add
1698	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration	  	non-compiled	[CE]  ';'  expected	120	None	add
1699	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [CE]  ';'  expected  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(rhs.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede	  	non-compiled	[CE]  ';'  expected	120	None	add
1700	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [CE]  ';'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(rhs.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede	  	non-compiled	[CE]  ';'  expected	120	None	add
1701	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true  [CE]  ';'  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true	  	non-compiled	[CE]  ';'  expected	120	None	add
1702	[BUG]  [BUGGY]  lhs.addChildIntoBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildIntoBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildIntoBack(rhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildIntoBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol	274	None	replace
1703	[BUG]  [BUGGY]  Lhs.addChildIntoBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildIntoBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildIntoBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildIntoBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	274	None	replace
1704	[BUG]  [BUGGY]  Lhs.addChildIntoBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildIntoBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildIntoBack(rhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildIntoBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	274	None	replace
1705	[BUG]  [BUGGY]  Lhs.addChildIntoBack(lhs,  rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildIntoBack(lhs,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildIntoBack(lhs,  rhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildIntoBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	274	None	replace
1706	[BUG]  [BUGGY]  LHs.addChildIntoBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  LHs  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  LHs.addChildIntoBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	LHs.addChildIntoBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildIntoBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  LHs	274	None	replace
1707	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1708	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1709	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1710	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1711	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1712	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1713	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1714	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1715	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1716	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1717	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1718	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1719	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1720	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(n.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1721	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1722	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
1723	[BUG]  [BUGGY]  lhs.detachChild(rhs);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachChild(rhs);	  lhs.detachFromParent();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1724	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachChildren();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.detachChildren();	  lhs.detachFromParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	4	2	replace
1725	[BUG]  [BUGGY]  lhs.detachChildren();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachChildren();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachChildren();	  lhs.detachFromParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	4	2	replace
1726	[BUG]  [BUGGY]  lhs.detachChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachChildToBack(rhs);	  lhs.detachFromParent();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1727	[BUG]  [BUGGY]  lhs.detachChildAfter(rhs);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachChildAfter(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachChildAfter(rhs);	  lhs.detachFromParent();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1728	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c=1  >>  var.addChildToBack(lhs.detachFromParent());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c=1  >>  var.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1;var  c=1  >>  var.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1;var    c    }    Result:    function    f(a)    {    var    b=1    	non-compiled	[CE]  ';'  expected	277	None	replace
1729	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c=1!=  var.addChildToBack(lhs.detachFromParent());  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c=1!=  var.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1;var  c=1!=  var.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1;var    c    }    Result:    function    f(a)    {    var    b=1    	non-compiled	[CE]  ';'  expected	277	None	replace
1730	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c!=  Result:  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1;var  c!=  Result:  function  f(a)  {  var  b=1  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1;var  c!=  Result:  function  f(a)  {  var  b=1  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1;var    c    }    Result:    function    f(a)    {    var    b=1    	non-compiled	[CE]  ';'  expected	277	None	replace
1731	[BUG]  [BUGGY]  lhs.removeChildToBack(assign.getLastChild());  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChildToBack(assign.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
1732	[BUG]  [BUGGY]  Lhs.addChildToBack(assign.detachFromNext());  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign.detachFromNext());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
1733	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromNext());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromNext());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
1734	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1735	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(lhs);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1736	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(assign);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1737	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(assign);  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1738	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.detachFromParent();  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1739	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.detachFromParent();  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	98	2	add
1740	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(false);  rhs.addChildToBack(false);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);  lhs.addChildToBack(false);  rhs.addChildToBack(false);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(rhs);    lhs.addChildToBack(false);  rhs.addChildToBack(false);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	98	None	add
1741	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  SETPROP  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.SETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	154	None	add
1742	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETELEM)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETELEM)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1743	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETELEM)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETELEM)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETELEM)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1744	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	154	None	add
1745	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.removeFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1746	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.removeFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.removeFirstChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	154	1	add
1747	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.removeChildToBack(rhs.removeFirstChild());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.removeChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.removeChildToBack(rhs.removeFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	209	None	add
1748	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1749	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	209	2	add
1750	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  nodesToCollapse.add(rhs);  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.detachFromParent();    nodesToCollapse.add(rhs);  lhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
1751	[BUG]  [BUGGY]  lhs.detachFromParent();  nodesToCollapse.add(rhs);  lhs.detachFromParent();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  nodesToCollapse.add(rhs);  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    nodesToCollapse.add(rhs);  lhs.detachFromParent();	  	compilable	  [FE]  IllegalStateException  	3	2	add
1752	[BUG]  [BUGGY]  lhs.detachFromParent();  Lhs.detachFromParent();  [CE]  cannot  find  symbol  Lhs  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.detachFromParent();  Lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();    Lhs.detachFromParent();	  	non-compiled	[CE]  cannot  find  symbol  Lhs	3	None	add
1753	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	213	None	add
1754	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	213	None	add
1755	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	213	None	add
1756	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	213	None	add
1757	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1758	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1759	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1760	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1761	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1762	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1763	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1764	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1765	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1766	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.removeFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	223	2	add
1767	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromPrefix());  lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromPrefix());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromPrefix());  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
1768	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalArgumentException  	107	2	add
1769	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalArgumentException  	107	2	add
1770	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  Lhs.addChildToBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  Lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    Lhs.addChildToBack(lhs.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol  Lhs	89	None	add
1771	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	89	None	add
1772	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede	  	non-compiled	[CE]  ';'  expected	120	None	add
1773	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	120	None	add
1774	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	add
1775	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    lhs.addChildToBack(assign.detachFromParent());  if(lhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  rede	  	non-compiled	[CE]  ';'  expected	120	None	add
1776	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  rhs  =  n.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  rhs  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  rhs  =  n.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	43	None	add
1777	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	43	None	add
1778	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  rhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1779	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Node  c  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Node  c  =  rhs.getNext();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	43	1	add
1780	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	282	2	replace
1781	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	282	2	replace
1782	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalStateException  	282	2	replace
1783	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalStateException  	282	2	replace
1784	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	282	2	replace
1785	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	282	2	replace
1786	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  NodeTraversal.traverse(compiler,  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  }  else  {  NodeTraversal.traverse(compiler,	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);    	non-compiled	[CE]  ')'  expected	282	None	replace
1787	[BUG]  [BUGGY]  LHs.addChildToBack(assign.getFirstChild());  [CE]  cannot  find  symbol  LHs  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  LHs.addChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	LHs.addChildToBack(assign.getFirstChild());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	non-compiled	[CE]  cannot  find  symbol  LHs	212	None	replace
1788	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(rhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Preconditions.checkState(rhs.getType()  ==  Token.VAR);	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	compilable	  [FE]  IllegalStateException  	212	2	replace
1789	[BUG]  [BUGGY]  Preconditions.checkState(rhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Preconditions.checkState(rhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Preconditions.checkState(rhs.getType()  ==  Token.VAR);	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    	compilable	  [FE]  IllegalStateException  	212	2	replace
1790	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	74	None	replace
1791	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                      NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs.getFirstChild());    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	74	None	replace
1792	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionF  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionF  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1!=  junit.framework.AssertionF	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  ';'  expected	215	None	replace
1793	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionF  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionF  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionF	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  ';'  expected	215	None	replace
1794	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  ';'  expected	215	None	replace
1795	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionF  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionF  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  ==  junit.framework.AssertionF	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    	non-compiled	[CE]  ';'  expected	215	None	replace
1796	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
1797	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	255	None	replace
1798	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	255	None	replace
1799	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
1800	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detach  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detach  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detach	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	255	None	replace
1801	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
1802	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	255	None	replace
1803	[BUG]  [BUGGY]  var  x=1!=  rhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=1!=  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=1!=  rhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1804	[BUG]  [BUGGY]  var  x=3!=  rhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3!=  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3!=  rhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1805	[BUG]  [BUGGY]  var  x=3  >>  rhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=3  >>  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3  >>  rhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1806	[BUG]  [BUGGY]  var  x=2!=  rhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=2!=  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=2!=  rhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1807	[BUG]  [BUGGY]  var  x=0!=  rhs.detachFromParent();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  var  x=0!=  rhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=0!=  rhs.detachFromParent();	  var    x=3    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1808	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(lhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(lhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1809	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(lhs);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(lhs);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(lhs);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1810	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(n);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(n);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1811	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(n);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(n);  n.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(n);  n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1812	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  Node  lhs  =  n.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  Node  lhs  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    Node  lhs  =  n.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	105	None	add
1813	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(assign);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1814	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(assign);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  n.removeChild(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  n.removeChild(assign);	  	compilable	  [FE]  IllegalArgumentException  	105	2	add
1815	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  m.removeChild(rhs);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    n.removeChild(rhs);  lhs.addChildToBack(rhs);  m.removeChild(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        n.removeChild(rhs);    lhs.addChildToBack(rhs);  m.removeChild(rhs);	  	non-compiled	[CE]  cannot  find  symbol  m	105	None	add
1816	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1817	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	201	2	add
1818	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.replaceChild(rhs.getLastChild());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  lhs.replaceChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());  lhs.replaceChild(rhs.getLastChild());	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	201	None	add
1819	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    NodeTraversal.traverse(compiler,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	197	None	add
1820	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	197	None	add
1821	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.add(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());    nodesToCollapse.add(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1822	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.add(assign.cloneTree());  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  nodesToCollapse.add(assign.cloneTree());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    nodesToCollapse.add(assign.cloneTree());	  	compilable	  [FE]  IllegalStateException  	197	2	add
1823	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.cloneTree());  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());    NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	197	None	add
1824	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	256	2	add
1825	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	256	2	add
1826	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	256	None	add
1827	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	256	None	add
1828	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1829	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1830	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	256	None	add
1831	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	256	None	add
1832	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1833	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1834	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1835	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.NAME)    {    lhs.addChildToBack(assign.detachFromParent());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	256	2	add
1836	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1837	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.removeFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	190	2	add
1838	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1839	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1840	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  var.addChildToBack  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  var.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  var.addChildToBack	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	non-compiled	[CE]  ';'  expected	123	None	replace
1841	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1842	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1843	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1844	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	123	2	replace
1845	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
1846	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
1847	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
1848	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	33	2	replace
1849	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
1850	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	33	2	replace
1851	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChildToBack  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  }  else  {  var.addChildToBack	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  ';'  expected	33	None	replace
1852	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1853	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1854	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1855	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  compiler.reportCodeChange();  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1856	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1857	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1858	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1859	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	compilable	  [FE]  IllegalArgumentException  	102	2	replace
1860	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  collapse();  }  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  collapse();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  collapse();  }	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1861	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  }  else  {  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
1862	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs	  	non-compiled	[CE]  ';'  expected	75	None	add
1863	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
1864	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionF	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    b    	non-compiled	[CE]  ';'  expected	219	None	replace
1865	[BUG]  [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedEr  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedEr  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Object  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  junit.framework.AssertionFailedEr	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    var    b    	non-compiled	[CE]  ';'  expected	219	None	replace
1866	[BUG]  [BUGGY]  LHs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  LHs  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  LHs.addChildToBack(rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	LHs.addChildToBack(rhs.detachFromParent());	  if(lhs.getType()    ==    Token.FUNCTION    ||    rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  LHs	155	None	replace
1867	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	162	None	replace
1868	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapsed);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapsed);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  collapsed	162	None	replace
1869	[BUG]  [BUGGY]  nodesToCollapse  =  compiler.traverse(compiler,  lhs,  rhs);  [CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse  =  compiler.traverse(compiler,  lhs,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse  =  compiler.traverse(compiler,  lhs,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    collapsed);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse	162	None	replace
1870	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getfirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  Node  c  =  rhs.getfirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    Node  c  =  rhs.getfirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	14	None	add
1871	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  NOde  c  =  rhs.getFirstChild();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getFirstChild();  NOde  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getFirstChild();    NOde  c  =  rhs.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
1872	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1873	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1874	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.hasChildren());  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.hasChildren());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.hasChildren());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1875	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1876	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1877	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1878	[BUG]  [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]          Node  c  =  rhs.getParent();  Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	                Node    c    =    rhs.getParent();    Node  c  =  rhs.getParent();  Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	232	None	add
1879	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	114	None	add
1880	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	114	None	add
1881	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	114	None	add
1882	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Node  lhs  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Node  lhs  =  rhs.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	114	None	add
1883	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  NodeTraversal.traverse(compiler,  rhs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseVariableDeclarations)  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  NodeTraversal.traverse(compiler,  rhs,  this);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    NodeTraversal.traverse(compiler,  rhs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseVariableDeclarations)	114	None	add
1884	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	114	2	add
1885	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	114	2	add
1886	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Preconditions.checkState(rhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Preconditions.checkState(rhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	114	2	add
1887	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Preconditions.checkState(rhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  Preconditions.checkState(rhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    Preconditions.checkState(rhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	114	2	add
1888	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  NodeTraversal.traverse(compiler,  rhs,  new  GatherCollapses());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    NodeTraversal.traverse(compiler,  rhs,  new  GatherCollapses());	  	compilable	  [FE]  IllegalStateException  	114	2	add
1889	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  NodeTraversal.traverse(compiler,  rhs,  new  GatherCollapses());  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException(   "   ");  }  NodeTraversal.traverse(compiler,  rhs,  new  GatherCollapses());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    NodeTraversal.traverse(compiler,  rhs,  new  GatherCollapses());	  	compilable	  [FE]  IllegalStateException  	114	2	add
1890	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  collapsed);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  collapsed);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  cannot  find  symbol  collapsed	163	None	replace
1891	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapse);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collapse)  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  lhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  lhs,  collapse);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapsed);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collapse)	163	None	replace
1892	[BUG]  [BUGGY]  parent.replaceChild(n,  rhs);  [CE]  cannot  find  symbol  parent  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  parent.replaceChild(n,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	parent.replaceChild(n,  rhs);	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  parent	112	None	replace
1893	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalStateException  	260	2	replace
1894	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalStateException  	260	2	replace
1895	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalArgumentException  	260	2	replace
1896	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalArgumentException  [FE]                  IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    collapsed.addChildToBack(rhs);    }    	compilable	  [FE]  IllegalArgumentException  	260	2	replace
1897	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  collapsed.addChildToBack(rhs);  }  [CE]  cannot  find  symbol  collapsed  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  collapsed.addChildToBack(rhs);  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  collapsed.addChildToBack(rhs);  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    collapsed.addChildToBack(rhs);    }    	non-compiled	[CE]  cannot  find  symbol  collapsed	260	None	replace
1898	[BUG]  [BUGGY]  lhs.addChildToBack(assignment.getLastChild());  [CE]  cannot  find  symbol  assignment  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assignment.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment.getLastChild());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()    ==    Token.GETPROP)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  assignment	78	None	replace
1899	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  var,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	161	None	replace
1900	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  n,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  n,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  n,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	161	None	replace
1901	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  rhs,  collapses);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    rhs,    collapses);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	161	None	replace
1902	[BUG]  [BUGGY]  LHs.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  LHs.addChildToBack(assign.detachFromRoot());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	LHs.addChildToBack(assign.detachFromRoot());	  lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1903	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1904	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1905	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalStateException  	121	2	replace
1906	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalStateException  	121	2	replace
1907	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getLastChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getLastChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1908	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getLastChild());  redeclaration  =  true;  }  [FE]  IllegalArgumentException  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getLastChild());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getLastChild());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1909	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign);  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1910	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  redeclaration  =  true;  }  [FE]  IllegalArgumentException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  IllegalArgumentException  	121	2	replace
1911	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	121	2	replace
1912	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  redeclaration  =  true;  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    redeclaration    =    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	121	2	replace
1913	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	135	None	add
1914	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	135	None	add
1915	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	135	None	add
1916	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	135	None	add
1917	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildTo	  	non-compiled	[CE]  ';'  expected	135	None	add
1918	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1919	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.getFirstChild());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	109	2	add
1920	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent()  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent()  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent()	  	non-compiled	[CE]  ')'  expected	109	None	add
1921	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromPar  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromPar  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromPar	  	non-compiled	[CE]  ')'  expected	109	None	add
1922	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom	  	non-compiled	[CE]  ')'  expected	109	None	add
1923	[BUG]  [BUGGY]  Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalName());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1924	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
1925	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());        lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(n.detachFromNext());  lhs.addChildToBack(rhs.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
1926	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1927	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(lhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(lhs.detachFromParent());  }	  lhs.addChildToBack(lhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	90	2	replace
1928	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	127	2	replace
1929	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  rhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	127	2	replace
1930	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  var);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
1931	[BUG]  [BUGGY]  nodesToCollapse.addChildToBack(lhs,  assign);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse.addChildToBack(lhs,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse.addChildToBack(lhs,  assign);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1932	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs,  var);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
1933	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs,  collapse);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
1934	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  varNode,  rhs);  [CE]  cannot  find  symbol  varNode  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  varNode,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  varNode,  rhs);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	95	None	replace
1935	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  b,  rhs);  [CE]  cannot  find  symbol  b  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  b,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  b,  rhs);	  lhs.addChildToBack(assign.detachFromParent(),    rhs);    	non-compiled	[CE]  cannot  find  symbol  b	95	None	replace
1936	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(assign.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	202	2	replace
1937	[BUG]  [BUGGY]  lhs.removeChild(assign.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign.getLastChild());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());    	compilable	  [FE]  NullPointerException  	202	2	replace
1938	[BUG]  [BUGGY]  n.removeChild(assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.removeChild(assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.removeChild(assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
1939	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getLastChild(),  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.getLastChild(),  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getLastChild(),  var);	  lhs.addChildToBack(assign,    rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
1940	[BUG]  [BUGGY]  lhs.addChildToBack(var,  assign,  rhs.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(var,  assign,  rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(var,  assign,  rhs.getLastChild());	  lhs.addChildToBack(assign,    rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
1941	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  n.getLastChild());	  lhs.addChildToBack(assign,    rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	269	None	replace
1942	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	131	2	replace
1943	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	131	2	replace
1944	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  else  {  [CE]  reached  end  of  file  while  parsing  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  else  {  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  }  else  {	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
1945	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs.detachFromParent(),  rhs);  [CE]  cannot  find  symbol  Lhs  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(lhs.detachFromParent(),  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs.detachFromParent(),  rhs);	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	45	None	replace
1946	[BUG]  [BUGGY]  Lhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign.detachFromParent());	  Lhs.addChildToBack(lhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  Lhs	45	None	replace
1947	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	236	2	add
1948	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.detachFromParent());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	236	2	add
1949	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	NodeTraversal.traverse(compiler,  n,  rhs);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	56	None	replace
1950	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  var);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  var);	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    rhs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	56	None	replace
1951	[BUG]  [BUGGY]  Node  c  =  lhs.nextChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.nextChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  lhs.nextChild();	          Node    c    =    lhs.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
1952	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  var.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  var.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  var.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
1953	[BUG]  [BUGGY]  lhs.addChildToBack(n,  rhs,  assign.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n,  rhs,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  rhs,  assign.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	168	None	replace
1954	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  b.detachFromParent());  [CE]  cannot  find  symbol  b  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  b.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  b.detachFromParent());	  lhs.addChildToBack(n,    assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  b	168	None	replace
1955	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(assign,  var);	  lhs.addChildAfter(assign,    rhs);    	compilable	  [FE]  IllegalArgumentException  	266	2	replace
1956	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  var);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  var);	  lhs.addChildAfter(assign,    rhs);    	compilable	  [FE]  IllegalArgumentException  	266	2	replace
1957	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs,  collapse);  [CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  rhs,  collapse);	  lhs.addChildAfter(assign,    rhs);    	non-compiled	[CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;	266	None	replace
1958	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  varNode);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  varNode);	  lhs.addChildAfter(assign,    rhs);    	non-compiled	[CE]  cannot  find  symbol  varNode	266	None	replace
1959	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs,  collapses);  [CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  rhs,  collapses);	  lhs.addChildAfter(assign,    rhs);    	non-compiled	[CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;	266	None	replace
1960	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  n.getFirstChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
1961	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  n.getFirstChild();	  Node    c    =    rhs.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	2	replace
1962	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	87	None	add
1963	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	87	None	add
1964	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addCh  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	87	None	add
1965	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.CALL)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	87	None	add
1966	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addCh  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	143	None	add
1967	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	143	None	add
1968	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.BLOCK)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	143	None	add
1969	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  b);  [CE]  cannot  find  symbol  b  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  b);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  b);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  cannot  find  symbol  b	166	None	replace
1970	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  redeclaration);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  redeclaration);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  var,  redeclaration);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	166	None	replace
1971	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  var);  [CE]  cannot  find  symbol  b  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  b,  var);	  lhs.addChildToBack(assign,    rhs.detachFromParent(),    var);    	non-compiled	[CE]  cannot  find  symbol  b	166	None	replace
1972	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs	  	non-compiled	[CE]  ';'  expected	85	None	add
1973	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()!=    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.	  	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	add
1974	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1975	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1976	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1977	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1978	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1979	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detach  [CE]  ')'  expected  [FE]              IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detach  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detach	  lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=    null)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	115	None	replace
1980	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromName());  rhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromName());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromName());  rhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
1981	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromPrefix());  rhs.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromPrefix());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        rhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromPrefix());  rhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
1982	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.replaceChild(n,  assign);	  lhs.removeChild(rhs);    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
1983	[BUG]  [BUGGY]  lhs.replaceChild(n,  assign);  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.replaceChild(n,  assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.replaceChild(n,  assign);	  lhs.removeChild(rhs);    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
1984	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  assign  =  rhs.getLastChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  assign  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  Node  assign  =  rhs.getLastChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	172	None	replace
1985	[BUG]  [BUGGY]  Node  rhs  =  rhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  rhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  rhs  =  rhs.getFirstChild();	  lhs.addChildToBack(assign.getFirstChild());    Node    assign    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	172	None	replace
1986	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1987	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1988	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1989	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(assign);  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1990	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.detachFromParent();  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.detachFromParent();  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1991	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.detachFromParent();  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.detachFromParent();  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.detachFromParent();  lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	96	2	add
1992	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(false);  lhs.addChildToBack(false);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(false);  lhs.addChildToBack(false);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(false);  lhs.addChildToBack(false);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	96	None	add
1993	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(false);  lhs.addChildToBack(rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);  lhs.addChildToBack(false);  lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        lhs.addChildToBack(rhs);    lhs.addChildToBack(false);  lhs.addChildToBack(rhs);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	96	None	add
1994	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
1995	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  Node  rhs  =  lhs.getLastChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	30	None	replace
1996	[BUG]  [BUGGY]  Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs  rhs  =  lhs.getFirstChild();  lhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
1997	[BUG]  [BUGGY]  n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
1998	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLocalPart());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(rhs.getLocalPart());	  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
1999	[BUG]  [BUGGY]  nodesToCollapse  =  compiler.traverse(assign,  rhs,  new  Collapse());  [CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  nodesToCollapse  =  compiler.traverse(assign,  rhs,  new  Collapse());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	nodesToCollapse  =  compiler.traverse(assign,  rhs,  new  Collapse());	  lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,    lhs,    new    Collapse());    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nodesToCollapse	264	None	replace
2000	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2001	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2002	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2003	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2004	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2005	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getFirstChild());    lhs.detachFromParent();  lhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	23	2	add
2006	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	247	None	add
2007	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	247	None	add
2008	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.detachFromParent();	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
2009	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.detachFromParent();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  lhs.detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    lhs.detachFromParent();	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
2010	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
2011	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalArgumentException  	247	2	add
2012	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	247	None	add
2013	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  lhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]              IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  lhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	247	None	add
2014	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  rhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  lhs  =  rhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	247	None	add
2015	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  lhs.getNext();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                  IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  Node  lhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.getFirstChild());    }    Node  lhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	247	None	add
2016	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	216	2	replace
2017	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object    c    =    function    f(a)    {    var    b=1    [Delete]    junit.framework.AssertionFailedError:    Expected:    function    f(a)    {    var    b=1;a=2;var    c    }    Result:    function    f(a)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	216	2	replace
2018	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext(),  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getNext(),  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext(),  rhs);	  lhs.addChildToBack(assign.getNext());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	157	None	replace
2019	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getParent());	  lhs.addChildToBack(assign.getNext());    	compilable	  [FE]  IllegalStateException  	157	2	replace
2020	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getParent());  [FE]  IllegalStateException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getParent());	  lhs.addChildToBack(assign.getNext());    	compilable	  [FE]  IllegalStateException  	157	2	replace
2021	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2022	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2023	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	35	2	replace
2024	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	35	2	replace
2025	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2026	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(lhs.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2027	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  IllegalStateException  	35	2	replace
2028	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  IllegalStateException  	35	2	replace
2029	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2030	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	35	2	replace
2031	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  NOde  c  =  rhs.getLastChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  NOde  c  =  rhs.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    NOde  c  =  rhs.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
2032	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getLastChild();  Node  c  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getLastChild();    Node  c  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	16	None	add
2033	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	146	None	add
2034	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	146	None	add
2035	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.VAR)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.FOR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack	  	non-compiled	[CE]  ';'  expected	146	None	add
2036	[BUG]  [BUGGY]  Lhs.addChildToBack(assign);  [CE]  cannot  find  symbol  Lhs  [FE]                IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(assign);	  lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);    	non-compiled	[CE]  cannot  find  symbol  Lhs	164	None	replace
2037	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  collapse);	  lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
2038	[BUG]  [BUGGY]  lhs.addChildToBack(var,  assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(var,  assign,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(var,  assign,  rhs);	  lhs.addChildToBack(assign,    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
2039	[BUG]  [BUGGY]  Node  c  =  rhs.nextChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.nextChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  rhs.nextChild();	  Node    c    =    rhs.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2040	[BUG]  [BUGGY]  lhs.addChildToBack(assign).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign).detachFromParent();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign).detachFromParent();	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	non-compiled	[CE]  void  cannot  be  dereferenced	62	None	replace
2041	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	n.addChildToBack(assign);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	compilable	  [FE]  IllegalArgumentException  	62	2	replace
2042	[BUG]  [BUGGY]  n.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  n.addChildToBack(assign);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	n.addChildToBack(assign);	  lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();    	compilable	  [FE]  IllegalArgumentException  	62	2	replace
2043	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();	  	non-compiled	[CE]  not  a  statement	18	None	add
2044	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c=3  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Result:  function  f(a)  {  var  x=2;foo(x);var  c=3	  	non-compiled	[CE]  not  a  statement	18	None	add
2045	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Result:  function  f(a)  {  var  x=2;foo(x);var  c  =  rhs.getNext();  }	  	non-compiled	[CE]  not  a  statement	18	None	add
2046	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=1;foo(x);var  c  =  rhs.getNext();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=1;foo(x);var  c  =  rhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Result:  function  f(a)  {  var  x=1;foo(x);var  c  =  rhs.getNext();	  	non-compiled	[CE]  not  a  statement	18	None	add
2047	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c=1  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  rhs.getNext();  Result:  function  f(a)  {  var  x=2;foo(x);var  c=1  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    rhs.getNext();    Result:  function  f(a)  {  var  x=2;foo(x);var  c=1	  	non-compiled	[CE]  not  a  statement	18	None	add
2048	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  Node  c  =  lhs.getNext();  [CE]  variable  c  is  already  defined  in  method  applyCollapses()  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  Node  c  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    Node  c  =  lhs.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyCollapses()	177	None	add
2049	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	177	None	add
2050	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	177	None	add
2051	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3	  	non-compiled	[CE]  ';'  expected	177	None	add
2052	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3!=  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }	  	non-compiled	[CE]  ';'  expected	177	None	add
2053	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3  >>  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }	  	non-compiled	[CE]  ';'  expected	177	None	add
2054	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Node  c  =  lhs.getNext();  var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node    c    =    lhs.getNext();    var  x=3  [Delete]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  }	  	non-compiled	[CE]  ';'  expected	177	None	add
2055	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	111	2	add
2056	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	111	2	add
2057	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  Node  rhs  =  lhs.getNext();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	111	None	add
2058	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.GETPROP)  {  var.addChildToBack	  	non-compiled	[CE]  ';'  expected	111	None	add
2059	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  var.addChildToBack	  	non-compiled	[CE]  ';'  expected	111	None	add
2060	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());        if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(assign.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack	  	non-compiled	[CE]  ';'  expected	111	None	add
2061	[BUG]  [BUGGY]  lhs.addChildToBack(c,  rhs,  assign.detachFromParent());  [CE]  cannot  find  symbol  c  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(c,  rhs,  assign.detachFromParent());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(c,  rhs,  assign.detachFromParent());	  lhs.addChildToBack(rhs,    assign.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
2062	[BUG]  [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  assign,  rhs.getFirstChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
2063	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  n.getFirstChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
2064	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  var.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs,  var.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  var.getLastChild());	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
2065	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getFirstChild(),  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign,  rhs.getFirstChild(),  var);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getFirstChild(),  var);	  lhs.addChildToBack(assign,    rhs.getFirstChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	230	None	replace
2066	[BUG]  [BUGGY]  Lhs.removeChild(assign.getString());  [CE]  cannot  find  symbol  Lhs  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(assign.getString());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(assign.getString());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
2067	[BUG]  [BUGGY]  Lhs.removeChild(lhs.getLastChild());  [CE]  cannot  find  symbol  Lhs  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(lhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(lhs.getLastChild());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
2068	[BUG]  [BUGGY]  Lhs.removeChild(lhs.getFirstChild());  [CE]  cannot  find  symbol  Lhs  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  Lhs.removeChild(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(lhs.getFirstChild());	  Lhs.removeChild(lhs.getString());    	non-compiled	[CE]  cannot  find  symbol  Lhs	93	None	replace
2069	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2070	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2071	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2072	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2073	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2074	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(lhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(rhs.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	21	2	add
2075	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2076	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2077	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2078	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2079	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2080	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.removeChild(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	240	2	add
2081	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	234	None	add
2082	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
2083	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(lhs.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
2084	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
2085	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());  lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());        lhs.addChildToBack(rhs.getNext());    lhs.addChildToBack(n.getLastChild());  lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	72	2	add
2086	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2087	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2088	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2089	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2090	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(assign);  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(assign);  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2091	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(assign);  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());  lhs.removeChild(assign);  lhs.addChildToBack(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        lhs.addChildToBack(assign.getFirstChild());    lhs.removeChild(assign);  lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	122	2	add
2092	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  var,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  var,  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  var,  rhs);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
2093	[BUG]  [BUGGY]  lhs.addChildToBack(var,  n.detachFromParent(),  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(var,  n.detachFromParent(),  rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(var,  n.detachFromParent(),  rhs);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
2094	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs,  collapse);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  rhs,  collapse);	  lhs.addChildToBack(n.detachFromParent(),    rhs);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
2095	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  rhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                    NullPointerException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());  Node  rhs  =  rhs.getFirstChild();	  lhs.addChildToBack(rhs.getLastChild());    Node    lhs    =    rhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	31	None	replace
2096	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2097	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2098	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2099	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2101	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.detachFromParent();  lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2102	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2103	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());  lhs.removeChild(rhs);  lhs.addChildToBack(n.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());        lhs.addChildToBack(n.getLastChild());    lhs.removeChild(rhs);  lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	27	2	add
2104	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  Lhs.addChildToBack(assign.removeFirstChild());  [CE]  cannot  find  symbol  Lhs  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  Lhs.addChildToBack(assign.removeFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    Lhs.addChildToBack(assign.removeFirstChild());	  	non-compiled	[CE]  cannot  find  symbol  Lhs	169	None	add
2105	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  NodeTraversal.traverse(compiler,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  NodeTraversal.traverse(compiler,  rhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    NodeTraversal.traverse(compiler,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	169	None	add
2106	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	169	None	add
2107	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  Node  assign  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());    Node  assign  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	169	None	add
2108	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addCh	  	non-compiled	[CE]  ';'  expected	79	None	add
2109	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChil	  	non-compiled	[CE]  ';'  expected	79	None	add
2110	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs	  	non-compiled	[CE]  ';'  expected	79	None	add
2111	[BUG]  [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()        ==        Token.FUNCTION)        {        lhs.addChildToBack(rhs.detachFromParent());        }        if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChild	  	non-compiled	[CE]  ';'  expected	79	None	add
2112	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2113	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2114	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2115	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2116	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2117	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  throw  new  IllegalStateException( " ");  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2118	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  [CE]  reached  end  of  file  while  parsing  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
2119	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2120	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  compiler.reportCodeChange();  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  }  else  {  compiler.reportCodeChange();  }	  lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	125	2	replace
2121	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	207	None	replace
2122	[BUG]  [BUGGY]  lhs.addChildToBack(varNode);  Node  rhs  =  lhs.getFirstChild();  [CE]  cannot  find  symbol  varNode  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(varNode);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(varNode);  Node  rhs  =  lhs.getFirstChild();	  lhs.addChildToBack(rhs);    Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  varNode	207	None	replace
2123	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
2124	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(lhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	48	2	add
2125	[BUG]  [BUGGY]  lhs.addChildToBack(assignment);  Lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  assignment  [FE]            IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assignment);  Lhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment);  Lhs.addChildToBack(rhs);	  lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  assignment	100	None	replace
2126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
2127	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getLastChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getLastChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.getFirstChild());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getLastChild());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	211	1	add
2128	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs);  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
2129	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(rhs.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs);  n.removeChild(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
2130	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	173	None	add
2131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs);  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
2132	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());  lhs.addChildToBack(rhs);  n.removeChild(assign.getLastChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());        n.removeChild(assign.getLastChild());    lhs.addChildToBack(rhs);  n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	173	2	add
2133	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  }	  lhs.addChildToBack(assign.cloneTree());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	198	2	replace
2134	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.cloneTree());  }	  lhs.addChildToBack(assign.cloneTree());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	198	2	replace
2135	[BUG]  [BUGGY]  lhs.addChildToBack(assignment);  lhs.removeChildToBack(rhs);  [CE]  cannot  find  symbol  assignment  [FE]        IllegalArgumentException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assignment);  lhs.removeChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment);  lhs.removeChildToBack(rhs);	  lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  assignment	270	None	replace
2136	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(n);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(n);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2137	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(n);  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(n);  rhs.addChildToBack(lhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(n);  rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2138	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.detachFromParent();  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2139	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.detachFromParent();  rhs.addChildToBack(rhs);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.detachFromParent();  rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2140	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(t);  [CE]  cannot  find  symbol  t  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(t);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(t);	  	non-compiled	[CE]  cannot  find  symbol  t	101	None	add
2141	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(n);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2142	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(n);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);  lhs.addChildToBack(rhs);  rhs.addChildToBack(n);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);        rhs.addChildToBack(lhs);    lhs.addChildToBack(rhs);  rhs.addChildToBack(n);	  	compilable	  [FE]  IllegalArgumentException  	101	2	add
2143	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]                    IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  reached  end  of  file  while  parsing	262	None	replace
2144	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  ')'  expected	262	None	replace
2145	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]                        IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  reached  end  of  file  while  parsing	262	None	replace
2146	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  ')'  expected	262	None	replace
2147	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFrom  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFrom  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFrom	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	non-compiled	[CE]  ')'  expected	262	None	replace
2148	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  var.addChildToBack(assign.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  var.addChildToBack(assign.removeFirstChild());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	262	2	replace
2149	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  var.addChildToBack(assign.removeFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                              IllegalStateException      [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  var.addChildToBack(assign.removeFirstChild());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  var.addChildToBack(assign.removeFirstChild());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	262	2	replace
2150	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	265	None	add
2151	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariableDeclaration());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariableDeclaration());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariableDeclaration());	  	non-compiled	[CE]  cannot  find  symbol	265	None	add
2152	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  rhs  =  assign.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  Node  rhs  =  assign.getLastChild();  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    Node  rhs  =  assign.getLastChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	265	None	add
2153	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariable());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildAfter(assign,  rhs);  NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariable());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,    rhs);    NodeTraversal.traverse(compiler,  lhs,  new  CollapseVariable());	  	non-compiled	[CE]  cannot  find  symbol	265	None	add
2154	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(assign.getFirstChild());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChildToBack(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.removeChildToBack(assign.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
2155	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());    lhs.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
2156	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChild(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  lhs.addChildToBack(assign.getLastChild());  lhs.removeChild(assign.getFirstChild());  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());    lhs.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
2157	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]    IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	259	None	replace
2158	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detach  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detach  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detach	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	259	None	replace
2159	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromPar  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromPar  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromPar	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  ')'  expected	259	None	replace
2160	[BUG]  [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [CE]  reached  end  of  file  while  parsing  [FE]          IllegalStateException    [CONTEXT]      if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();      [BUGGY]  if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }  [BUGGY]      var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs!=  null)  {  lhs.addChildToBack(assign);  if(rhs.getType()  ==  Token.VAR)  {  var.addChildToBack(assign.detachFromParent());  }	  lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(assign.detachFromParent());    }    else    {    lhs.addChildToBack(assign.detachFromParent());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	259	None	replace
