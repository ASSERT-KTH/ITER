bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.removeChild(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(rhs);	  lhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	11	2	replace
2	[BUG]  [BUGGY]  lhs.removeChild(rhs);  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.removeChild(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs);	  lhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	11	2	replace
3	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.detachFromParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.detachFromParent();	  lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalStateException  	11	2	replace
4	[BUG]  [BUGGY]  lhs.detachFromParent();  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.detachFromParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.detachFromParent();	  lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalStateException  	11	2	replace
5	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs);	  lhs.addChildToBack(assign);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
6	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.removeChild(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.removeChild(assign);	  lhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	11	2	replace
7	[BUG]  [BUGGY]  lhs.removeChild(assign);  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.removeChild(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(assign);	  lhs.addChildToBack(assign);    	compilable	  [FE]  NullPointerException  	11	2	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
9	[BUG]  [BUGGY]  lhs.addChildToBack(n.getLastChild());  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
10	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
11	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
12	[BUG]  [BUGGY]  var  x=3  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  var  x=3  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	var  x=3	      	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  foo(x);var  x=3  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  foo(x);var  x=3  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	foo(x);var  x=3	      	non-compiled	[CE]  ';'  expected	13	None	replace
14	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  rhs.getFirstChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
15	[BUG]  [BUGGY]  Node  c  =  rhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  rhs.getFirstChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
16	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getLastChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  rhs.getLastChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
17	[BUG]  [BUGGY]  Node  c  =  rhs.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getLastChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  rhs.getLastChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
18	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getNext();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  rhs.getNext();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
19	[BUG]  [BUGGY]  Node  c  =  rhs.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  rhs.getNext();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  rhs.getNext();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	2	replace
20	[BUG]  [BUGGY]  Foo(x);var  x=3  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Foo(x);var  x=3  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Foo(x);var  x=3	      	non-compiled	[CE]  ';'  expected	13	None	replace
21	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
22	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
24	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
26	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  rhs.addChildToBack(lhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    rhs.addChildToBack(lhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
28	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getLastChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
29	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	1	None	add
30	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]              NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    Node  rhs  =  lhs.getLastChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	1	None	add
31	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  Node  lhs  =  rhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    Node  lhs  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	1	None	add
32	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
33	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
34	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
35	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
36	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
37	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  rhs.addChildToBack(n.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    rhs.addChildToBack(n.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	8	2	add
38	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(t.detachFromParent());  [CE]  cannot  find  symbol  t  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(t.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(t.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol  t	8	None	add
39	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromNext());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
40	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromRoot());  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(n.detachFromRoot());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(n.detachFromRoot());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
41	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	5	2	replace
42	[BUG]  [BUGGY]  lhs.addChildToBack(n.getFirstChild());  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.getFirstChild());	  lhs.addChildToBack(rhs.getFirstChild());    	compilable	  [FE]  IllegalArgumentException  	5	2	replace
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	20	2	replace
44	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	20	2	replace
45	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	20	None	replace
46	[BUG]  [BUGGY]  Lhs.addChildToBack(rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(rhs.detachFromParent());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	20	None	replace
47	[BUG]  [BUGGY]  lhs.addChildToBack(a.getFirstChild());  [CE]  cannot  find  symbol  a  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(a.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(a.getFirstChild());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  a	20	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  IllegalArgumentException  	20	2	replace
49	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  IllegalArgumentException  	20	2	replace
50	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c);  [CE]  cannot  find  symbol  c  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  c);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  c);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  c	3	None	replace
51	[BUG]  [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs,  assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs,  assign.detachFromParent());	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
52	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b);  [CE]  cannot  find  symbol  b  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  b);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  b);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  b	3	None	replace
53	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs,  assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs,  assign.detachFromParent());	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);    lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
55	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    lhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
56	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  lhs,  rhs);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	10	None	add
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign);    rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
58	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  rhs.addChildToBack(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    rhs.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
59	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign,  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign,  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    lhs.addChildToBack(assign,  rhs);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	10	None	add
60	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  lhs,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Collapse>)	10	None	add
61	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign,  rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    lhs.addChildToBack(assign,  rhs.detachFromParent());	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	10	None	add
62	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]                IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildToBack(assign).detachFromParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    lhs.addChildToBack(assign).detachFromParent();	  	non-compiled	[CE]  void  cannot  be  dereferenced	10	None	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  assign.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	        Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
64	[BUG]  [BUGGY]      Node  c  =  assign.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  assign.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	        Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
65	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
66	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
67	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
68	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
69	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  rhs  =  lhs.getLastChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    Node  rhs  =  lhs.getLastChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	4	None	add
70	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalPart());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalPart());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
71	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getLocalName());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getLocalName());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
72	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	4	2	add
73	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.getNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.getNext());	  	compilable	  [FE]  NullPointerException  	4	2	add
74	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]                NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  Node  rhs  =  lhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	4	None	add
75	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
76	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
77	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
78	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
79	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
80	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
81	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
82	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
83	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
84	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
85	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
86	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()!=  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
87	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
88	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CALL)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
89	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	23	2	replace
90	[BUG]  [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(lhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(lhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	23	2	replace
91	[BUG]  [BUGGY]  Lhs.addChildToBack(lhs,  rhs.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Lhs.addChildToBack(lhs,  rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.addChildToBack(lhs,  rhs.detachFromParent());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	23	None	replace
92	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getString());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	23	None	replace
93	[BUG]  [BUGGY]  Lhs.removeChild(lhs.getString());  [CE]  cannot  find  symbol  Lhs  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Lhs.removeChild(lhs.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Lhs.removeChild(lhs.getString());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  cannot  find  symbol  Lhs	23	None	replace
94	[BUG]  [BUGGY]  lhs.removeChild(rhs.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.removeChild(rhs.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.removeChild(rhs.getString());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	23	None	replace
95	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent(),  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent(),  rhs);	  lhs.addChildToBack(assignment.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
96	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
97	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
98	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
99	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    rhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
100	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Lhs.addChildToBack(rhs);  [CE]  cannot  find  symbol  Lhs  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  Lhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    Lhs.addChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	21	None	add
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
102	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  rhs.addChildToBack(lhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    rhs.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
103	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Node  rhs  =  lhs.getNext();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  Node  rhs  =  lhs.getNext();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    Node  rhs  =  lhs.getNext();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	21	None	add
104	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildIntoBack(rhs);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildIntoBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.addChildIntoBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs);    n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
106	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  n.removeChild(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    n.removeChild(rhs);	  	compilable	  [FE]  IllegalArgumentException  	21	2	add
107	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	6	2	add
108	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	6	2	add
109	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
110	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
111	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
112	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
113	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromParent());  nodesToCollapse.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
114	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
115	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
116	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	6	2	add
117	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  rhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    rhs.addChildToBack(assign.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	6	2	add
118	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
119	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
120	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
121	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(assign.detachFromParent()!=  null)  {  lhs.addChildToBack(assign.detachFromParent());  redeclaration  =  true;  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
122	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
123	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
124	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
125	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
126	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
127	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
128	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
129	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
131	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  lhs.addChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    lhs.addChildToBack(rhs.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
133	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
134	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]                IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  lhs  =  assign.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	15	None	add
135	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
136	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
137	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
138	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
139	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
140	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
141	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
142	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
143	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
144	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.BLOCK)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
145	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  CAR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.CAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol  CAR	19	None	add
146	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
147	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FOR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
148	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
149	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
150	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
151	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.EXPR_RESULT)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
152	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
153	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
154	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
155	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(lhs.getType()  ==  Token.FUNCTION  ||  rhs.getType()  ==  Token.GETPROP)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	2	replace
156	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getNext());	  lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  NullPointerException  	7	2	replace
157	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getNext());  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getNext());	  lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  NullPointerException  	7	2	replace
158	[BUG]  [BUGGY]  lhs.addChildToBack(c);  [CE]  cannot  find  symbol  c  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(c);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(c);	  lhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
159	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent(),  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent(),  rhs);	  lhs.addChildToBack(n.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
160	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	10	None	add
161	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  collapses);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  rhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	10	None	add
162	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  collapsed);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  lhs,  collapsed);	  	non-compiled	[CE]  cannot  find  symbol  collapsed	10	None	add
163	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  collapsed);  [CE]  cannot  find  symbol  collapsed  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  rhs,  collapsed);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  rhs,  collapsed);	  	non-compiled	[CE]  cannot  find  symbol  collapsed	10	None	add
164	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  Lhs.addChildToBack(assign);  [CE]  cannot  find  symbol  Lhs  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  Lhs.addChildToBack(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    Lhs.addChildToBack(assign);	  	non-compiled	[CE]  cannot  find  symbol  Lhs	10	None	add
165	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  collapse);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
166	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  var);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  var);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
167	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode);  [CE]  cannot  find  symbol  varNode  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  varNode);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  varNode	3	None	replace
168	[BUG]  [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.detachFromParent());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n,  assign,  rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n,  assign,  rhs.detachFromParent());	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
169	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.removeFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	2	replace
170	[BUG]  [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.removeFirstChild());	  lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	2	replace
171	[BUG]  [BUGGY]  lhs.addChildToBack(assignment.getFirstChild());  [CE]  cannot  find  symbol  assignment  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assignment.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment.getFirstChild());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  cannot  find  symbol  assignment	23	None	replace
172	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  assign  =  rhs.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  Node  assign  =  rhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    Node  assign  =  rhs.getFirstChild();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	15	None	add
173	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
174	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  n.removeChild(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    n.removeChild(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
175	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
176	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  rhs.addChildToBack(assign.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    rhs.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
177	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  lhs.getNext();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	Node  c  =  lhs.getNext();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	13	2	replace
178	[BUG]  [BUGGY]  Node  c  =  lhs.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  Node  c  =  lhs.getNext();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	Node  c  =  lhs.getNext();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3  	13	2	replace
179	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
180	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	17	1	add
181	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  If(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  If(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    If(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  ';'  expected	17	None	add
182	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromNext());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
183	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachfromParent());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachfromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachfromParent());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
184	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  lhs  =  assign.detachFromParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    Node  lhs  =  assign.detachFromParent();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	6	None	add
185	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  assign  =  assign.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  Node  assign  =  assign.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    Node  assign  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  applyCollapses()	6	None	add
186	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  lhs.addChildToBack(assign.detachFromRoot());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    lhs.addChildToBack(assign.detachFromRoot());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
187	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  Lhs.addChildToBack(n.detachFromParent());  [CE]  cannot  find  symbol  Lhs  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  Lhs.addChildToBack(n.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    Lhs.addChildToBack(n.detachFromParent());	  	non-compiled	[CE]  cannot  find  symbol  Lhs	8	None	add
188	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromNext());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.detachFromNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.detachFromNext());	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
189	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
190	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
191	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
192	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.removeChildToBack(rhs.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
193	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	1	2	add
194	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	1	2	add
195	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
196	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
197	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.cloneTree());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.cloneTree());	  lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	7	2	replace
198	[BUG]  [BUGGY]  lhs.addChildToBack(assign.cloneTree());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.cloneTree());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.cloneTree());	  lhs.addChildToBack(assign.detachFromParent());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	7	2	replace
199	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChildToBack(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
200	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChildToBack(rhs.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
201	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
202	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getLastChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
203	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  lhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	        Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
204	[BUG]  [BUGGY]      Node  c  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  lhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	        Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
205	[BUG]  [BUGGY]  lhs.addChildToBack(assignment);  [CE]  cannot  find  symbol  assignment  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assignment);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment);	  lhs.addChildToBack(rhs);    	non-compiled	[CE]  cannot  find  symbol  assignment	22	None	replace
206	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).detachFromParent();  [CE]  void  cannot  be  dereferenced  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).detachFromParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).detachFromParent();	  	non-compiled	[CE]  void  cannot  be  dereferenced	21	None	add
207	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  Node  rhs  =  lhs.getFirstChild();  [CE]  variable  rhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  Node  rhs  =  lhs.getFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    Node  rhs  =  lhs.getFirstChild();	  	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  applyCollapses()	21	None	add
208	[BUG]  [BUGGY]  lhs.addChildToBack(assignment,  rhs.detachFromParent());  [CE]  cannot  find  symbol  assignment  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assignment,  rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assignment,  rhs.detachFromParent());	  lhs.addChildToBack(assignment.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  assignment	14	None	replace
209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.removeFirstChild());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  NullPointerException  	18	2	replace
210	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.removeFirstChild());	  if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	compilable	  [FE]  NullPointerException  	18	2	replace
211	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	2	replace
212	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  lhs.addChildToBack(assign.getFirstChild());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	2	replace
213	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
214	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(lhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
215	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	19	None	add
216	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	19	None	add
217	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
218	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.VOID)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
219	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b	  	non-compiled	[CE]  ';'  expected	19	None	add
220	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object  c  =  function  f(a)  {  var  b=1  [Delete]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=	  	non-compiled	[CE]  ';'  expected	19	None	add
221	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
222	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
223	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
224	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(n.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
225	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
226	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getLastChild());  lhs.addChildToBack(assign.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getLastChild());    lhs.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  NullPointerException  	1	2	add
227	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToFront(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToFront(rhs);	  lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
228	[BUG]  [BUGGY]  lhs.addChildToFront(rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToFront(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToFront(rhs);	  lhs.addChildToBack(assign);    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
229	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.removeFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.removeFirstChild());	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
230	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getFirstChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getFirstChild());	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
231	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  v);  [CE]  cannot  find  symbol  v  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.detachFromParent(),  v);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.detachFromParent(),  v);	  lhs.addChildToBack(assign,    rhs.detachFromParent());    	non-compiled	[CE]  cannot  find  symbol  v	3	None	replace
232	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  rhs.getParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	        Node  c  =  rhs.getParent();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
233	[BUG]  [BUGGY]      Node  c  =  rhs.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x=2;foo(x);var  x=3    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]      Node  c  =  rhs.getParent();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	        Node  c  =  rhs.getParent();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	add
234	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.removeFirstChild());	  lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	9	2	replace
235	[BUG]  [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.removeFirstChild());	  lhs.addChildToBack(n.detachFromParent());    	compilable	  [FE]  IllegalStateException  	9	2	replace
236	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	4	2	add
237	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.detachFromParent());	  	compilable	  [FE]  NullPointerException  	4	2	add
238	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
239	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.addChildToBack(rhs.removeFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.addChildToBack(rhs.removeFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
240	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
241	[BUG]  [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs.getFirstChild());  lhs.removeChild(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs.getFirstChild());    lhs.removeChild(rhs.getFirstChild());	  	compilable	  [FE]  NullPointerException  	4	2	add
242	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getString());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getString());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    else    {    lhs.removeChild(rhs.getString());    }    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
243	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
244	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
245	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
246	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
248	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(assign.getFirstChild());  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
249	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
250	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  Node  parent  =  n.getParent();  var.removeChild(parent);  }	  	compilable	  [FE]  IllegalArgumentException  	15	2	add
251	[BUG]  [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  collapsed.addChildToBack(rhs);  }  [CE]  cannot  find  symbol  collapsed  [FE]            IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.getFirstChild());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  collapsed.addChildToBack(rhs);  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.getFirstChild());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.getFirstChild());  }  else  {  collapsed.addChildToBack(rhs);  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	15	None	add
252	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
253	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
254	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
255	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
256	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
257	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
258	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
259	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  }	  	compilable	  [FE]  IllegalStateException  	6	2	add
260	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  collapsed.addChildToBack(rhs);  }  [CE]  cannot  find  symbol  collapsed  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  collapsed.addChildToBack(rhs);  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  collapsed.addChildToBack(rhs);  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	6	None	add
261	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.NAME)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
262	[BUG]  [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  [CE]  reached  end  of  file  while  parsing  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign.detachFromParent());  if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign.detachFromParent());    if(rhs.getType()  ==  Token.VAR)  {  lhs.addChildToBack(assign.detachFromParent());  }  else  {  lhs.addChildToBack(assign.detachFromParent());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
263	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildBefore(assign);  [CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  lhs.addChildBefore(assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    lhs.addChildBefore(assign);	  	non-compiled	[CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;	10	None	add
264	[BUG]  [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  new  Collapse());  [CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign);  NodeTraversal.traverse(compiler,  lhs,  new  Collapse());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign);    NodeTraversal.traverse(compiler,  lhs,  new  Collapse());	  	non-compiled	[CE]  constructor  Collapse  in  class  Collapse  cannot  be  applied  to  given  types;	10	None	add
265	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildAfter(assign,  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildAfter(assign,  rhs);	  lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
266	[BUG]  [BUGGY]  lhs.addChildAfter(assign,  rhs);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildAfter(assign,  rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildAfter(assign,  rhs);	  lhs.addChildToBack(rhs);    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
267	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.setString(assign.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.setString(assign.getString());	  lhs.addChildToBack(rhs);    	compilable	  [FE]  UnsupportedOperationException  	22	2	replace
268	[BUG]  [BUGGY]  lhs.setString(assign.getString());  [FE]  UnsupportedOperationException  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.setString(assign.getString());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.setString(assign.getString());	  lhs.addChildToBack(rhs);    	compilable	  [FE]  UnsupportedOperationException  	22	2	replace
269	[BUG]  [BUGGY]  lhs.addChildToBack(assign,  rhs.getLastChild());  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(assign,  rhs.getLastChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(assign,  rhs.getLastChild());	  lhs.addChildToBack(rhs.getLastChild());    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
270	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.removeChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.removeChildToBack(rhs);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
271	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).replaceChild(n,  assign);  [CE]  void  cannot  be  dereferenced  [FE]      IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).replaceChild(n,  assign);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).replaceChild(n,  assign);	  	non-compiled	[CE]  void  cannot  be  dereferenced	21	None	add
272	[BUG]  [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]        IllegalArgumentException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(rhs);  lhs.addChildToBack(rhs).removeFirstChild();  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(rhs);    lhs.addChildToBack(rhs).removeFirstChild();	  	non-compiled	[CE]  void  cannot  be  dereferenced	21	None	add
273	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  not  a  statement	17	None	add
274	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildIntoBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
275	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachfromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachfromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
276	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.removeChildToBack(rhs.detachFromParent());  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.removeChildToBack(rhs.detachFromParent());  }  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.removeChildToBack(rhs.detachFromParent());  }	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
277	[BUG]  [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  if(rhs.getType()  ==  Token.FUNCTION)  {  lhs.addChildToBack(rhs.detachFromParent());  }  Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	if(rhs.getType()    ==    Token.FUNCTION)    {    lhs.addChildToBack(rhs.detachFromParent());    }    Object  c  =  function  f(a)  {  var  b=1;var  c  }  Result:  function  f(a)  {  var  b=1	  	non-compiled	[CE]  ';'  expected	17	None	add
278	[BUG]  [BUGGY]  lhs.addChildToBack(a.getNext());  [CE]  cannot  find  symbol  a  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(a.getNext());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(a.getNext());	  if(rhs.getType()    ==    Token.VAR)    {    lhs.addChildToBack(rhs.detachFromParent());    }    	non-compiled	[CE]  cannot  find  symbol  a	20	None	replace
279	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	8	2	add
280	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs.getFirstChild());  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	8	2	add
281	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	8	2	add
282	[BUG]  [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isName());  Node  rhs  =  assign.getLastChild();    [BUGGY]  lhs.addChildToBack(n.detachFromParent());  lhs.addChildToBack(rhs);  [BUGGY]    var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	lhs.addChildToBack(n.detachFromParent());    lhs.addChildToBack(rhs);	  	compilable	  [FE]  IllegalStateException  	8	2	add
