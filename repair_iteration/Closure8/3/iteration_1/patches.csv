bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
2	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
3	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	6	2	add
4	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	6	2	add
5	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	6	None	add
6	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	6	2	add
7	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	6	2	add
8	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()!=  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
9	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()!=  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
10	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	6	2	add
11	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	6	2	add
12	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	compilable	  [FE]  IllegalStateException  	6	2	add
13	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	compilable	  [FE]  IllegalStateException  	6	2	add
14	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	6	2	add
15	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	6	2	add
16	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
17	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
18	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  preconditions  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
19	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
20	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
21	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
22	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
23	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  compiler.reportCodeChange();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalStateException  	17	2	add
24	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  compiler.reportCodeChange();  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  compiler.reportCodeChange();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalStateException  	17	2	add
25	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.FOR);  [CE]  cannot  find  symbol  preconditions  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.FOR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.FOR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
26	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
27	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
28	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
29	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
30	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
31	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
32	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
33	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
34	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
35	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  preconditions  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  preconditions.checkState(lhs.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	11	None	add
36	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
37	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Preconditions.checkState(lhs.isVar());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
38	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isVar());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  assign.getFirstChild();  Preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
39	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getLastChild();  Preconditions.checkState(lhs.isVar());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getLastChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  assign.getLastChild();  Preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
40	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Preconditions.checkState(lhs.isVar());  preconditions.checkState(lhs.isVar());  [CE]  cannot  find  symbol  preconditions  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Preconditions.checkState(lhs.isVar());  preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Preconditions.checkState(lhs.isVar());  preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	4	None	add
41	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  assign.getParent();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  parent  =  assign.getParent();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
42	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  assign.getParent();  Preconditions.checkState(lhs.isVar());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  assign.getParent();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  parent  =  assign.getParent();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
43	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
44	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isVar());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
45	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.hasChildren());	  	compilable	  [FE]  IllegalStateException  	4	2	add
46	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.hasChildren());  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.hasChildren());	  	compilable	  [FE]  IllegalStateException  	4	2	add
47	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	4	None	add
48	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
49	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
50	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	21	None	add
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	21	2	add
52	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	21	2	add
53	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  IllegalStateException  	21	2	add
54	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  IllegalStateException  	21	2	add
55	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()!=  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
56	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()!=  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
57	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.SCRIPT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.SCRIPT);	  	compilable	  [FE]  IllegalStateException  	21	2	add
58	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.SCRIPT);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.SCRIPT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.SCRIPT);	  	compilable	  [FE]  IllegalStateException  	21	2	add
59	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	21	2	add
60	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	21	2	add
61	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	21	2	add
62	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	21	2	add
63	[BUG]  [BUGGY]  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	c  =  function  f(a)  {  var  b=1  }	      	non-compiled	[CE]  ';'  expected	14	None	replace
64	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	      	non-compiled	[CE]  ')'  expected	14	None	replace
65	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=	      	non-compiled	[CE]  ')'  expected	14	None	replace
66	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  for(AssertionFailedError  a  :  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	      	non-compiled	[CE]  ')'  expected	14	None	replace
67	[BUG]  [BUGGY]  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Node  lhs  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Node  lhs  =  assign.getFirstChild();	      	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	14	None	replace
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  lhs.detachFromParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	lhs.detachFromParent();	      	compilable	  [FE]  IllegalStateException  	14	2	replace
69	[BUG]  [BUGGY]  lhs.detachFromParent();  [FE]  IllegalStateException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  lhs.detachFromParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	lhs.detachFromParent();	      	compilable	  [FE]  IllegalStateException  	14	2	replace
70	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Node  c  =  assign.getFirstChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	replace
71	[BUG]  [BUGGY]  Node  c  =  assign.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Node  c  =  assign.getFirstChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	14	1	replace
72	[BUG]  [BUGGY]      c  =  function(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      c  =  function(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        c  =  function(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	13	None	add
73	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
74	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
75	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Result:  function  f(a)  {  var  b=1  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Result:  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    Result:  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  not  a  statement	19	None	add
76	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
77	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    c  =  function(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
78	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
79	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
80	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
81	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function(a)  {  b=1  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  c  =  function(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    c  =  function(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	19	None	add
82	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
83	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Result:  function  f(a)  {  var  b=1  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Result:  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Result:  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  not  a  statement	1	None	add
84	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
85	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
86	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    c  =  function(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
87	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
88	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function(a)  {  b=1  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  c  =  function(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    c  =  function(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	1	None	add
89	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1	  	non-compiled	[CE]  ';'  expected	1	None	add
90	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
91	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
92	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  preconditions  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	9	None	add
93	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	9	2	add
94	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	9	2	add
95	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	9	None	add
96	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	9	None	add
97	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
98	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
99	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EMPTY);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  IllegalStateException  	9	2	add
100	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EMPTY);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EMPTY);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  IllegalStateException  	9	2	add
101	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	2	2	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.NAME);  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	2	2	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  c);  [CE]  cannot  find  symbol  c  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  c);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  c	2	None	replace
104	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
105	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
106	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
108	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  redeclaration);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME,  redeclaration);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  redeclaration);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  redeclaration);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME,  redeclaration);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
110	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode()  ||  lhs.isNode());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode()  ||  lhs.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode()  ||  lhs.isNode());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode()  ||  assign.isNode());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode()  ||  assign.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode()  ||  assign.isNode());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isNode());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  ||  lhs.isNode());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  &&  lhs.isNode());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  &&  lhs.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME  &&  lhs.isNode());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode()  &&!a.hasChildren());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode()  &&!a.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode()  &&!a.hasChildren());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
117	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.FUNCTION);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	replace
119	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
121	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION,  c);  [CE]  cannot  find  symbol  c  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION,  c);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION,  c);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  c  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  c  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  c  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  c  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
125	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalArgumentException  	12	2	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalArgumentException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalArgumentException  	12	2	replace
127	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.BLOCK);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.BLOCK);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.BLOCK);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	replace
129	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
131	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.GETPROP);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.GETPROP);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.GETPROP);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
133	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
135	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	18	1	replace
137	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
139	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
141	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  c  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  c  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  c  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  c  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
144	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.GETPROP);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.GETPROP);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.GETPROP);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.GETPROP);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
146	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
148	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
150	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.hasChildren());	  Preconditions.checkState(lhs.isVar());    	compilable	  [FE]  IllegalStateException  	5	2	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(lhs.hasChildren());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.hasChildren());	  Preconditions.checkState(lhs.isVar());    	compilable	  [FE]  IllegalStateException  	5	2	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	15	None	add
153	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  not  a  statement	15	None	add
154	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	15	None	add
155	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	15	None	add
156	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function(a)  {  var  b=1  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  c  =  function(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    c  =  function(a)  {  var  b=1  }	  	non-compiled	[CE]  ';'  expected	15	None	add
157	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	15	None	add
158	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  b=1  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  b=1  }	  	non-compiled	[CE]  not  a  statement	15	None	add
159	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1	  	non-compiled	[CE]  not  a  statement	15	None	add
160	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName()  ||  lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName()  ||  lhs.isQualifiedName());	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName()  ||  lhs.isQualifiedName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName()  ||  lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName()  ||  lhs.isQualifiedName());	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
162	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.isQualifiedName());	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.isQualifiedName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.isQualifiedName());	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName()  ==  null);  [CE]  incomparable  types:  boolean  and  <null>  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName()  ==  null);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName()  ==  null);	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	20	None	replace
165	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	7	1	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	7	1	replace
167	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalArgumentException  	7	2	replace
168	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalArgumentException  	7	2	replace
169	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.VAR  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR  ||  lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.VAR  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  c);  [CE]  cannot  find  symbol  c  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  c);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.VAR,  c);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  c	7	None	replace
172	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=  null  ||  lhs.isName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  ||  lhs.isName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isDefined());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isDefined());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
175	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=  null  &&  lhs.isVar());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  IllegalStateException  	16	2	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isVar());  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isVar());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  IllegalStateException  	16	2	replace
177	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
179	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs  ==  null  ||  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs  ==  null  ||  lhs.isName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(lhs  ==  null  ||  lhs.isName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs  ==  null  ||  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs  ==  null  ||  lhs.isName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isType());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isType());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isType());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
182	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	10	1	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	10	1	replace
184	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  c);  [CE]  cannot  find  symbol  c  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  c);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  c);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  c	10	None	replace
187	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  b);  [CE]  cannot  find  symbol  b  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  b);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT,  b);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  b	10	None	replace
190	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  lhs.isDefined());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  lhs.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined()  ||  lhs.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined(),  redeclaration);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined(),  redeclaration);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined(),  redeclaration);	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined(),  isDefined);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined(),  isDefined);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined(),  isDefined);	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined(),  b);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined(),  b);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined(),  b);	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined(),  c);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined(),  c);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined(),  c);	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||!lhs.isDefined());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||!lhs.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined()  ||!lhs.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isDefined());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  ||  lhs.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  ||  lhs.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(false,  lhs.isDefined());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(false,  lhs.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(false,  lhs.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  n.isDefined());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  n.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined()  ||  n.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getLastChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	17	None	add
202	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	17	None	add
203	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	17	2	add
204	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  c  =  lhs.getFirstChild();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	17	2	add
205	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	17	None	add
206	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  a  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  a	10	None	replace
207	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
209	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	10	1	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	10	1	replace
211	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.hasChildren());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	11	None	add
214	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	11	2	add
215	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getFirstChild();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	11	2	add
216	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  lhs  =  assign.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  lhs  =  assign.getLastChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  lhs  =  assign.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	11	None	add
217	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	11	2	add
218	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getNext();  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	11	2	add
219	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
220	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
221	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  a  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.NAME);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  a	2	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  varNode);  [CE]  cannot  find  symbol  varNode  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME,  varNode);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME,  varNode);	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  varNode	2	None	replace
223	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.hasChildren());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
225	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  n.hasChildren());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	2	1	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(a.isQualifiedName());  [CE]  cannot  find  symbol  a  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.isQualifiedName());	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  a	20	None	replace
228	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      n.removeChild(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        n.removeChild(assign);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	1	add
229	[BUG]  [BUGGY]      n.removeChild(assign);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      n.removeChild(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        n.removeChild(assign);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	13	1	add
230	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
231	[BUG]  [BUGGY]      var.addChildToBack(assign.getFirstChild());  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.addChildToBack(assign.getFirstChild());	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
232	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(lhs);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
233	[BUG]  [BUGGY]      var.addChildToBack(lhs);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(lhs);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.addChildToBack(lhs);	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.removeChild(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var.removeChild(assign);	  	compilable	  [FE]  RuntimeException  	13	2	add
235	[BUG]  [BUGGY]      var.removeChild(assign);  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.removeChild(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.removeChild(assign);	  	compilable	  [FE]  RuntimeException  	13	2	add
236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
237	[BUG]  [BUGGY]      var.addChildToBack(assign);  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.addChildToBack(assign);	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
238	[BUG]  [BUGGY]      var.addChildToBack(a.getFirstChild());  [CE]  cannot  find  symbol  a  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(a.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.addChildToBack(a.getFirstChild());	  	non-compiled	[CE]  cannot  find  symbol  a	13	None	add
239	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign.getLastChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
240	[BUG]  [BUGGY]      var.addChildToBack(assign.getLastChild());  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var.addChildToBack(assign.getLastChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var.addChildToBack(assign.getLastChild());	  	compilable	  [FE]  IllegalArgumentException  	13	2	add
241	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Preconditions.checkState(lhs!=  null  &&  lhs.isName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	1	add
242	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Preconditions.checkState(lhs!=  null  &&  lhs.isName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	1	add
243	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  	non-compiled	[CE]  not  a  statement	15	None	add
244	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  	non-compiled	[CE]  not  a  statement	15	None	add
245	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	1	add
246	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	15	1	add
247	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  true;  }  [CE]  cannot  find  symbol  collapsed  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  true;  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  true;  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	15	None	add
248	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  false;  }  [CE]  cannot  find  symbol  collapsed  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  false;  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    if(lhs!=  null)  {  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  }  else  {  collapsed  =  false;  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	15	None	add
249	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1  }	  	non-compiled	[CE]  not  a  statement	15	None	add
250	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  a  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  a	7	None	replace
251	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
253	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  var);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.VAR,  var);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  var);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  var);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.VAR,  var);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isDefine());  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isDefine());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isDefine());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isNode());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isNode());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  a  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
258	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!n.hasChildren());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
260	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	12	1	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!a.hasChildren());  [CE]  cannot  find  symbol  a  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!a.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION  ||!a.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
263	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
265	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(false,  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(false,  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(false,  lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(false,  lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(false,  lhs.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
267	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
268	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
269	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  a  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  a	9	None	add
270	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  lhs  =  assign.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  lhs  =  assign.getLastChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  lhs  =  assign.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	9	None	add
271	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  a  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  a	22	None	replace
272	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  n.hasChildren());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	22	1	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  &&  NodeUtil.isExpressionNode(assign));  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  &&  NodeUtil.isExpressionNode(assign));  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  &&  NodeUtil.isExpressionNode(assign));	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
275	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!n.hasChildren());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!n.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!n.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!a.hasChildren());  [CE]  cannot  find  symbol  a  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!a.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||!a.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  a	22	None	replace
278	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(n.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode()  &&!assign.hasChildren());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode()  &&!assign.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode()  &&!assign.hasChildren());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode()  ||!assign.hasChildren());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode()  ||!assign.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode()  ||!assign.hasChildren());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
282	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	6	2	add
283	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getNext();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	6	2	add
284	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  n.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  n.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	6	2	add
285	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  n.getFirstChild();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  n.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  n.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	6	2	add
286	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	6	2	add
287	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	6	2	add
288	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
289	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
290	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
291	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  assign.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Node  c  =  assign.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
292	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	1	2	add
293	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	1	2	add
294	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
295	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	1	1	add
296	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	1	2	add
297	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	1	2	add
298	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	compilable	  [FE]  IllegalStateException  	1	2	add
299	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [FE]  IllegalStateException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  Preconditions.checkState(lhs.getType()  ==  Token.CALL);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    Preconditions.checkState(lhs.getType()  ==  Token.CALL);	  	compilable	  [FE]  IllegalStateException  	1	2	add
300	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	21	2	add
301	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getFirstChild();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	21	2	add
302	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	21	2	add
303	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getNext();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  c  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  c  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	21	2	add
304	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  a  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(a.getType()  ==  Token.BLOCK);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  a	18	None	replace
305	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.hasChildren());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.hasChildren());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.hasChildren());	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
307	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Preconditions.checkState(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName());    Preconditions.checkState(lhs.isQualifiedName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
308	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Preconditions.checkState(lhs.isQualifiedName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Preconditions.checkState(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    Preconditions.checkState(lhs.isQualifiedName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
309	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName());    if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
310	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
311	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  true;  }  [CE]  cannot  find  symbol  collapsed  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  true;  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  true;  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	19	None	add
312	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  NodeTraversal.traverse(compiler,  lhs,  collapses);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    NodeTraversal.traverse(compiler,  lhs,  collapses);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Collapse>)	19	None	add
313	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  false;  }  [CE]  cannot  find  symbol  collapsed  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  false;  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    if(lhs.isQualifiedName())  {  Preconditions.checkState(lhs.isQualifiedName());  }  else  {  collapsed  =  false;  }	  	non-compiled	[CE]  cannot  find  symbol  collapsed	19	None	add
314	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
315	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  lhs.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  lhs.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  lhs.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
316	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  Preconditions.checkState(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  assign.getFirstChild();  Preconditions.checkState(lhs.isQualifiedName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
317	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  Preconditions.checkState(lhs.isQualifiedName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  Node  c  =  assign.getFirstChild();  Preconditions.checkState(lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    Node  c  =  assign.getFirstChild();  Preconditions.checkState(lhs.isQualifiedName());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	19	1	add
318	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  assign.getFirstChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
319	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
320	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  n.getFirstChild();  Preconditions.checkState(lhs.isVar());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  n.getFirstChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  n.getFirstChild();  Preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
321	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  preconditions.checkState(lhs.isVar());  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getFirstChild();  preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  assign.getFirstChild();  preconditions.checkState(lhs.isVar());	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
322	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  applyCollapses()  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  lhs  =  assign.getLastChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  lhs  =  assign.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  applyCollapses()	4	None	add
323	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(assign.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(assign.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	12	2	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	19	None	add
326	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	19	None	add
327	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	19	None	add
328	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	19	None	add
329	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isQualifiedName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isQualifiedName());    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b	  	non-compiled	[CE]  ';'  expected	19	None	add
330	[BUG]  [BUGGY]  Preconditions.checkState(assign.isDefined());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(assign.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  b.isDefined());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isDefined()  ||  b.isDefined());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isDefined()  ||  b.isDefined());	  Preconditions.checkState(lhs.isDefined());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
332	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b=1	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  not  a  statement	20	None	replace
333	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  not  a  statement	20	None	replace
334	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  =  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  =  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  =  function  f(a)  {  var  b=1	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  not  a  statement	20	None	replace
335	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  ==  Result:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  ==  Result:  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  ==  Result:  function  f(a)  {  var  b=1	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  not  a  statement	20	None	replace
336	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  Preconditions.checkState(lhs.isQualifiedName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	if(lhs.getType()  ==  Token.NAME)  {  Preconditions.checkState(lhs.isQualifiedName());  }	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
337	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  Preconditions.checkState(lhs.isQualifiedName());  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  Preconditions.checkState(lhs.isQualifiedName());  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	if(lhs.getType()  ==  Token.NAME)  {  Preconditions.checkState(lhs.isQualifiedName());  }	  Preconditions.checkState(lhs.isQualifiedName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	20	1	replace
338	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c!=  Result:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c!=  Result:  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c!=  Result:  function  f(a)  {  var  b=1	  Preconditions.checkState(lhs.isQualifiedName());    	non-compiled	[CE]  not  a  statement	20	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    Result:  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  not  a  statement	15	None	add
340	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	15	None	add
341	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	15	None	add
342	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	15	None	add
343	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isName());  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=    null    &&    lhs.isName());    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	15	None	add
344	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
345	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(lhs.getType()  ==  Token.BLOCK);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkArgument(lhs.getType()  ==  Token.BLOCK);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkArgument(lhs.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  IllegalStateException  	17	2	add
346	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	17	2	add
347	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.getFirstChild());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	17	2	add
348	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	17	2	add
349	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	17	2	add
350	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.detachFromParent());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	17	2	add
351	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.detachFromParent());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.detachFromParent());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    Preconditions.checkState(lhs.getType()  ==  Token.BLOCK);  var.addChildToBack(lhs.detachFromParent());	  	compilable	  [FE]  IllegalStateException  	17	2	add
352	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  preconditions.checkState(lhs.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  preconditions  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  preconditions.checkState(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  preconditions.checkState(lhs.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	21	None	add
353	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	21	2	add
354	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	21	2	add
355	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
356	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
357	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
358	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  IllegalStateException  	21	2	add
359	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  IllegalStateException  	21	2	add
360	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent!=  null);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent!=  null);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent!=  null);	  	compilable	  [FE]  IllegalStateException  	21	2	add
361	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	21	2	add
362	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  var.addChildToBack(lhs.getFirstChild());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    Preconditions.checkState(lhs.getType()  ==  Token.CATCH);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	21	2	add
363	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.SCRIPT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.SCRIPT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.SCRIPT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
365	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.CATCH);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.BLOCK  ||  lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.BLOCK);    	compilable	  [FE]  IllegalStateException  	18	2	replace
367	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	13	2	add
368	[BUG]  [BUGGY]      var  =  lhs.getNext();  [FE]  IllegalStateException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var  =  lhs.getNext();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var  =  lhs.getNext();	  	compilable	  [FE]  IllegalStateException  	13	2	add
369	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var  =  lhs.removeFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	        var  =  lhs.removeFirstChild();	  	compilable	  [FE]  NullPointerException  	13	2	add
370	[BUG]  [BUGGY]      var  =  lhs.removeFirstChild();  [FE]  NullPointerException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      var  =  lhs.removeFirstChild();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        var  =  lhs.removeFirstChild();	  	compilable	  [FE]  NullPointerException  	13	2	add
371	[BUG]  [BUGGY]      c  =  function  f(a)  {  b=1  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      c  =  function  f(a)  {  b=1  }  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        c  =  function  f(a)  {  b=1  }	  	non-compiled	[CE]  ';'  expected	13	None	add
372	[BUG]  [BUGGY]      c  =  function  f(a)  {  var  b=1  [Delete]  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]      c  =  function  f(a)  {  var  b=1  [Delete]  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	        c  =  function  f(a)  {  var  b=1  [Delete]	  	non-compiled	[CE]  ';'  expected	13	None	add
373	[BUG]  [BUGGY]  Preconditions.checkState(assign.isNode());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(assign.isNode());	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isNode(),  b);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isNode(),  b);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isNode(),  b);	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(lhs.equals(assign.getNode()));  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.equals(assign.getNode()));  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.equals(assign.getNode()));	  Preconditions.checkState(lhs.isNode());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
376	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(assign.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(assign.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	compilable	  [FE]  IllegalStateException  	7	2	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  b);  [CE]  cannot  find  symbol  b  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR,  b);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.VAR,  b);	  Preconditions.checkState(lhs.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  b	7	None	replace
379	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
380	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [FE]  IllegalArgumentException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.getType()  ==  Token.CATCH);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
381	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()  ==  Token.CATCH  ||  lhs.getType()  ==  Token.VAR);	  Preconditions.checkState(lhs.getType()    ==    Token.CATCH);    	compilable	  [FE]  IllegalStateException  	22	2	replace
383	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs!=  null  &&  lhs.isQualifiedName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isQualifiedName());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isQualifiedName());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isQualifiedName());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1  	16	1	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isNamed());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isNamed());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isNamed());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isExtern());  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs!=  null  &&  lhs.isExtern());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs!=  null  &&  lhs.isExtern());	  Preconditions.checkState(lhs!=    null    &&    lhs.isName());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
387	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  >>  Result:  function  f(a)  {  var  b=1  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  >>  Result:  function  f(a)  {  var  b=1  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  >>  Result:  function  f(a)  {  var  b=1	  Preconditions.checkState(lhs.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	2	None	replace
388	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
389	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(lhs.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  IllegalStateException  	11	2	add
390	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	11	2	add
391	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	11	2	add
392	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	11	2	add
393	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  var.addChildToBack(lhs.getFirstChild());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.FUNCTION);    Preconditions.checkState(lhs.getType()  ==  Token.FUNCTION);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	11	2	add
394	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(assign.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalStateException  	10	2	replace
396	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalArgumentException  	10	2	replace
397	[BUG]  [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  IllegalArgumentException  	10	2	replace
398	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
399	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(lhs.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
400	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
401	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  IllegalStateException  	9	2	add
402	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	9	2	add
403	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	9	2	add
404	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  n.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  n.getParent();	  	compilable	  [FE]  IllegalStateException  	9	2	add
405	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  n.getParent();  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  n.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  n.getParent();	  	compilable	  [FE]  IllegalStateException  	9	2	add
406	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	9	2	add
407	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  var.addChildToBack(lhs.getFirstChild());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(lhs.getType()  ==  Token.EXPR_RESULT);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	9	2	add
408	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	1	None	add
409	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  	  	non-compiled	[CE]  ';'  expected	1	None	add
410	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	1	None	add
411	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var	  	non-compiled	[CE]  ';'  expected	1	None	add
412	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1!=  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b	  	non-compiled	[CE]  ';'  expected	1	None	add
413	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(a){var  b=1;a=2;var  c}  Result:  function  f(a){var  b=1    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.NAME);    var  c  =  function  f(a)  {  var  b=1  >>  junit.framework.AssertionFailedError:  Expected:  function  f(a)  {  var  b=1;a=2;var  c  }  Result:  function  f(a)  {  var  b	  	non-compiled	[CE]  ';'  expected	1	None	add
414	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
415	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
416	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getNext();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  c  =  lhs.getNext();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
417	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getNext();  Preconditions.checkState(lhs.isVar());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  c  =  lhs.getNext();  Preconditions.checkState(lhs.isVar());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  c  =  lhs.getNext();  Preconditions.checkState(lhs.isVar());	  	compilable	  [FE]  IllegalStateException  	4	2	add
418	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	4	2	add
419	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();	  	compilable	  [FE]  IllegalStateException  	4	2	add
420	[BUG]  [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isNode());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.isVar());  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isNode());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.isVar());    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.isNode());	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
421	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);  preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	6	None	add
422	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
423	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkArgument(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
424	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
425	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  parent  =  lhs.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
426	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	6	2	add
427	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  var.addChildToBack(lhs.getFirstChild());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  var.addChildToBack(lhs.getFirstChild());  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Preconditions.checkState(lhs.getType()  ==  Token.VAR);  var.addChildToBack(lhs.getFirstChild());	  	compilable	  [FE]  IllegalStateException  	6	2	add
428	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
429	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    if  (n.isVar())  {  while(n.hasChildren())  {  var.addChildToBack(n.removeFirstChild());  }  }  else  {  Node  assign  =  n.getFirstChild();  Node  lhs  =  assign.getFirstChild();    [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);  [BUGGY]    Node  rhs  =  assign.getLastChild();  lhs.addChildToBack(rhs.detachFromParent());  var.addChildToBack(lhs.detachFromParent());  redeclaration  =  true;  }  [CLASS]  CollapseVariableDeclarations  Collapse  GatherCollapses  [METHOD]  applyCollapses  [RETURN_TYPE]  void  [VARIABLES]  Collapse  collapse  AbstractCompiler  compiler  Set  blacklistedVars  nodesToCollapse  boolean  redeclaration  Node  assign  child  endNode  externs  lhs  n  next  parent  rhs  root  startNode  var  varNode  List  collapses  JSDocInfo  info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	Preconditions.checkState(lhs.getType()    ==    Token.VAR);    Node  c  =  lhs.getFirstChild();  Preconditions.checkState(lhs.getType()  ==  Token.VAR);	  	compilable	  [FE]  IllegalStateException  	6	2	add
