increase failing tests,193,add, [FE] StackOverflowError testAvailableLocaleSet,,  availableLocaleList();
increase failing tests,193,add, [FE] StackOverflowError testAvailableLocaleSet,,  List < Locale> list = availableLocaleList();
increase failing tests,97,replace, [FE] IllegalArgumentException testLang328,final char ch1 = str.charAt(1); ,final char ch1 = str.charAt(2);
increase failing tests,97,replace, [FE] IllegalArgumentException testLang328,final char ch1 = str.charAt(1); ,final char ch1 = str.charAt(3);
increase failing tests,96,replace, [FE] IllegalArgumentException testLang328,final char ch0 = str.charAt(0); ,final char ch0 = str.charAt(2);
increase failing tests,96,replace, [FE] StringIndexOutOfBoundsException testLang328,final char ch0 = str.charAt(0); ,final char ch0 = str.charAt(len);
increase failing tests,98,add, [FE] IllegalArgumentException testLang865,,  final char ch2 = str.charAt(2);
increase failing tests,99,replace, [FE] IllegalArgumentException testLang865,throw new IllegalArgumentException("Invalid locale format: " + str); , 
increase failing tests,93,replace, [FE] IllegalArgumentException testLang865,if (len < 2) { ,if(len < 2 && len < str.length()) {
increase failing tests,93,replace, [FE] IllegalArgumentException testLang865,if (len < 2) { ,if(len < 2 && len!= str.length()) {
increase failing tests,98,replace, [FE] IllegalArgumentException testLang328,if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { ,if(!Character.isUpperCase(ch0)||!Character.isLowerCase(ch1)) {
increase failing tests,98,replace, [FE] IllegalArgumentException testLang865,if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { ,if(!Character.isUpperCase(ch0)&&!Character.isLowerCase(ch1)) {
increase failing tests,98,replace, [FE] IllegalArgumentException testLang328,if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { ,if(!Character.isUpperCase(ch0)||!Character.isUpperCase(ch1)) {
increase failing tests,92,replace, [FE] IllegalArgumentException testLang328,final int len = str.length(); ,final int len = str.length() - 2;
increase failing tests,92,replace, [FE] IllegalArgumentException testLang328,final int len = str.length(); ,final int len = str.length() - 1;
increase failing tests,92,replace, [FE] IllegalArgumentException testLang865,final int len = str.length(); ,final int len = str.length() + 1;
increase failing tests,193,replace, [FE] StackOverflowError testAvailableLocaleSet,return SyncAvoid.AVAILABLE_LOCALE_LIST; ,return(List < Locale>)availableLocaleList();
increase failing tests,97,replace, [FE] IllegalArgumentException testLang328,final char ch1 = str.charAt(1); ,final char ch1 = str.charAt(len - 1);
increase failing tests,97,replace, [FE] StringIndexOutOfBoundsException testLang328,final char ch1 = str.charAt(1); ,final char ch1 = str.charAt(len);
increase failing tests,98,replace, [FE] IllegalArgumentException testLang328,if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { ,if(!Character.isLowerCase(ch0)||!Character.isUpperCase(ch1)) {
increase failing tests,93,replace, [FE] IllegalArgumentException testLang328,if (len < 2) { ,if(len!= 2 && len!= 4 && len < 7) {
