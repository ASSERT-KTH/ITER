bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  format.isEscaped())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
2	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
6	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  value.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  value.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  value.isEmpty())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
7	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  format.isEscapes())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  format.isEscapes())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  format.isEscapes())  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
8	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
9	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
11	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  format.equals(len))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  format.equals(len))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  format.equals(len))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
12	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
13	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
14	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
15	[BUG]  [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
16	[BUG]  [BUGGY]      printAndEscape(object,  offset,  len);  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      printAndEscape(object,  offset,  len);  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        printAndEscape(object,  offset,  len);	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
17	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getName());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getName());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getName());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	        if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }	  	compilable	  [FE]  AssertionError  	6	2	add
19	[BUG]  [BUGGY]      if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }	  	compilable	  [FE]  AssertionError  	6	2	add
20	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	  	compilable	  [FE]  AssertionError  	6	2	add
22	[BUG]  [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	  	compilable	  [FE]  AssertionError  	6	2	add
23	[BUG]  [BUGGY]  }  else  if(!format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isEmpty())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
24	[BUG]  [BUGGY]  }  else  if(!format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isEscaped())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
25	[BUG]  [BUGGY]  }  else  if(!format.isEscape())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isEscape())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
26	[BUG]  [BUGGY]  }  else  if(!format.isDelimiter())  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isDelimiter())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isDelimiter())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
27	[BUG]  [BUGGY]  }  else  if(!format.isRecording())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isRecording())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isRecording())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
28	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isEscaped())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
30	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
31	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
32	[BUG]  [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
33	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isEmpty())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
34	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  format.isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
35	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  value.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  value.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  value.isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
36	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
37	[BUG]  [BUGGY]  }  else  if(value.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(value.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(value.isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
38	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
39	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {	  	compilable	  [FE]  AssertionError  	4	1	add
41	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {	  	compilable	  [FE]  AssertionError  	4	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping()  ||!format.isEscaping())  {	  	compilable	  [FE]  AssertionError  	4	1	add
43	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||!format.isEscaping())  {  [FE]  AssertionError  [FE]      NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping()  ||!format.isEscaping())  {	  	compilable	  [FE]  AssertionError  	4	1	add
44	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  out.append(object,  offset,  len);  [CE]  no  suitable  method  found  for  append(Object,int,int)  [FE]        NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  out.append(object,  offset,  len);  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  out.append(object,  offset,  len);	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,int)	4	None	add
45	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
46	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||!format.getDelimiter())  {  [CE]  bad  operand  type  char  for  unary  operator  '!'  [FE]            NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||!format.getDelimiter())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping()  ||!format.getDelimiter())  {	  	non-compiled	[CE]  bad  operand  type  char  for  unary  operator  '!'	4	None	add
47	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||  value.equals(newRecord))  {  [CE]  no  suitable  method  found  for  append(Object,int,int)  [FE]              NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||  value.equals(newRecord))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping()  ||  value.equals(newRecord))  {	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,int)	4	None	add
48	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||  format.isEscaping())  {  [CE]  no  suitable  method  found  for  append(Object,int,int)  [FE]                NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping()  ||  format.isEscaping())  {	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,int)	4	None	add
49	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<a  [FE]    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      out.append(format.getDelimiter());  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	        out.append(format.getDelimiter());	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a  	6	1	add
50	[BUG]  [BUGGY]      out.append(format.getDelimiter());  [FE]  org.junit.ComparisonFailure:  expected:<a  [FE]    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      out.append(format.getDelimiter());  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        out.append(format.getDelimiter());	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a  	6	1	add
51	[BUG]  [BUGGY]      if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
52	[BUG]  [BUGGY]      if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [CE]  no  suitable  method  found  for  append(Object)  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object)	6	None	add
53	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append( "n ");  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append( "n ");  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	6	1	add
54	[BUG]  [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append( "n ");  }  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append( "n ");  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append( "n ");  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	6	1	add
55	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append('n');  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append('n');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	6	1	add
56	[BUG]  [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append('n');  }  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append('n');  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append('n');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	6	1	add
57	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  if(!format.isEscaping())  {  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  if(!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  if(!format.isEscaping())  {	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
58	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
59	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
60	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
61	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]            NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  if(!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	add	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  if(!format.isEscaping())  {	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	4	1	add
62	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  if(!format.isEscaping())  {  [FE]  org.junit.ComparisonFailure:  expected:<a[  [FE]            NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  if(!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  if(!format.isEscaping())  {	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<a[  	4	1	add
63	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
64	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
65	[BUG]  [BUGGY]  }  else  if(format.escapes())  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.escapes())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.escapes())  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
66	[BUG]  [BUGGY]  }  else  if(format.isEscapes()  ||  format.isDelimiter())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscapes()  ||  format.isDelimiter())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscapes()  ||  format.isDelimiter())  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isDelimiter())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isDelimiter())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isDelimiter())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
68	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isQuoting())  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isQuoting())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isQuoting())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
69	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(value))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(value))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.equals(value))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
70	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
71	[BUG]  [BUGGY]  }  else  if(format.escape())  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.escape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.escape())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
72	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.getDelimiter().isEmpty())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.getDelimiter().isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  format.getDelimiter().isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
73	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.equals(value))  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.equals(value))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  format.equals(value))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
74	[BUG]  [BUGGY]  }  else  if(format.equals(value))  {  [CE]  no  suitable  method  found  for  append(Object,int,int,int)  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.equals(value))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.equals(value))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,int,int)	3	None	replace
75	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||!format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||!format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||!format.isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
76	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
77	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
78	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getName());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getName());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getName());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
79	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getFormat());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getFormat());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getFormat());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
80	[BUG]  [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]      if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	        if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	6	None	add
81	[BUG]  [BUGGY]  }  else  if(format.escapeEscaped())  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.escapeEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.escapeEscaped())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
82	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscaped()  ||  format.isEmpty())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
83	[BUG]  [BUGGY]  }  else  if(value.isEscaped())  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(value.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(value.isEscaped())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
84	[BUG]  [BUGGY]  }  else  if(format.equals(object.getEscaped()))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.equals(object.getEscaped()))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.equals(object.getEscaped()))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
86	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  out.append(object,  offset,  offset  +  len);  [CE]  no  suitable  method  found  for  append(Object,int,int)  [FE]      NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  }  else  if(!format.isEscaping())  {  out.append(object,  offset,  offset  +  len);  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    }  else  if(!format.isEscaping())  {  out.append(object,  offset,  offset  +  len);	  	non-compiled	[CE]  no  suitable  method  found  for  append(Object,int,int)	4	None	add
87	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
88	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(value,  offset  +  len);  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
89	[BUG]  [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }  [CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;  [FE]            NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping())  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}    else    if(!format.isEscaping())    {    if(!format.isEscaping())  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getEscaping());  }	  	non-compiled	[CE]  method  printAndEscape  in  class  CSVPrinter  cannot  be  applied  to  given  types;	4	None	add
90	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  object.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  object.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  object.isEmpty())  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
91	[BUG]  [BUGGY]  }  else  if(format.equals(object))  {  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.equals(object))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.equals(object))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
92	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.equals(object))  {  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.equals(object))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEmpty()  ||  format.equals(object))  {	  }    else    if(format.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
93	[BUG]  [BUGGY]  }  else  if(!newRecord)  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!newRecord)  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!newRecord)  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
94	[BUG]  [BUGGY]  }  else  if(!format.isEscapes())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscapes())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(!format.isEscapes())  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
95	[BUG]  [BUGGY]  }  else  if(format.equals(len))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.equals(len))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.equals(len))  {	  }    else    if(format.isEscapes())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
96	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isEscaping())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
97	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(len))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(len))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.equals(len))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
98	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscape())  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	1.0	117	117	1	replace	}  else  if(format.isEscape()  ||  format.isEscape())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
