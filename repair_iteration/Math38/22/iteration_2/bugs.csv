bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	compilable	  [FE]  OutOfRangeException  	1	13	add
2	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	compilable	  [FE]  OutOfRangeException  	1	13	add
3	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]      OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interfacePoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	1	None	add
4	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  Stepa  [FE]        OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    Stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	1	None	add
5	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm));  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm));  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm));	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	6	None	replace
7	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]      OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	6	None	replace
8	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]        OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	6	None	replace
9	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference.getEntry(nfm):  null;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference.getEntry(nfm):  null;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference.getEntry(nfm):  null;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference.getEntry(nfm):    null;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	21	None	replace
10	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	11	1	add
11	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	11	1	add
12	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  originalTrustRegionRadius;  [CE]  cannot  find  symbol  originalTrustRegionRadius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  originalTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    stepa  =  originalTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  originalTrustRegionRadius	11	None	add
13	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegius;	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	11	None	add
14	[BUG]  [BUGGY]  nfm  =  lowerDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfm  =  lowerDifference.getEntry(nfx);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  lowerDifference.getEntry(nfx);	      nfm    =    lowerDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	20	None	replace
15	[BUG]  [BUGGY]      double[]  lowerBound  =  upperDifference.getEntry(nfxm);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]    AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      double[]  lowerBound  =  upperDifference.getEntry(nfxm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        double[]  lowerBound  =  upperDifference.getEntry(nfxm);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	8	None	add
16	[BUG]  [BUGGY]      nfm  =  upperDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      nfm  =  upperDifference.getEntry(nfxm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        nfm  =  upperDifference.getEntry(nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	8	None	add
17	[BUG]  [BUGGY]      nfm  =  lowerDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      nfm  =  lowerDifference.getEntry(nfxm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        nfm  =  lowerDifference.getEntry(nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	8	None	add
18	[BUG]  [BUGGY]      double[]  lowerBound  =  upperDifference.getEntry(nfm);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]          AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      double[]  lowerBound  =  upperDifference.getEntry(nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        double[]  lowerBound  =  upperDifference.getEntry(nfm);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	8	None	add
19	[BUG]  [BUGGY]  nfx  =  topDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfx  =  topDifference.getEntry(nfx);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  topDifference.getEntry(nfx);	      nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	13	None	replace
20	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	compilable	  [FE]  OutOfRangeException  	2	13	replace
21	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	compilable	  [FE]  OutOfRangeException  	2	13	replace
22	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));	      nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	24	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfm;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  nfm;	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	11	replace
24	[BUG]  [BUGGY]  stepa  =  nfm;  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfm;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm;	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	11	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	12	replace
26	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	12	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	10	replace
28	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	10	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	10	replace
30	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	10	replace
31	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
32	[BUG]  [BUGGY]  stepa  =  nfx.getEntry(initialTrustRegionRadius,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfx.getEntry(initialTrustRegionRadius,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfx.getEntry(initialTrustRegionRadius,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
33	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  initialTrustRegionRadius);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfm.getEntry(nfx,  initialTrustRegionRadius);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  initialTrustRegionRadius);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
34	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfx);  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfx);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
35	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	      nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	22	None	replace
36	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfx);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	4	None	replace
37	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	compilable	  [FE]  OutOfRangeException  	3	13	add
38	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	compilable	  [FE]  OutOfRangeException  	3	13	add
39	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interfacePoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  interfacePoints  [FE]      OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interfacePoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interfacePoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	3	None	add
40	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  Stepa  [FE]        OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    Stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	3	None	add
41	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx));  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx));  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx));	  	non-compiled	[CE]  ';'  expected	3	None	add
42	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	      nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	23	None	replace
43	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	5	13	add
44	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	5	13	add
45	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  interfacePoints  [FE]      OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interfacePoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	5	None	add
46	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  Stepa  [FE]        OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	5	None	add
47	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm));  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm));  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm));	  	non-compiled	[CE]  ';'  expected	5	None	add
48	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfm);	  stepa    =    interfacePoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	26	None	replace
49	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfm,  nfm);	  stepa    =    interfacePoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	26	None	replace
50	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference  :  lowerDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference  :  lowerDifference;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference  :  lowerDifference;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference    :    upperBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	17	None	replace
51	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference    :    lowerBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	19	None	replace
52	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	      nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	25	None	replace
53	[BUG]  [BUGGY]  nfm  =  upperDifference.getEntry(nfmm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfm  =  upperDifference.getEntry(nfmm);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  upperDifference.getEntry(nfmm);	      nfm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	18	None	replace
54	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfx,  nfm);	  stepa    =    nfm.getEntry(nfx,    interpolationPoints);    	compilable	  [FE]  OutOfRangeException  	7	13	replace
55	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [FE]  OutOfRangeException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfx,  nfm);	  stepa    =    nfm.getEntry(nfx,    interpolationPoints);    	compilable	  [FE]  OutOfRangeException  	7	13	replace
56	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfx,  n);	  stepa    =    nfm.getEntry(nfx,    interpolationPoints);    	compilable	  [FE]  OutOfRangeException  	7	13	replace
57	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  [FE]  OutOfRangeException  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfx,  n);	  stepa    =    nfm.getEntry(nfx,    interpolationPoints);    	compilable	  [FE]  OutOfRangeException  	7	13	replace
58	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interfacePoints.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfx,  nfm);	  stepa    =    nfm.getEntry(nfx,    interpolationPoints);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	7	None	replace
59	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	3	None	add
60	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  Stepa  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  Stepa  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  Stepa  =  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    Stepa  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  Stepa	11	None	add
61	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  phasea  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  phasea  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  phasea  =  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    phasea  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  phasea	11	None	add
62	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius.;  [CE]  <identifier>  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius.;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius.;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
63	[BUG]  [BUGGY]  double  lowerDifference  =  upperDifference.getEntry(nfm);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  double  lowerDifference  =  upperDifference.getEntry(nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  lowerDifference  =  upperDifference.getEntry(nfm);	      	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
64	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfxm  =  upperDifference.getEntry(nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  upperDifference.getEntry(nfm);	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	9	None	replace
65	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    nfm  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	1	None	add
66	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  nfm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfx,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	16	None	replace
67	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  nfm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfx,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	16	None	replace
68	[BUG]  [BUGGY]  stepa  =  topDifference.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  topDifference  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  topDifference.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  topDifference.getEntry(nfx,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  topDifference	16	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	13	replace
70	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	      stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  AssertionError  	12	13	replace
71	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);  [CE]  double  cannot  be  dereferenced  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
72	[BUG]  [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius.getEntry(nfm,  nfm);	  stepa    =    interfacePoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	26	None	replace
73	[BUG]  [BUGGY]  nfm  =  topDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfm  =  topDifference.getEntry(nfm);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  topDifference.getEntry(nfm);	      nfm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	18	None	replace
74	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	      nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	22	None	replace
75	[BUG]  [BUGGY]  Nfx  =  upperDifference.getEntry(nfx);  [CE]  cannot  find  symbol  Nfx  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  Nfx  =  upperDifference.getEntry(nfx);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Nfx  =  upperDifference.getEntry(nfx);	      nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  find  symbol  Nfx	13	None	replace
76	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);  [CE]  double  cannot  be  dereferenced  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
77	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  lowerBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  lowerBound;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  lowerBound;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference    :    lowerBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	19	None	replace
78	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperBound;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperBound;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference    :    upperBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	17	None	replace
79	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    nfm  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	5	None	add
80	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  StepA  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  StepA  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  StepA  =  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    StepA  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  StepA	11	None	add
81	[BUG]  [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  startTrustRegionRadius;  [CE]  cannot  find  symbol  startTrustRegionRadius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]      stepa  =  initialTrustRegionRadius;  stepa  =  startTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	        stepa    =    initialTrustRegionRadius;    stepa  =  startTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  startTrustRegionRadius	11	None	add
82	[BUG]  [BUGGY]  stepa  =  firstDifference.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  firstDifference  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  firstDifference.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  firstDifference.getEntry(nfx,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  firstDifference	16	None	replace
83	[BUG]  [BUGGY]  stepa  =  nextDifference.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  nextDifference  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  nextDifference.getEntry(nfx,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nextDifference.getEntry(nfx,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  nextDifference	16	None	replace
84	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  internalTrustRegionPoints  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfmm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  find  symbol  internalTrustRegionPoints	5	None	add
85	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));	      nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	24	None	replace
86	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  internalTrustRegionPoints  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfx);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  internalTrustRegionPoints	3	None	add
87	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  min(double)  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius);	      stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	12	None	replace
88	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  max(double)  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius);  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius);	      stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	12	None	replace
89	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius;  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius;	      stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  ')'  expected	12	None	replace
90	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  upperDifference.getEntry(nfm):  null;  [CE]  ';'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  upperDifference.getEntry(nfm):  null;  [BUGGY]    stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  upperDifference.getEntry(nfm):  null;	      BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference.getEntry(nfm):    null;    	non-compiled	[CE]  ';'  expected	21	None	replace
91	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  internalTrustRegionPoints  [FE]    OutOfRangeException    [CONTEXT]    if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {    [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfm);  [BUGGY]    stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  internalTrustRegionPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  internalTrustRegionPoints	1	None	add
