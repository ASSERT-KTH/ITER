bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  Stepa  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  Stepa	46	None	replace
2	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  Stepa  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  Stepa	46	None	replace
3	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    interfacePoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
4	[BUG]  [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	2	None	replace
5	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  upperDifference);  [CE]  int  cannot  be  dereferenced  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  upperDifference);	  stepa    =    upperDifference.getEntry(nfm,    nfx);    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
6	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfmm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfmm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfmm,  stepa);	  stepa    =    upperDifference.getEntry(nfm,    nfx);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	36	None	replace
7	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfx,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfx,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfx,  stepa);	  stepa    =    upperDifference.getEntry(nfm,    nfx);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	36	None	replace
8	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  n);  [CE]  int  cannot  be  dereferenced  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(initialTrustRegionRadius,  n);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
9	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    stepa  =  interpolationPoints.getEntry(nfx,  nfm);	  	compilable	  [FE]  OutOfRangeException  	54	13	add
10	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    stepa  =  interpolationPoints.getEntry(nfx,  nfm);	  	compilable	  [FE]  OutOfRangeException  	54	13	add
11	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interfacePoints.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interfacePoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    stepa  =  interfacePoints.getEntry(nfx,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	54	None	add
12	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  Stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  Stepa  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  Stepa  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    Stepa  =  interpolationPoints.getEntry(nfx,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	54	None	add
13	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interpolationPoints.getEntry(nfx,  nfm));  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  interpolationPoints.getEntry(nfx,  nfm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    stepa  =  interpolationPoints.getEntry(nfx,  nfm));	  	non-compiled	[CE]  ';'  expected	54	None	add
14	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfm,  nfm,  stepa);	  stepa    =    lowerDifference.getEntry(nfm,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	49	None	replace
15	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(lowerDifference,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(lowerDifference,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(lowerDifference,  nfm);	  stepa    =    lowerDifference.getEntry(nfm,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	49	None	replace
16	[BUG]  [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	38	None	replace
17	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperDifference;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  lowerDifference  :  upperDifference;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference    :    upperDifference;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	51	None	replace
18	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	74	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfx,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	11	replace
20	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfx,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	11	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	13	replace
22	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	13	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	10	replace
24	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	10	replace
25	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference    :    lowerDifference;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	50	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	87	10	replace
27	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm);  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	87	10	replace
28	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfm,  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	87	1	replace
29	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  initialTrustRegionRadius);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfm,  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	87	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfxm,  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	87	13	replace
31	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  initialTrustRegionRadius);  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfxm,  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	87	13	replace
32	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfm);  [CE]  no  suitable  method  found  for  min(double)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfm);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	87	None	replace
33	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  interfacePoints  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    interfacePoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	39	None	replace
34	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfx);  [CE]  int  cannot  be  dereferenced  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    interfacePoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
35	[BUG]  [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    interfacePoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	39	None	replace
36	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
37	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
38	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
39	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
40	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
41	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
42	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	27	None	add
43	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	27	None	add
44	[BUG]  [BUGGY]  nfm  =  topDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  topDifference.getEntry(nfx);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  topDifference.getEntry(nfx);	  nfm    =    topDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	73	None	replace
45	[BUG]  [BUGGY]  double  lowerDifference  =  nfm.getEntry(upperDifference);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  lowerDifference  =  nfm.getEntry(upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  lowerDifference  =  nfm.getEntry(upperDifference);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
46	[BUG]  [BUGGY]  double  lowerDifference  =  upperDifference.getEntry(nfxm);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  lowerDifference  =  upperDifference.getEntry(nfxm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  lowerDifference  =  upperDifference.getEntry(nfxm);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
47	[BUG]  [BUGGY]  double  stepb  =  upperDifference.getEntry(nfm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  stepb  =  upperDifference.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  stepb  =  upperDifference.getEntry(nfm);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	63	None	replace
48	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfm,  stepa);	  stepa    =    upperDifference.getEntry(nfm,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	48	None	replace
49	[BUG]  [BUGGY]  stepa  =  initialTrustRegius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius;	          stepa    =    initialTrustRegionRadius;    stepa    =    startTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	81	None	replace
50	[BUG]  [BUGGY]  stepa  =  lowerDifference;  [CE]  incompatible  types  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference;	          stepa    =    initialTrustRegionRadius;    stepa    =    startTrustRegionRadius;    	non-compiled	[CE]  incompatible  types	81	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfxm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  lowerDifference.getEntry(nfxm);	          stepa    =    initialTrustRegionRadius;    stepa    =    startTrustRegionRadius;    	compilable	  [FE]  AssertionError  	81	13	replace
52	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfxm);  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfxm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfxm);	          stepa    =    initialTrustRegionRadius;    stepa    =    startTrustRegionRadius;    	compilable	  [FE]  AssertionError  	81	13	replace
53	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfx,    n);    stepa  =  interpolationPoints.getEntry(nfx,  n);	  	compilable	  [FE]  OutOfRangeException  	56	13	add
54	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interpolationPoints.getEntry(nfx,  n);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    stepa  =  interpolationPoints.getEntry(nfx,  n);	  	compilable	  [FE]  OutOfRangeException  	56	13	add
55	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interfacePoints.getEntry(nfx,  n);  [CE]  cannot  find  symbol  interfacePoints  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interfacePoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    stepa  =  interfacePoints.getEntry(nfx,  n);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	56	None	add
56	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interpolationPoints.getEntry(nfx,  n));  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  interpolationPoints.getEntry(nfx,  n));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    stepa  =  interpolationPoints.getEntry(nfx,  n));	  	non-compiled	[CE]  ';'  expected	56	None	add
57	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  Stepa  =  interpolationPoints.getEntry(nfx,  n);  [CE]  cannot  find  symbol  Stepa  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  Stepa  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    Stepa  =  interpolationPoints.getEntry(nfx,  n);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	56	None	add
58	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  topDifference.getEntry(nfm):  null;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  topDifference.getEntry(nfm):  null;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  topDifference.getEntry(nfm):  null;	  BOBYQAOptimizer$PathIsExploredException    =    nfm    isMinimize?    upperDifference.getEntry(nfm):    null;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	90	None	replace
59	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	35	None	replace
60	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerDifference;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerDifference;	  BOBYQAOptimizer$PathIsExploredException    =    lowerDifference?    lowerDifference    :    upperBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	78	None	replace
61	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  upperDifference?  lowerDifference  :  lowerBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  upperDifference?  lowerDifference  :  lowerBound;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  upperDifference?  lowerDifference  :  lowerBound;	  BOBYQAOptimizer$PathIsExploredException    =    lowerDifference?    lowerDifference    :    upperBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	78	None	replace
62	[BUG]  [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius.getEntry(nfx,  nfm);	  stepa    =    firstDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	82	None	replace
63	[BUG]  [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfm,  nfm);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]              AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  lowerBound  =  upperDifference.getEntry(nfm,  nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
64	[BUG]  [BUGGY]  double[]  stepb  =  upperDifference.getEntry(nfm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]                AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepb  =  upperDifference.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepb  =  upperDifference.getEntry(nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
65	[BUG]  [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfm,  stepa);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]                  AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  lowerBound  =  upperDifference.getEntry(nfm,  stepa);	          double[]    lowerBound    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	11	replace
67	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm);  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	11	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfxm,  initialTrustRegionRadius);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	10	replace
69	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  initialTrustRegionRadius);  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfxm,  initialTrustRegionRadius);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	10	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfm,  initialTrustRegionRadius);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	11	replace
71	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  initialTrustRegionRadius);  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfm,  initialTrustRegionRadius);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	88	11	replace
72	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfm);  [CE]  no  suitable  method  found  for  max(double)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfm);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
73	[BUG]  [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  Stepa  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  Stepa	4	None	replace
74	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  Stepa  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  n);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  Stepa	4	None	replace
75	[BUG]  [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  Stepa  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    Stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  Stepa	40	None	replace
76	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  Stepa  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    Stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  Stepa	40	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfx,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
78	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfx,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
80	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
82	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
83	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  n);  [CE]  int  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  n);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
84	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfx,  n);  [CE]  double  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfx,  n);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
85	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  getEntry(int,double)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  initialTrustRegionRadius);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfx,  initialTrustRegionRadius);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,double)	33	None	replace
86	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfx);  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfx);	  stepa    =    nfx.getEntry(initialTrustRegionRadius,    nfm);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
87	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	43	13	add
88	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	43	13	add
89	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	43	13	add
90	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	compilable	  [FE]  OutOfRangeException  	43	13	add
91	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	43	None	add
92	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  interfacePoints  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interfacePoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	43	None	add
93	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  n);  [CE]  double  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfm,  n);	  stepa    =    nfm.getEntry(initialTrustRegionRadius,    nfm);    	non-compiled	[CE]  double  cannot  be  dereferenced	31	None	replace
94	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  upperDifference);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfx,  upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  upperDifference);	  stepa    =    upperDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
95	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  nfm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  nfm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfx,  nfm,  stepa);	  stepa    =    upperDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	66	None	replace
96	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm));  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm));	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    interpolationPoints.getEntry(nfm,    nfm));    	non-compiled	[CE]  ';'  expected	5	None	replace
97	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm));  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfm));	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    interpolationPoints.getEntry(nfm,    nfm));    	non-compiled	[CE]  ';'  expected	5	None	replace
98	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfmm);  [CE]  int  cannot  be  dereferenced  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(initialTrustRegionRadius,  nfmm);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfmm);    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
99	[BUG]  [BUGGY]  stepa  =  nfmm.getEntry(initialTrustRegionRadius,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfmm.getEntry(initialTrustRegionRadius,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfmm.getEntry(initialTrustRegionRadius,  nfm);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfmm);    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
100	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  upperDifference.getEntry(nfxm);	  nfxm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	64	None	replace
101	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfxm  =  upperDifference.getEntry(nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  upperDifference.getEntry(nfx);	  nfxm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	64	None	replace
102	[BUG]  [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]              AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  lowerDifference.getEntry(nfxm);	  nfxm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	64	None	replace
103	[BUG]  [BUGGY]  stepa  =  initialTrustRegius;  Stepa  =  initialTrustRegius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius;  Stepa  =  initialTrustRegius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius;  Stepa  =  initialTrustRegius;	          stepa    =    initialTrustRegionRadius;    Stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	60	None	replace
104	[BUG]  [BUGGY]  stepa  =  lowerDifference;  Stepa  =  initialTrustRegionRadius;  [CE]  incompatible  types  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference;  Stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference;  Stepa  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    Stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  incompatible  types	60	None	replace
105	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegius,  nfm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(initialTrustRegius,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(initialTrustRegius,  nfm);	  stepa    =    initialTrustRegius.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	72	None	replace
106	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm    =    interpolationPoints.getEntry(nfm,    nfx);    	compilable	  [FE]  OutOfRangeException  	59	13	replace
107	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfx);  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm    =    interpolationPoints.getEntry(nfm,    nfx);    	compilable	  [FE]  OutOfRangeException  	59	13	replace
108	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm    =    interpolationPoints.getEntry(nfm,    nfx);    	compilable	  [FE]  OutOfRangeException  	59	13	replace
109	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm    =    interpolationPoints.getEntry(nfm,    nfx);    	compilable	  [FE]  OutOfRangeException  	59	13	replace
110	[BUG]  [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  interpolationPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    nfm    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	79	None	replace
111	[BUG]  [BUGGY]  stepa  =  outerDifference.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  outerDifference  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  outerDifference.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  outerDifference.getEntry(nfx,  nfm);	  stepa    =    topDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  outerDifference	68	None	replace
112	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	10	1	add
113	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	10	1	add
114	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegius;  stepa  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegius;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegius;  stepa  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	10	None	add
115	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  nfm;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  nfm;  stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	10	1	add
116	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  nfm;  stepa  =  initialTrustRegionRadius;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  nfm;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  nfm;  stepa  =  initialTrustRegionRadius;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	10	1	add
117	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius;  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius;	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius;    	non-compiled	[CE]  ')'  expected	89	None	replace
118	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius;  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius;	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius;    	non-compiled	[CE]  ')'  expected	89	None	replace
119	[BUG]  [BUGGY]  stepa  =  upperDifference;  [CE]  incompatible  types  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference;	          stepa    =    initialTrustRegionRadius;    stepa    =    originalTrustRegionRadius;    	non-compiled	[CE]  incompatible  types	12	None	replace
120	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  interfacePoints  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interfacePoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	45	None	replace
121	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfmm);  [CE]  int  cannot  be  dereferenced  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interfacePoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	replace
122	[BUG]  [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interfacePoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	45	None	replace
123	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  	compilable	  [FE]  OutOfRangeException  	20	13	add
124	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  	compilable	  [FE]  OutOfRangeException  	20	13	add
125	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1));  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1));	  	non-compiled	[CE]  ';'  expected	20	None	add
126	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [CE]  cannot  find  symbol  Stepa  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    Stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	20	None	add
127	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interfacePoints.getEntry(nfm,  nfm  +  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  stepa  =  interfacePoints.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    stepa  =  interfacePoints.getEntry(nfm,  nfm  +  1);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	20	None	add
128	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,double)  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  stepa);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,double)	6	None	replace
129	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  alphaCauchy);  [CE]  cannot  find  symbol  alphaCauchy  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  alphaCauchy);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  alphaCauchy);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	6	None	replace
130	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepa);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	6	None	replace
131	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    nfm    =    interpolationPoints.getEntry(nfm,    nfm);    	compilable	  [FE]  OutOfRangeException  	65	13	replace
132	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepb  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    nfm    =    interpolationPoints.getEntry(nfm,    nfm);    	compilable	  [FE]  OutOfRangeException  	65	13	replace
133	[BUG]  [BUGGY]  nfm  =  upperDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  upperDifference.getEntry(nfx);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  upperDifference.getEntry(nfx);	  nfm    =    lowerDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	14	None	replace
134	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx));  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfx));	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    interpolationPoints.getEntry(nfm,    nfx));    	non-compiled	[CE]  ';'  expected	41	None	replace
135	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  2);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  2);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
136	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  2);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  2);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  2);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
137	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfm  +  1);  [CE]  int  cannot  be  dereferenced  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  nfm  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
138	[BUG]  [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfm  +  1);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius.getEntry(nfm,  nfm  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	21	None	replace
139	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	25	1	add
140	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	25	1	add
141	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	25	1	add
142	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	25	1	add
143	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	25	None	add
144	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	25	None	add
145	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	25	None	add
146	[BUG]  [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfxm,  nfm);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfxm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  lowerBound  =  upperDifference.getEntry(nfxm,  nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	15	None	replace
147	[BUG]  [BUGGY]  double[]  stepb  =  upperDifference.getEntry(nfxm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]          AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepb  =  upperDifference.getEntry(nfxm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepb  =  upperDifference.getEntry(nfxm);	          double[]    lowerBound    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	15	None	replace
148	[BUG]  [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfxm,  stepa);  [CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  lowerBound  =  upperDifference.getEntry(nfxm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  lowerBound  =  upperDifference.getEntry(nfxm,  stepa);	          double[]    lowerBound    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  prelim(double[],double[])	15	None	replace
149	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	29	1	add
150	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	29	1	add
151	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	29	1	add
152	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	29	1	add
153	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	29	None	add
154	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	29	None	add
155	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  LowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  LowerDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  LowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  LowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  LowerDifference	29	None	add
156	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	compilable	  [FE]  OutOfRangeException  	1	13	add
157	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	compilable	  [FE]  OutOfRangeException  	1	13	add
158	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    nfm  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	1	None	add
159	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interfacePoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	1	None	add
160	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interfacePoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	1	None	add
161	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	compilable	  [FE]  OutOfRangeException  	37	13	add
162	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	compilable	  [FE]  OutOfRangeException  	37	13	add
163	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  nfm  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    nfm  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	37	None	add
164	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interfacePoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  interfacePoints  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interfacePoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interfacePoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	37	None	add
165	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  Stepa  [FE]          OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	37	None	add
166	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
167	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
168	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
169	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
170	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
171	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
172	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	69	None	add
173	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	69	None	add
174	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	compilable	  [FE]  OutOfRangeException  	57	13	replace
175	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	compilable	  [FE]  OutOfRangeException  	57	13	replace
176	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  n);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfx,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	57	None	replace
177	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	7	None	replace
178	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  alphaCauchy);  [CE]  cannot  find  symbol  alphaCauchy  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  alphaCauchy);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  alphaCauchy);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm,    stepa);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	7	None	replace
179	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,double)  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepb,  stepa);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,double)	7	None	replace
180	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  nfm,  stepa);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfx,  nfm,  stepa);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfx,  nfm,  stepa);	  stepa    =    lowerDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	67	None	replace
181	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfx);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfm,  nfx);	  stepa    =    lowerDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	67	None	replace
182	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  lowerDifference);  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfx,  lowerDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  lowerDifference);	  stepa    =    lowerDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
183	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfxm));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	85	None	replace
184	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfx));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfx));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegius,  nfm.getEntry(nfx));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	85	None	replace
185	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm));  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm));	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interpolationPoints.getEntry(nfm,    nfmm));    	non-compiled	[CE]  ';'  expected	47	None	replace
186	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfmm));  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfmm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfmm));	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interpolationPoints.getEntry(nfm,    nfmm));    	non-compiled	[CE]  ';'  expected	47	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm  +  1;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  nfm  +  1;	  stepa    =    nfm;    	compilable	  [FE]  AssertionError  	24	12	replace
188	[BUG]  [BUGGY]  stepa  =  nfm  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm  +  1;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm  +  1;	  stepa    =    nfm;    	compilable	  [FE]  AssertionError  	24	12	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfx,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	30	12	replace
190	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfx,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfx,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	30	12	replace
191	[BUG]  [BUGGY]  stepa  =  nfm;  StepA  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  StepA  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  StepA  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm;  StepA  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    StepA    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  StepA	80	None	replace
192	[BUG]  [BUGGY]  stepa  =  initialTrustRegius;  StepA  =  initialTrustRegius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius;  StepA  =  initialTrustRegius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius;  StepA  =  initialTrustRegius;	          stepa    =    initialTrustRegionRadius;    StepA    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	80	None	replace
193	[BUG]  [BUGGY]  StepA  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  StepA  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  StepA  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	StepA  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    StepA    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  StepA	80	None	replace
194	[BUG]  [BUGGY]  stepa  =  initialTrustRegius;  StepA  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegius;  StepA  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegius;  StepA  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    StepA    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	80	None	replace
195	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  alphaCauchy);  [CE]  cannot  find  symbol  alphaCauchy  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  alphaCauchy);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepb,  alphaCauchy);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepb);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	8	None	replace
196	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepb);  [CE]  no  suitable  method  found  for  getEntry(int,int,double)  [FE]              OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepb);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfxm,  stepb);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepb);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double)	8	None	replace
197	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  stepb);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,double)  [FE]                OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  stepb);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  stepb);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepb);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,double)	8	None	replace
198	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));	  nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	42	None	replace
199	[BUG]  [BUGGY]  stepa  =  nfm;  phasea  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  phasea  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  phasea  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm;  phasea  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    phasea    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  phasea	61	None	replace
200	[BUG]  [BUGGY]  phasea  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  phasea  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  phasea  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	phasea  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    phasea    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  phasea	61	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfxm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  upperDifference.getEntry(nfxm);	          stepa    =    initialTrustRegionRadius;    stepa    =    initialTrustRegius;    	compilable	  [FE]  AssertionError  	13	12	replace
202	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfxm);  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfxm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfxm);	          stepa    =    initialTrustRegionRadius;    stepa    =    initialTrustRegius;    	compilable	  [FE]  AssertionError  	13	12	replace
203	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  stepa  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    nfm;    stepa  =  nfm;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	23	1	add
204	[BUG]  [BUGGY]  stepa  =  nfm;  stepa  =  nfm;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  stepa  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    stepa  =  nfm;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	23	1	add
205	[BUG]  [BUGGY]  stepa  =  nfm;  nfm  =  nfm;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  nfm  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    nfm  =  nfm;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	23	None	add
206	[BUG]  [BUGGY]  stepa  =  nfm;  stepa  =  nfm);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  stepa  =  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    stepa  =  nfm);	  	non-compiled	[CE]  ';'  expected	23	None	add
207	[BUG]  [BUGGY]  stepa  =  nfm;  Stepa  =  nfm;  [CE]  cannot  find  symbol  Stepa  [FE]          AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  Stepa  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    Stepa  =  nfm;	  	non-compiled	[CE]  cannot  find  symbol  Stepa	23	None	add
208	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  getEntry(int,double)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfx,  initialTrustRegionRadius);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfx,  initialTrustRegionRadius);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,double)	33	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	70	10	replace
210	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	70	10	replace
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	70	13	replace
212	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	70	13	replace
213	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  n  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
214	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n  +  1);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  n  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
215	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm  +  1);  [CE]  double  cannot  be  dereferenced  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm  +  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
216	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperBound);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,double[])  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperBound);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperBound);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,double[])	7	None	replace
217	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfmm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  nfmm);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfmm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	76	None	replace
218	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfmm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfm,  nfmm);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfmm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	76	None	replace
219	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfm));	          stepa    =    initialTrustRegionRadius;    stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	13	replace
220	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfm));	          stepa    =    initialTrustRegionRadius;    stepa    =    initialTrustRegionRadius;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	13	replace
221	[BUG]  [BUGGY]  Nfx  =  upperDifference.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  Nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Nfx  =  upperDifference.getEntry(nfx,  nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Nfx  =  upperDifference.getEntry(nfx,  nfm);	  Nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  find  symbol  Nfx	75	None	replace
222	[BUG]  [BUGGY]  Nfx  =  initialTrustRegionRadius.getEntry(nfx);  [CE]  cannot  find  symbol  Nfx  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Nfx  =  initialTrustRegionRadius.getEntry(nfx);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Nfx  =  initialTrustRegionRadius.getEntry(nfx);	  Nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  find  symbol  Nfx	75	None	replace
223	[BUG]  [BUGGY]  Nfx  =  lowerDifference.getEntry(nfx);  [CE]  cannot  find  symbol  Nfx  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Nfx  =  lowerDifference.getEntry(nfx);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Nfx  =  lowerDifference.getEntry(nfx);	  Nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  find  symbol  Nfx	75	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	30	11	replace
225	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	30	11	replace
226	[BUG]  [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  innerTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  innerTrustRegionPoints	91	None	replace
227	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  lowerBound,  initialTrustRegionRadius);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  lowerBound,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  lowerBound,  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	87	None	replace
228	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperBound);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,double[])  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperBound);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperBound);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,double[])	6	None	replace
229	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  lowerDifference);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  lowerDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  lowerDifference);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)	6	None	replace
230	[BUG]  [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  initialTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegionPoints	84	None	replace
231	[BUG]  [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  innerTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  innerTrustRegionPoints	86	None	replace
232	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	85	None	replace
233	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  nfm  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  nfm  =  interpolationPoints.getEntry(nfm,  nfm  +  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    nfm  =  interpolationPoints.getEntry(nfm,  nfm  +  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	20	None	add
234	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  Stepa  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	1	None	add
235	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfmm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfmm,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	compilable	  [FE]  OutOfRangeException  	57	13	replace
236	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfmm,  n);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfmm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfmm,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	compilable	  [FE]  OutOfRangeException  	57	13	replace
237	[BUG]  [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  getEntry(int,double)  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  upperDifference.getEntry(nfm,  initialTrustRegionRadius);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  upperDifference.getEntry(nfm,  initialTrustRegionRadius);	  stepa    =    initialTrustRegionRadius.getEntry(nfm,    nfm);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,double)	71	None	replace
238	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	25	None	add
239	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(upperDifference,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(upperDifference,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(upperDifference,  nfm);	  stepa    =    upperDifference.getEntry(nfm,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
240	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepA,  stepb);  [CE]  cannot  find  symbol  stepA  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepA,  stepb);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepA,  stepb);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepb);    	non-compiled	[CE]  cannot  find  symbol  stepA	8	None	replace
241	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  lowerBound,  initialTrustRegionRadius);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  lowerBound,  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  lowerBound,  initialTrustRegionRadius);	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	88	None	replace
242	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  n);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  n);  nfm  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    nfm    =    interpolationPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	65	None	replace
243	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	12	replace
244	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	12	replace
245	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	27	None	add
246	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]      AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	27	None	add
247	[BUG]  [BUGGY]  stepa  =  topDifference.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  topDifference  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  topDifference.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  topDifference.getEntry(nfm,  nfm);	  stepa    =    initialTrustRegius.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  topDifference	72	None	replace
248	[BUG]  [BUGGY]  stepa  =  outerDifference.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  outerDifference  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  outerDifference.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  outerDifference.getEntry(nfm,  nfm);	  stepa    =    initialTrustRegius.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  outerDifference	72	None	replace
249	[BUG]  [BUGGY]  stepa  =  baseTrustRegionRadius;  [CE]  cannot  find  symbol  baseTrustRegionRadius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  baseTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  baseTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    stepa    =    startTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  baseTrustRegionRadius	81	None	replace
250	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	69	None	add
251	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	29	None	add
252	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    nfm    =    interpolationPoints.getEntry(nfm,    nfmm);    	compilable	  [FE]  OutOfRangeException  	79	13	replace
253	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    nfm    =    interpolationPoints.getEntry(nfm,    nfmm);    	compilable	  [FE]  OutOfRangeException  	79	13	replace
254	[BUG]  [BUGGY]  stepa  =  lowerBound;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerBound;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerBound;	  stepa    =    nfm;    	non-compiled	[CE]  incompatible  types	24	None	replace
255	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	4	None	replace
256	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius);  [CE]  no  suitable  method  found  for  max(double)  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius;    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	89	None	replace
257	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  lowerBound;  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(-TWO  *  lowerBound;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(-TWO  *  lowerBound;	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius;    	non-compiled	[CE]  ')'  expected	89	None	replace
258	[BUG]  [BUGGY]  stepa  =  nextDifference.getEntry(initialTrustRegionRadius,  nfm);  [CE]  cannot  find  symbol  nextDifference  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nextDifference.getEntry(initialTrustRegionRadius,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nextDifference.getEntry(initialTrustRegionRadius,  nfm);	  stepa    =    nfx.getEntry(initialTrustRegionRadius,    nfm);    	non-compiled	[CE]  cannot  find  symbol  nextDifference	32	None	replace
259	[BUG]  [BUGGY]  double  lowerDifference  =  initialTrustRegionRadius.getEntry(nfm);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  lowerDifference  =  initialTrustRegionRadius.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  lowerDifference  =  initialTrustRegionRadius.getEntry(nfm);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
260	[BUG]  [BUGGY]  nfm  =  topDifference.getEntry(nfm,  n);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  topDifference.getEntry(nfm,  n);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  topDifference.getEntry(nfm,  n);	  nfm    =    topDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	73	None	replace
261	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  Stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  Stepa  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  Stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    Stepa  =  initialTrustRegionRadius;  stepa  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  Stepa	10	None	add
262	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  int  cannot  be  dereferenced  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    Stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  int  cannot  be  dereferenced	46	None	replace
263	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  nfx  =  interpolationPoints.getEntry(nfx,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  nfx  =  interpolationPoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    nfx  =  interpolationPoints.getEntry(nfx,  nfm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	54	None	add
264	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  Stepa  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    Stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  cannot  find  symbol  Stepa	43	None	add
265	[BUG]  [BUGGY]  double[]  stepb  =  initialTrustRegionRadius.getEntry(nfxm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepb  =  initialTrustRegionRadius.getEntry(nfxm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepb  =  initialTrustRegionRadius.getEntry(nfxm);	          double[]    lowerBound    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	15	None	replace
266	[BUG]  [BUGGY]  stepa  =  nfm;  phasea  =  nfm;  [CE]  cannot  find  symbol  phasea  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  phasea  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    phasea  =  nfm;	  	non-compiled	[CE]  cannot  find  symbol  phasea	23	None	add
267	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(upperDifference,  nfx);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(upperDifference,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(upperDifference,  nfx);	  stepa    =    upperDifference.getEntry(nfx,    nfm);    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
268	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  zMatrix.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  zMatrix.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfx,    nfm);    	compilable	  [FE]  OutOfRangeException  	55	13	replace
269	[BUG]  [BUGGY]  stepa  =  zMatrix.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  zMatrix.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  zMatrix.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfx,    nfm);    	compilable	  [FE]  OutOfRangeException  	55	13	replace
270	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  nfx  =  interpolationPoints.getEntry(nfx,  n);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  nfx  =  interpolationPoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    nfx  =  interpolationPoints.getEntry(nfx,  n);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	56	None	add
271	[BUG]  [BUGGY]  stepa  =  baseDifference.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  baseDifference  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  baseDifference.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  baseDifference.getEntry(nfm,  nfm);	  stepa    =    interfacePoints.getEntry(nfx,    nfm);    	non-compiled	[CE]  cannot  find  symbol  baseDifference	58	None	replace
272	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  *  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm  *  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
273	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  *  1);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  *  1);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm  *  1);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
274	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  3);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  3);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
275	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  3);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  3);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm  +  3);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm    +    1);    	compilable	  [FE]  OutOfRangeException  	21	13	replace
276	[BUG]  [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  innerTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  innerTrustRegionPoints.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  innerTrustRegionPoints	84	None	replace
277	[BUG]  [BUGGY]  stepa  =  baseTrustRegius.getEntry(nfm,  nfmm);  [CE]  cannot  find  symbol  baseTrustRegius  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  baseTrustRegius.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  baseTrustRegius.getEntry(nfm,  nfmm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa    =    interfacePoints.getEntry(nfm,    nfmm);    	non-compiled	[CE]  cannot  find  symbol  baseTrustRegius	45	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.max(TWO  *  nfmm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
279	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  nfmm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	26	13	replace
280	[BUG]  [BUGGY]  stepa  =  Math.min(NUMBER  *  initialTrustRegionRadius);  [CE]  cannot  find  symbol  NUMBER  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(NUMBER  *  initialTrustRegionRadius);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(NUMBER  *  initialTrustRegionRadius);	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  cannot  find  symbol  NUMBER	87	None	replace
281	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(TWO    *    initialTrustRegionRadius);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	88	None	replace
282	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  double  cannot  be  dereferenced  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	add
283	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  nfm.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [CE]  int  cannot  be  dereferenced  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  stepa  =  nfm.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfmm);        stepa    =    interpolationPoints.getEntry(nfm,    nfmm);    stepa  =  nfm.getEntry(nfmm,  nfmm);  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	  	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	add
284	[BUG]  [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm,  alphaCauchy);  [CE]  cannot  find  symbol  alphaCauchy  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference.getEntry(nfm,  nfm,  alphaCauchy);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference.getEntry(nfm,  nfm,  alphaCauchy);	  stepa    =    lowerDifference.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	49	None	replace
285	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  Stepa  [FE]            OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  Stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    Stepa    =    interpolationPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  Stepa	40	None	replace
286	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  lowerDifference.getEntry(nfm):  null;  [CE]  ';'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  lowerDifference.getEntry(nfm):  null;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  nfm  isMinimize?  lowerDifference.getEntry(nfm):  null;	  BOBYQAOptimizer$PathIsExploredException    =    nfm    isMinimize?    upperDifference.getEntry(nfm):    null;    	non-compiled	[CE]  ';'  expected	90	None	replace
287	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  super.interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  interpolationPoints  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  super.interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  super.interpolationPoints.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  interpolationPoints	37	None	add
288	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  nfm.getEntry(nfx,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  int  cannot  be  dereferenced  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  nfm.getEntry(nfx,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  nfm.getEntry(nfx,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	add
289	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  super.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  interpolationPoints.getEntry(nfm,  nfx);  stepa  =  super.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfx);        stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa  =  super.getEntry(nfm,  nfx);  stepa  =  interpolationPoints.getEntry(nfm,  nfx);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
290	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerBound;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference?  upperDifference  :  lowerBound;	  BOBYQAOptimizer$PathIsExploredException    =    lowerDifference?    lowerDifference    :    upperBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	78	None	replace
291	[BUG]  [BUGGY]  nfm  =  firstDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfm  =  firstDifference.getEntry(nfm);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfm  =  firstDifference.getEntry(nfm);	  nfm    =    topDifference.getEntry(nfm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	73	None	replace
292	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  Math.min(TWO  *  nfmm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	11	replace
293	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  nfmm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  Math.min(TWO  *  nfmm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	28	11	replace
294	[BUG]  [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfx));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfx));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfx));	  nfx    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	85	None	replace
295	[BUG]  [BUGGY]  double[]  stepBound  =  upperDifference.getEntry(nfm);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepBound  =  upperDifference.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepBound  =  upperDifference.getEntry(nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  incompatible  types	15	None	replace
296	[BUG]  [BUGGY]  nfx  =  firstDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  nfx  =  firstDifference.getEntry(nfx);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	nfx  =  firstDifference.getEntry(nfx);	  nfx    =    topDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	19	None	replace
297	[BUG]  [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  initialTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfx);	  stepa    =    interpolationPoints.getEntry(nfm,    nfx);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegionPoints	86	None	replace
298	[BUG]  [BUGGY]  stepa  =  lowerDifference;  stepa  =  initialTrustRegionRadius;  [CE]  incompatible  types  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  lowerDifference;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  lowerDifference;  stepa  =  initialTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    Stepa    =    initialTrustRegionRadius;    	non-compiled	[CE]  incompatible  types	60	None	replace
299	[BUG]  [BUGGY]  Nfx  =  nfm.getEntry(upperDifference);  [CE]  cannot  find  symbol  Nfx  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  Nfx  =  nfm.getEntry(upperDifference);  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	Nfx  =  nfm.getEntry(upperDifference);	  Nfx    =    upperDifference.getEntry(nfx);    	non-compiled	[CE]  cannot  find  symbol  Nfx	75	None	replace
300	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperDifference);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm,  stepa,  upperDifference);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)	7	None	replace
301	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  internalTrustRegionPoints.getEntry(nfx,  n);  [CE]  cannot  find  symbol  internalTrustRegionPoints  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  n);  stepa  =  internalTrustRegionPoints.getEntry(nfx,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    n);    stepa  =  internalTrustRegionPoints.getEntry(nfx,  n);	  	non-compiled	[CE]  cannot  find  symbol  internalTrustRegionPoints	56	None	add
302	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
303	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	27	1	add
304	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  baseTrustRegionRadius;  stepa  =  baseTrustRegionRadius;  [CE]  cannot  find  symbol  baseTrustRegionRadius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  baseTrustRegionRadius;  stepa  =  baseTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  baseTrustRegionRadius;  stepa  =  baseTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  baseTrustRegionRadius	10	None	add
305	[BUG]  [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  firstTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [CE]  cannot  find  symbol  firstTrustRegionRadius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]          stepa    =    initialTrustRegionRadius;    stepa  =  initialTrustRegionRadius;  stepa  =  firstTrustRegionRadius;  stepa  =  initialTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	                stepa        =        initialTrustRegionRadius;        stepa    =    initialTrustRegionRadius;    stepa  =  firstTrustRegionRadius;  stepa  =  initialTrustRegionRadius;	  	non-compiled	[CE]  cannot  find  symbol  firstTrustRegionRadius	10	None	add
306	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm?  lowerDifference.getEntry(nfm):  null;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  nfm?  lowerDifference.getEntry(nfm):  null;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  nfm?  lowerDifference.getEntry(nfm):  null;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference.getEntry(nfm):    null;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	9	None	replace
307	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference.getEntry(nfm):  null;  [CE]  ';'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  lowerDifference.getEntry(nfm):  null;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	BOBYQAOptimizer$PathIsExploredException  =  lowerDifference.getEntry(nfm):  null;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    lowerDifference.getEntry(nfm):    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
308	[BUG]  [BUGGY]  double[]  stepb  =  initialTrustRegionRadius.getEntry(nfm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]              AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepb  =  initialTrustRegionRadius.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepb  =  initialTrustRegionRadius.getEntry(nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
309	[BUG]  [BUGGY]  double[]  stepa  =  upperDifference.getEntry(nfm);  [CE]  variable  stepa  is  already  defined  in  method  prelim(double[],double[])  [FE]                AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double[]  stepa  =  upperDifference.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double[]  stepa  =  upperDifference.getEntry(nfm);	          double[]    lowerBound    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepa  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
310	[BUG]  [BUGGY]  stepa  =  nfm;  StepA  =  nfm;  [CE]  cannot  find  symbol  StepA  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm;  StepA  =  nfm;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    nfm;    StepA  =  nfm;	  	non-compiled	[CE]  cannot  find  symbol  StepA	23	None	add
311	[BUG]  [BUGGY]  stepa  =  firstDifference.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  firstDifference  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  firstDifference.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  firstDifference.getEntry(nfm,  nfm);	  stepa    =    initialTrustRegius.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  firstDifference	72	None	replace
312	[BUG]  [BUGGY]  double  stepb  =  initialTrustRegionRadius.getEntry(nfm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]        AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  stepb  =  initialTrustRegionRadius.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  stepb  =  initialTrustRegionRadius.getEntry(nfm);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	63	None	replace
313	[BUG]  [BUGGY]  double  stepb  =  nfm.getEntry(upperDifference);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]          AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  stepb  =  nfm.getEntry(upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  stepb  =  nfm.getEntry(upperDifference);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	63	None	replace
314	[BUG]  [BUGGY]  double  stepb  =  firstTrustRegius.getEntry(nfm);  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  double  stepb  =  firstTrustRegius.getEntry(nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	double  stepb  =  firstTrustRegius.getEntry(nfm);	  double    lowerDifference    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	63	None	replace
315	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
316	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	69	1	add
317	[BUG]  [BUGGY]  stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  firstTrustRegionRadius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfm);	  stepa    =    nfm.getEntry(initialTrustRegionRadius,    nfm);    	non-compiled	[CE]  cannot  find  symbol  firstTrustRegionRadius	31	None	replace
318	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  internalTrustRegionPoints.getEntry(nfx,  nfm);  [CE]  cannot  find  symbol  internalTrustRegionPoints  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfm);  stepa  =  internalTrustRegionPoints.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa    =    interpolationPoints.getEntry(nfx,    nfm);    stepa  =  internalTrustRegionPoints.getEntry(nfx,  nfm);	  	non-compiled	[CE]  cannot  find  symbol  internalTrustRegionPoints	54	None	add
319	[BUG]  [BUGGY]  stepa  =  baseTrustRegius.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  baseTrustRegius  [FE]          OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  baseTrustRegius.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  baseTrustRegius.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    interfacePoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  baseTrustRegius	3	None	replace
320	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfx,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  nfm);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
321	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(lowerDifference,  nfm,  initialTrustRegionRadius);  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(lowerDifference,  nfm,  initialTrustRegionRadius);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(lowerDifference,  nfm,  initialTrustRegionRadius);	  stepa    =    nfm.getEntry(nfx,    initialTrustRegionRadius);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
322	[BUG]  [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  initialTrustRegionPoints  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionPoints.getEntry(nfm,  nfm);	  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa    =    internalTrustRegionPoints.getEntry(nfm,    nfm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegionPoints	91	None	replace
323	[BUG]  [BUGGY]  stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfx);  [CE]  cannot  find  symbol  firstTrustRegionRadius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfx);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  firstTrustRegionRadius.getEntry(nfm,  nfx);	  stepa    =    nfx.getEntry(initialTrustRegionRadius,    nfm);    	non-compiled	[CE]  cannot  find  symbol  firstTrustRegionRadius	32	None	replace
324	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperDifference);  [CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)  [FE]        OutOfRangeException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperDifference);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm,  stepa,  upperDifference);	  stepa    =    interpolationPoints.getEntry(nfm,    nfmm,    stepa);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,double,ArrayRealVector)	6	None	replace
325	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfm,  initialTrustRegionRadius);  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  nfm.getEntry(nfm,  initialTrustRegionRadius);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfm,  initialTrustRegionRadius);	  stepa    =    nfm.getEntry(initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  int  cannot  be  dereferenced	34	None	replace
326	[BUG]  [BUGGY]  stepa  =  baseTrustRegionRadius;  StepA  =  baseTrustRegionRadius;  [CE]  cannot  find  symbol  baseTrustRegionRadius  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  baseTrustRegionRadius;  StepA  =  baseTrustRegionRadius;  [BUGGY]      stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  baseTrustRegionRadius;  StepA  =  baseTrustRegionRadius;	          stepa    =    initialTrustRegionRadius;    StepA    =    initialTrustRegionRadius;    	non-compiled	[CE]  cannot  find  symbol  baseTrustRegionRadius	80	None	replace
327	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  n);  [CE]  cannot  find  symbol  interfacePoints  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  n);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  n);	  stepa    =    interpolationPoints.getEntry(nfx,    n);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	57	None	replace
328	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  double  cannot  be  dereferenced  [FE]    OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  initialTrustRegionRadius.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	add
329	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  nfm.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  int  cannot  be  dereferenced  [FE]      OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  nfm.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  nfm.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	add
330	[BUG]  [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  super.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException    [CONTEXT]      if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {      [BUGGY]  stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  interpolationPoints.getEntry(nfm,  nfm);  stepa  =  super.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa        =        interpolationPoints.getEntry(nfm,        nfm);        stepa    =    interpolationPoints.getEntry(nfm,    nfm);    stepa  =  super.getEntry(nfm,  nfm);  stepa  =  interpolationPoints.getEntry(nfm,  nfm);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
