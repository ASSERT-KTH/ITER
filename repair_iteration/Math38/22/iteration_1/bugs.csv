bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
2	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [FE]  OutOfRangeException  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
3	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfx);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
4	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfx);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfx);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
5	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
6	[BUG]  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfm,  nfmm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interpolationPoints.getEntry(nfm,  nfmm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  OutOfRangeException  	43	13	replace
7	[BUG]  [BUGGY]  stepa  =  nfm.getEntry(nfx,  interpolationPoints);  [CE]  int  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  nfm.getEntry(nfx,  interpolationPoints);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  nfm.getEntry(nfx,  interpolationPoints);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	  	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  AssertionError  	43	13	replace
9	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	  	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	compilable	  [FE]  AssertionError  	43	13	replace
10	[BUG]  [BUGGY]    nfx  =  upperDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  upperDifference.getEntry(nfm);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  upperDifference.getEntry(nfm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
11	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    stepa  =  initialTrustRegionRadius;  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	add	    stepa  =  initialTrustRegionRadius;		compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	add
12	[BUG]  [BUGGY]    stepa  =  initialTrustRegionRadius;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    stepa  =  initialTrustRegionRadius;  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    stepa  =  initialTrustRegionRadius;		compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	add
13	[BUG]  [BUGGY]    nfx  =  upperDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]        BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  upperDifference.getEntry(nfx);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  upperDifference.getEntry(nfx);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
14	[BUG]  [BUGGY]    nfx  =  lowerDifference.getEntry(nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]          BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  lowerDifference.getEntry(nfx);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  lowerDifference.getEntry(nfx);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
15	[BUG]  [BUGGY]    nfx  =  lowerDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]            BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  lowerDifference.getEntry(nfm);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  lowerDifference.getEntry(nfm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
16	[BUG]  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfx,  nfm);  [CE]  double  cannot  be  dereferenced  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  initialTrustRegionRadius.getEntry(nfx,  nfm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  initialTrustRegionRadius.getEntry(nfx,  nfm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	replace
17	[BUG]  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperBound;  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperBound;		non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	44	None	add
18	[BUG]  [BUGGY]    nfm  =  upperDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfm  =  upperDifference.getEntry(nfm);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfm  =  upperDifference.getEntry(nfm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	44	None	add
19	[BUG]  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;		non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	44	None	add
20	[BUG]  [BUGGY]    nfm  =  lowerDifference.getEntry(nfm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]          BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfm  =  lowerDifference.getEntry(nfm);  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfm  =  lowerDifference.getEntry(nfm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	44	None	add
21	[BUG]  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference.getEntry(nfm):  null;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference.getEntry(nfm):  null;  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  upperDifference.getEntry(nfm):  null;		non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	44	None	add
22	[BUG]  [BUGGY]    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
23	[BUG]  [BUGGY]    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	44	None	add
24	[BUG]  [BUGGY]    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfx  [FE]        BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfx  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfx	44	None	add
25	[BUG]  [BUGGY]    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	44	None	add
26	[BUG]  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [CE]  cannot  find  symbol  interfacePoints  [FE]    BOBYQAOptimizer$PathIsExploredException  [CONTEXT]  if  (nfm  <=  2  *  n)  {  if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  [BUGGY]  stepa  =  interfacePoints.getEntry(nfm,  nfm);  [BUGGY]  stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1640	1640	1	replace	stepa  =  interfacePoints.getEntry(nfm,  nfm);	stepa  =  interpolationPoints.getEntry(nfx,  nfxm);  	non-compiled	[CE]  cannot  find  symbol  interfacePoints	43	None	replace
