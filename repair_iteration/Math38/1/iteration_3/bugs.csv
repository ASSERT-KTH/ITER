bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  tmp1	27	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
3	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
4	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	28	None	add
5	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
7	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
8	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	28	None	add
9	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	58	None	replace
10	[BUG]  [BUGGY]  final  int  nfm1  =  (nfm  -  stepb)/  n;  [CE]  possible  loss  of  precision  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =  (nfm  -  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =  (nfm  -  stepb)/  n;	  final    long    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
11	[BUG]  [BUGGY]  final  int  tmp1  =  (int  -  stepb)/  n;  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (int  -  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (int  -  stepb)/  n;	  final    long    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
12	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	31	None	replace
13	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	31	None	replace
14	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	31	None	replace
15	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	31	None	replace
16	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	14	None	replace
17	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	14	None	replace
18	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	66	None	replace
19	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(nfxm));  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
20	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	64	None	replace
21	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  stepb.length;  [CE]  double  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  -  stepb)/  stepb.length;	  final    double    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
22	[BUG]  [BUGGY]  final  double  tmp1  =  (stepb  -  n)/  n;  [CE]  possible  loss  of  precision  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (stepb  -  n)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (stepb  -  n)/  n;	  final    double    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
23	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  2;  [CE]  possible  loss  of  precision  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  -  stepb)/  2;	  final    double    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
25	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
26	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	30	None	add
27	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
28	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	30	None	add
29	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
31	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
32	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	15	None	add
33	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
34	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	15	None	add
35	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
36	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
37	[BUG]  [BUGGY]  np  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  np  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  np  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	np  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  np    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  np	9	None	replace
38	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  np    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	35	None	replace
39	[BUG]  [BUGGY]  final  int  nfm  -=  np;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  -=  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  -=  np;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
40	[BUG]  [BUGGY]  final  int  nfm  -=  np)/  2;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  -=  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  -=  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
41	[BUG]  [BUGGY]  final  int  nfm  -=  np);  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  -=  np);  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  -=  np);	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
42	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm);  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  =  upperDifference.getEntry(nfxm);	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	57	None	replace
43	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
44	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
45	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
46	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
47	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  stepb.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  stepb.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    stepb;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
48	[BUG]  [BUGGY]  final  int  tmp1  =(stepb  -  nfm)/  nfm;  [CE]  possible  loss  of  precision  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(stepb  -  nfm)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(stepb  -  nfm)/  nfm;	  final    int    tmp1    =(nfm    -    lowerBound)/    stepb;    	non-compiled	[CE]  possible  loss  of  precision	38	None	replace
49	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  stepb;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  stepb;	  final    int    tmp1    =(nfm    -    lowerBound)/    stepb;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
50	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  2;	  final    int    tmp1    =(nfm    -    lowerBound)/    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	40	None	replace
51	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  2  +  1;	  final    int    tmp1    =(nfm    -    lowerBound)/    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	40	None	replace
52	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2L;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2L;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  2L;	  final    int    tmp1    =(nfm    -    lowerBound)/    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	40	None	replace
53	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  stepb;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  -  lowerBound)/  stepb;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	41	None	replace
54	[BUG]  [BUGGY]  final  double  nfm1  =(nfm  -  lowerBound)/  n;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  nfm1  =(nfm  -  lowerBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  nfm1  =(nfm  -  lowerBound)/  n;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	41	None	replace
55	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  -  lowerBound)/  2;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	41	None	replace
56	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  *  lowerBound)/  n;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  *  lowerBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  *  lowerBound)/  n;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
57	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  lowerBound)/  n;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  lowerBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  lowerBound)/  n;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	75	None	replace
58	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  upperBound)/  stepb;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  upperBound)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  upperBound)/  stepb;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	75	None	replace
59	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  *  upperBound)/  n;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  *  upperBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  *  upperBound)/  n;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	75	None	replace
60	[BUG]  [BUGGY]  final  double  tmp1  =(double  *  upperBound)/  n;  [CE]  illegal  start  of  expression  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(double  *  upperBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(double  *  upperBound)/  n;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
61	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (int)(nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =  (int)(nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	6	1	replace
62	[BUG]  [BUGGY]  final  int  tmp1  =  (int)(nfm  -  np)/  2;  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (int)(nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (int)(nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	6	1	replace
63	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =  (nfm  -  np)/  1;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	6	1	replace
64	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  np)/  1;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	6	1	replace
65	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  upperDifference.getEntry(nfxm);	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	34	None	replace
66	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  initialTrustRegius,  stepb.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  initialTrustRegius,  stepb.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  initialTrustRegius,  stepb.getEntry(nfxm));	  jpt    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepb.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	11	None	replace
67	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  nfxm,  stepb.getEntry(initialTrustRegionRadius));  [CE]  double  cannot  be  dereferenced  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  nfxm,  stepb.getEntry(initialTrustRegionRadius));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  nfxm,  stepb.getEntry(initialTrustRegionRadius));	  jpt    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepb.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
68	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	29	None	replace
69	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	29	None	replace
70	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	29	None	replace
71	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  np)/  2  *  stepb;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  np)/  2  *  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  np)/  2  *  stepb;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
72	[BUG]  [BUGGY]  final  long  tmp1  =(nfm  -  np)/  2  *  stepb;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  long  tmp1  =(nfm  -  np)/  2  *  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  long  tmp1  =(nfm  -  np)/  2  *  stepb;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
73	[BUG]  [BUGGY]  final  float  tmp1  =(nfm  -  np)/  2  *  stepb;  [CE]  possible  loss  of  precision  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =(nfm  -  np)/  2  *  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =(nfm  -  np)/  2  *  stepb;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
74	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  stepb)/  2  *  np;  [CE]  possible  loss  of  precision  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  stepb)/  2  *  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  stepb)/  2  *  np;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
75	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  nfm;  [CE]  possible  loss  of  precision  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  -  stepb)/  nfm;	  final    int    tmp1    =    (nfm    -    stepb)/    nfm;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
76	[BUG]  [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  nfm;  [CE]  possible  loss  of  precision  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  long  tmp1  =  (nfm  -  stepb)/  nfm;	  final    int    tmp1    =    (nfm    -    stepb)/    nfm;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
77	[BUG]  [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  nfm;  [CE]  possible  loss  of  precision  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =  (nfm  -  stepb)/  nfm;	  final    int    tmp1    =    (nfm    -    stepb)/    nfm;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
78	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	65	None	replace
79	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [CE]  possible  loss  of  precision  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  jpt    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
80	[BUG]  [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  lowerDifference.getEntry(nfxm);	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	19	None	replace
81	[BUG]  [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  lowerDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  lowerDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	19	None	replace
82	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp1  =(nfm  *  np)/  2;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp1  =(nfm  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    final  int  tmp1  =(nfm  *  np)/  2;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	85	None	add
83	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  Final  int  tmp1  =(nfm  *  np)/  2;  [CE]  not  a  statement  [FE]      OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  Final  int  tmp1  =(nfm  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    Final  int  tmp1  =(nfm  *  np)/  2;	  	non-compiled	[CE]  not  a  statement	85	None	add
84	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  int  tmp1  =(nfm  *  np)/  2;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]        OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  int  tmp1  =(nfm  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    int  tmp1  =(nfm  *  np)/  2;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	85	None	add
85	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  nfm  *  np)/  2;  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  nfm  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    final  int  nfm  *  np)/  2;	  	non-compiled	[CE]  ';'  expected	85	None	add
86	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (int)(nfm  *  np)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =  (int)(nfm  *  np)/  n;	  final    int    tmp1    =    (nfm    *    np)/    n;    Final    int    tmp1    =    (nfm    *    np)/    n;    	compilable	  [FE]  OutOfRangeException  	25	1	replace
87	[BUG]  [BUGGY]  final  int  tmp1  =  (int)(nfm  *  np)/  n;  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (int)(nfm  *  np)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (int)(nfm  *  np)/  n;	  final    int    tmp1    =    (nfm    *    np)/    n;    Final    int    tmp1    =    (nfm    *    np)/    n;    	compilable	  [FE]  OutOfRangeException  	25	1	replace
88	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  topDifference	17	None	replace
89	[BUG]  [BUGGY]  np  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  np  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  np  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	np  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  np    =    Math.min(-TWO    *    lowerDifference,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  np	67	None	replace
90	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  *  np)/  stepb;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  *  np)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  *  np)/  stepb;	  final    int    tmp1    =    (nfm    *    np)/    stepb;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
91	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  *  stepb)/  np;  [CE]  possible  loss  of  precision  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  *  stepb)/  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  *  stepb)/  np;	  final    int    tmp1    =    (nfm    *    np)/    stepb;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
92	[BUG]  [BUGGY]  final  float  tmp1  =  (nfm  *  np)/  stepb;  [CE]  possible  loss  of  precision  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =  (nfm  *  np)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =  (nfm  *  np)/  stepb;	  final    int    tmp1    =    (nfm    *    np)/    stepb;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
94	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
95	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
96	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	13	None	add
97	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	13	None	add
98	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
99	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  np.length;  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  np.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb)/  np.length;	  final    int    tmp1    =    (nfm    -    np)/    stepb.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	72	None	replace
100	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb.length)/  np.length;  [CE]  double  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb.length)/  np.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb.length)/  np.length;	  final    int    tmp1    =    (nfm    -    np)/    stepb.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
101	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
102	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  *  stepb)/  n;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  *  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  *  stepb)/  n;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
103	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  stepb.length;  [CE]  double  cannot  be  dereferenced  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  stepb)/  stepb.length;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
104	[BUG]  [BUGGY]  final  long  tmp1  =(nfm  *  stepb)/  n;  [CE]  possible  loss  of  precision  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  long  tmp1  =(nfm  *  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  long  tmp1  =(nfm  *  stepb)/  n;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
105	[BUG]  [BUGGY]  final  float  tmp1  =(nfm  *  stepb)/  n;  [CE]  possible  loss  of  precision  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =(nfm  *  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =(nfm  *  stepb)/  n;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
106	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  tmp1  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  tmp1	70	None	replace
107	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	70	None	replace
108	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
109	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
110	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	33	None	add
111	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
112	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	33	None	add
113	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	33	None	add
114	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  2  +  1;  [CE]  possible  loss  of  precision  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb)/  2  +  1;	  final    int    tmp1    =    (nfm    -    np)/    2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
115	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  2;  [CE]  possible  loss  of  precision  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  stepb)/  2;	  final    int    tmp1    =(nfm    *    np)/    2;    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
116	[BUG]  [BUGGY]  final  int  tmp1  =(initialTrustRegius  *  np)/  2;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(initialTrustRegius  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(initialTrustRegius  *  np)/  2;	  final    int    tmp1    =(nfm    *    np)/    2;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	86	None	replace
117	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  upperBound)/  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  upperBound)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  upperBound)/  2;	  final    int    tmp1    =(nfm    *    np)/    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	86	None	replace
118	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  1;	  final    double    tmp1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	39	None	replace
119	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
120	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  stepb.length;  [CE]  double  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  nfm)/  stepb.length;	  final    int    tmp1    =    (nfm    -    stepb)/    stepb.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
121	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  nfm.length;  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  nfm.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  nfm)/  nfm.length;	  final    int    tmp1    =    (nfm    -    stepb)/    stepb.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
122	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  np;  [CE]  possible  loss  of  precision  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  -  stepb)/  np;	  final    int    tmp1    =    (nfm    -    stepb)/    np;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
123	[BUG]  [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  np;  [CE]  possible  loss  of  precision  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  long  tmp1  =  (nfm  -  stepb)/  np;	  final    int    tmp1    =    (nfm    -    stepb)/    np;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
124	[BUG]  [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  np;  [CE]  possible  loss  of  precision  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  np;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =  (nfm  -  stepb)/  np;	  final    int    tmp1    =    (nfm    -    stepb)/    np;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
125	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  int  tmp1  =  (nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	int  tmp1  =  (nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
126	[BUG]  [BUGGY]  int  tmp1  =  (nfm  -  np)/  2;  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  int  tmp1  =  (nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	int  tmp1  =  (nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
127	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  int  tmp1  =  (int)(nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	int  tmp1  =  (int)(nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
128	[BUG]  [BUGGY]  int  tmp1  =  (int)(nfm  -  np)/  2;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  int  tmp1  =  (int)(nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	int  tmp1  =  (int)(nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    int    tmp1    =    (nfm    -    np)/    2;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
129	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =    (nfm    -    np)/    2    +    1;    final  int  tmp1  =  (nfm  -  np)/  2  +  1;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	48	None	add
130	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  int  tmp1  =  (nfm  -  np)/  2  +  1;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]      OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  int  tmp1  =  (nfm  -  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =    (nfm    -    np)/    2    +    1;    int  tmp1  =  (nfm  -  np)/  2  +  1;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	48	None	add
131	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  Final  int  tmp1  =  (nfm  -  np)/  2  +  1;  [CE]  not  a  statement  [FE]        OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  Final  int  tmp1  =  (nfm  -  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =    (nfm    -    np)/    2    +    1;    Final  int  tmp1  =  (nfm  -  np)/  2  +  1;	  	non-compiled	[CE]  not  a  statement	48	None	add
132	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
133	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
134	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
135	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
136	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
137	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
139	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
141	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
142	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  n)/  n.length;  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  n)/  n.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  n)/  n.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    n.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	77	None	replace
143	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  n.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  n.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  n.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    n.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	77	None	replace
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
145	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
146	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
147	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	18	None	add
148	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	18	None	add
149	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
150	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
151	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	16	None	replace
152	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	16	None	replace
153	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	16	None	replace
154	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin;	  final    int    tmp1    =(nfm    -    lowerBound)/    dsqCrvmin;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	76	None	replace
155	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    dsqCrvmin;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	76	None	replace
156	[BUG]  [BUGGY]  final  int  tmp1  =(dsqCrvmin  -  lowerBound)/  nfm;  [CE]  cannot  find  symbol  dsqCrvmin  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(dsqCrvmin  -  lowerBound)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(dsqCrvmin  -  lowerBound)/  nfm;	  final    int    tmp1    =(nfm    -    lowerBound)/    dsqCrvmin;    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	76	None	replace
157	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	78	None	replace
158	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  alphaCauchy  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	43	None	replace
159	[BUG]  [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  2;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  long  tmp1  =  (nfm  -  stepb)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  long  tmp1  =  (nfm  -  stepb)/  2;	  final    int    tmp1    =    (nfm    -    stepb)/    2;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
160	[BUG]  [BUGGY]  static  final  int  tmp1  =  (nfm  -  np)/  stepb;  [CE]  illegal  start  of  expression  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  static  final  int  tmp1  =  (nfm  -  np)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	static  final  int  tmp1  =  (nfm  -  np)/  stepb;	  final    long    tmp1    =    (nfm    -    np)/    stepb;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
161	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	26	None	replace
162	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperBound.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	64	None	replace
163	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  lowerDifference,  initialTrustRegionRadius.getEntry(nfxm));	  jpt    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
164	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	16	None	replace
165	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
166	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
168	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
169	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  alphaCauchy  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	70	None	replace
170	[BUG]  [BUGGY]  np  =  Math.max(-TWO  *  upperDifference,  initialTrustRegionRadius.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  np  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  np  =  Math.max(-TWO  *  upperDifference,  initialTrustRegionRadius.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	np  =  Math.max(-TWO  *  upperDifference,  initialTrustRegionRadius.getEntry(nfxm));	  np    =    Math.max(-TWO    *    lowerDifference,    initialTrustRegionRadius.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  np	62	None	replace
171	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  variable  stepb  is  already  defined  in  method  prelim(double[],double[])	80	None	add
172	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
173	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	80	None	add
174	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	80	None	add
175	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
176	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
177	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
178	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
179	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  n)/  n;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  n)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  n)/  n;	  final    double    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
180	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  nfm;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  lowerBound)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  lowerBound)/  nfm;	  final    double    tmp1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	39	None	replace
181	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
182	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
183	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  dsqCrvmin  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	52	None	replace
184	[BUG]  [BUGGY]  final  int  tmp1  =(stepb  -  lowerBound)/  nfm;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(stepb  -  lowerBound)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(stepb  -  lowerBound)/  nfm;	  final    int    tmp1    =(nfm    -    lowerBound)/    stepb;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
185	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	  jpt    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	73	None	replace
186	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
187	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
188	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDif  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDif  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDif	  	non-compiled	[CE]  ')'  expected	18	None	add
189	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
190	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
191	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
192	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
193	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
194	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
195	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
197	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
198	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	65	None	replace
199	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	65	None	replace
200	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp1  =(nfm  *  np)/  3;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp1  =(nfm  *  np)/  3;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    final  int  tmp1  =(nfm  *  np)/  3;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	85	None	add
201	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  ZERO,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	43	None	replace
202	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =(nfm  *  np)/  2  +  1;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
203	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  np)/  2  +  1;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
204	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =(nfm  *  n)/  2  +  1;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
205	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2  +  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  n)/  2  +  1;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
206	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
207	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
208	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
209	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
210	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    upperDifference,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	54	None	replace
211	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  *  np)/  n  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =  (nfm  *  np)/  n  +  1;	  final    int    tmp1    =    (nfm    *    np)/    n;    final    int    tmp1    =    (nfm    *    np)/    n);    	compilable	  [FE]  OutOfRangeException  	24	1	replace
212	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  *  np)/  n  +  1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  *  np)/  n  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  *  np)/  n  +  1;	  final    int    tmp1    =    (nfm    *    np)/    n;    final    int    tmp1    =    (nfm    *    np)/    n);    	compilable	  [FE]  OutOfRangeException  	24	1	replace
213	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
214	[BUG]  [BUGGY]  final  double  tmp1  =(double  *  stepb)/  n;  [CE]  illegal  start  of  expression  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(double  *  stepb)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(double  *  stepb)/  n;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
215	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  final  int  nfm  -  np)/  2  +  1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  np)/  2  +  1;  final  int  nfm  -  np)/  2  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =    (nfm    -    np)/    2    +    1;    final  int  nfm  -  np)/  2  +  1;	  	non-compiled	[CE]  ';'  expected	48	None	add
216	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowBound  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  lowBound,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  lowBound	78	None	replace
217	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  stepb)/  2  *  stepb;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  stepb)/  2  *  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  stepb)/  2  *  stepb;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
218	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  np)/  2  *  stepb.length;  [CE]  double  cannot  be  dereferenced  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  np)/  2  *  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  np)/  2  *  stepb.length;	  final    int    tmp1    =(nfm    -    np)/    2    *    stepb;    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
219	[BUG]  [BUGGY]  final  int  nfm  -  np)/  2;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
220	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm)/  2;  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  =  upperDifference.getEntry(nfm)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	57	None	replace
221	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm);  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm  =  upperDifference.getEntry(nfm);	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	57	None	replace
222	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  np)/  2  *  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =(nfm  -  np)/  2  *  1;	  final    int    tmp1    =    (nfm    -    np)/    2    +    1;    	compilable	  [FE]  OutOfRangeException  	49	1	replace
223	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  np)/  2  *  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  np)/  2  *  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  np)/  2  *  1;	  final    int    tmp1    =    (nfm    -    np)/    2    +    1;    	compilable	  [FE]  OutOfRangeException  	49	1	replace
224	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  dsqCrvmin;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  dsqCrvmin;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  -  lowerBound)/  dsqCrvmin;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	41	None	replace
225	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  nfm;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  -  lowerBound)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  -  lowerBound)/  nfm;	  final    int    nfm1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	41	None	replace
226	[BUG]  [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  2;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  float  tmp1  =  (nfm  -  stepb)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  float  tmp1  =  (nfm  -  stepb)/  2;	  final    int    tmp1    =    (nfm    -    stepb)/    2;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
227	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
228	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	29	None	replace
229	[BUG]  [BUGGY]  final  int  tmp1  =  (Nfm  -  np)/  stepb;  [CE]  cannot  find  symbol  Nfm  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (Nfm  -  np)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (Nfm  -  np)/  stepb;	  final    long    tmp1    =    (nfm    -    np)/    stepb;    	non-compiled	[CE]  cannot  find  symbol  Nfm	3	None	replace
230	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  dsqCrvmin  +  1;	  final    int    tmp1    =(nfm    -    lowerBound)/    dsqCrvmin;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	76	None	replace
231	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  n)/  stepb.length;  [CE]  double  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  n)/  stepb.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  n)/  stepb.length;	  final    int    tmp1    =    (nfm    -    stepb)/    stepb.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
232	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  stepb.length  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  stepb.length  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb)/  stepb.length  +  1;	  final    int    tmp1    =    (nfm    -    stepb)/    stepb.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
233	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2  *  stepb;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  2  *  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  2  *  stepb;	  final    int    tmp1    =(nfm    -    lowerBound)/    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	40	None	replace
234	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
235	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDif  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDif  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDif	  	non-compiled	[CE]  ')'  expected	30	None	add
236	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    ArrayIndexOutOfBoundsException  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
237	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  *  stepb)/  nfm;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  *  stepb)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  *  stepb)/  nfm;	  final    int    tmp1    =    (nfm    *    np)/    stepb;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
238	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	31	None	replace
239	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  n.length  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  n.length  +  1;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  n.length  +  1;	  final    int    tmp1    =(nfm    -    lowerBound)/    n.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	77	None	replace
240	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb.length)/  nfm.length;  [CE]  double  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb.length)/  nfm.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb.length)/  nfm.length;	  final    int    tmp1    =    (nfm    -    np)/    stepb.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
241	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  np.length;  [CE]  int  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  np.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  nfm)/  np.length;	  final    int    tmp1    =    (nfm    -    np)/    stepb.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	72	None	replace
242	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  entryRegionRadius,  stepb.getEntry(nfxm));  [CE]  cannot  find  symbol  entryRegionRadius  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  jpt  =  Math.max(-TWO  *  entryRegionRadius,  stepb.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	jpt  =  Math.max(-TWO  *  entryRegionRadius,  stepb.getEntry(nfxm));	  jpt    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepb.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  entryRegionRadius	11	None	replace
243	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	34	None	replace
244	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
245	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
246	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    nfxm  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	80	None	add
247	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
248	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
249	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	18	None	add
250	[BUG]  [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  (nfm  -  np)/  2;  final  int  nfm  -=  np;  }  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  (nfm  -  np)/  2;  final  int  nfm  -=  np;  }  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	if(nfm  >  0)  {  final  int  tmp1  =  (nfm  -  np)/  2;  final  int  nfm  -=  np;  }	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
251	[BUG]  [BUGGY]  final  int  nfm1  =(nfm  -  np)/  2;  [CE]  cannot  find  symbol  tmp1  [FE]          OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  nfm1  =(nfm  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  nfm1  =(nfm  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  cannot  find  symbol  tmp1	57	None	replace
252	[BUG]  [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  1;  final  int  nfm  -  1;  }  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  1;  final  int  nfm  -  1;  }  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  1;  final  int  nfm  -  1;  }	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
253	[BUG]  [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  np  /  2;  final  int  nfm  -  np  /  2;  }  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  np  /  2;  final  int  nfm  -  np  /  2;  }  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	if(nfm  >  0)  {  final  int  tmp1  =  nfm  -  np  /  2;  final  int  nfm  -  np  /  2;  }	  final    int    tmp1    =    (nfm    -    np)/    2;    final    int    nfm    -    np)/    2;    	non-compiled	[CE]  ';'  expected	57	None	replace
254	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	15	None	add
255	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
256	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	15	None	add
257	[BUG]  [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  2;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (stepb  -  nfm)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (stepb  -  nfm)/  2;	  final    int    tmp1    =    (nfm    -    stepb)/    2;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
258	[BUG]  [BUGGY]  np  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  np  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  np  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	np  =  Math.max(-TWO  *  upperBound,  lowerDifference.getEntry(nfxm));	  np    =    Math.max(-TWO    *    upperBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  np	10	None	replace
259	[BUG]  [BUGGY]  final  double  tmp1  =(nfm  -  upperBound)/  n;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =(nfm  -  upperBound)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =(nfm  -  upperBound)/  n;	  final    double    tmp1    =(nfm    -    lowerBound)/    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	39	None	replace
260	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp2  =(nfm  *  np)/  2;  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  np)/  2;  final  int  tmp2  =(nfm  *  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final    int    tmp1    =(nfm    *    np)/    2;    final  int  tmp2  =(nfm  *  np)/  2;	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	85	None	add
261	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =(nfm  *  n)/  nfm;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	compilable	  [FE]  OutOfRangeException  	75	1	replace
262	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  n)/  nfm;  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  nfm;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  n)/  nfm;	  final    int    tmp1    =(nfm    *    upperBound)/    n;    	compilable	  [FE]  OutOfRangeException  	75	1	replace
263	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  stepb;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  stepb)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  stepb)/  stepb;	  final    int    tmp1    =(nfm    *    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
264	[BUG]  [BUGGY]  final  double  tmp1  =  (stepb  -  nfm)/  n;  [CE]  possible  loss  of  precision  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (stepb  -  nfm)/  n;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (stepb  -  nfm)/  n;	  final    float    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
265	[BUG]  [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  stepb;  [CE]  possible  loss  of  precision  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =  (nfm  -  stepb)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =  (nfm  -  stepb)/  stepb;	  final    int    tmp1    =    (nfm    -    stepb)/    np;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
266	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	30	None	add
267	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	13	None	add
268	[BUG]  [BUGGY]  int  tmp1  =  (int  -  np)/  2;  [CE]  illegal  start  of  expression  [FE]            OutOfRangeException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  int  tmp1  =  (int  -  np)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	int  tmp1  =  (int  -  np)/  2;	  final    int    tmp1    =    (nfm    -    np)/    2;    int    tmp1    =    (nfm    -    np)/    2;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
269	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  bottomDifference  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  bottomDifference	32	None	replace
270	[BUG]  [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  stepb;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  double  tmp1  =  (nfm  -  stepb)/  stepb;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  double  tmp1  =  (nfm  -  stepb)/  stepb;	  final    double    tmp1    =    (nfm    -    stepb)/    n;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
271	[BUG]  [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	nfxm  =  upperDifference.getEntry(nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	19	None	replace
272	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  initialTrustRegionRadius.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	65	None	replace
273	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  dsqCrvmin  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    lowerBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	59	None	replace
274	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	28	None	add
275	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	add	final  int  tmp1  =(nfm  *  n)/  2;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
276	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  *  n)/  2;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  *  n)/  2;	  final    int    tmp1    =(nfm    *    np)/    2;    	compilable	  [FE]  OutOfRangeException  	86	1	replace
277	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  tmp1  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      final  int  tmp1  =  (nfm  -  np)  /  n;  jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  tmp1	81	None	replace
278	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  n)/  nfm.length;  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  n)/  nfm.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  n)/  nfm.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    n.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	77	None	replace
279	[BUG]  [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  nfm.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {      [BUGGY]  final  int  tmp1  =(nfm  -  lowerBound)/  nfm.length;  [BUGGY]      jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1653	1653	1	replace	final  int  tmp1  =(nfm  -  lowerBound)/  nfm.length;	  final    int    tmp1    =(nfm    -    lowerBound)/    n.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	77	None	replace
