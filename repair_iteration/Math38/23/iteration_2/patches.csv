bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	196	12	replace
2	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	196	12	replace
3	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  *  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  -stepa  *  1;	  stepb    =    -stepa    +    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	127	1	replace
4	[BUG]  [BUGGY]  stepb  =  -stepa  *  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  *  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa  *  1;	  stepb    =    -stepa    +    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	127	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  -stepa  +  2;	  stepb    =    -stepa    +    1;    	compilable	  [FE]  AssertionError  	127	4	replace
6	[BUG]  [BUGGY]  stepb  =  -stepa  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa  +  2;	  stepb    =    -stepa    +    1;    	compilable	  [FE]  AssertionError  	127	4	replace
7	[BUG]  [BUGGY]  nfmm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfmm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfmm  =  -2;	  stepb    =    -2;    nfmm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	215	None	replace
8	[BUG]  [BUGGY]  stepb  =  -1;  nfmm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  nfmm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  nfmm  =  -2;	  stepb    =    -2;    nfmm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	215	None	replace
9	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	45	None	replace
10	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  alphaCauchy  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  alphaCauchy,  upperDifference.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	45	None	replace
11	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	72	None	add
12	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	72	1	add
13	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	72	1	add
14	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  originalTrustRegius);  [CE]  cannot  find  symbol  originalTrustRegius  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  stepb  =  Math.max(-TWO  *  nfxm,  originalTrustRegius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    stepb  =  Math.max(-TWO  *  nfxm,  originalTrustRegius);	  	non-compiled	[CE]  cannot  find  symbol  originalTrustRegius	72	None	add
15	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	212	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	12	12	replace
17	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	12	12	replace
18	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	12	None	replace
19	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	102	None	replace
20	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	102	None	replace
21	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	102	None	replace
22	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowestDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  lowestDifference	121	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
24	[BUG]  [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
25	[BUG]  [BUGGY]  Math.min(Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	85	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
27	[BUG]  [BUGGY]  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
28	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	101	None	replace
29	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	118	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	118	3	replace
31	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	118	3	replace
32	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
33	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
34	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	132	None	add
35	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
36	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
37	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
38	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	132	1	add
39	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	132	None	add
40	[BUG]  [BUGGY]  nfm  =  -nfm;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;	  stepb    =    -nfm;    nfm    =    -nfm;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	151	None	replace
41	[BUG]  [BUGGY]  stepb  =  -stepa;  nfm  =  -nfm;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa;  nfm  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa;  nfm  =  -nfm;	  stepb    =    -nfm;    nfm    =    -nfm;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	151	None	replace
42	[BUG]  [BUGGY]  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  bM  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bM    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  bM	167	None	replace
43	[BUG]  [BUGGY]  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	5	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	13	add
45	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	13	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	10	add
47	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	10	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	10	add
49	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	43	10	add
50	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	43	None	add
51	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	43	None	add
52	[BUG]  [BUGGY]  nfxm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfxm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfxm  =  -2;	  stepb    =    -2;    nfxm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	40	None	replace
53	[BUG]  [BUGGY]  stepb  =  -1;  nfxm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  nfxm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  nfxm  =  -2;	  stepb    =    -2;    nfxm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	40	None	replace
54	[BUG]  [BUGGY]  stepb  =  0;  nfxm  =  0;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  nfxm  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  0;  nfxm  =  0;	  stepb    =    -2;    nfxm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	40	None	replace
55	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	114	None	replace
56	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	114	None	replace
57	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	114	None	replace
58	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	218	1	add
59	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	218	1	add
60	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	218	None	add
61	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepA,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  stepA  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepA,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepA,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  stepA	218	None	add
62	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  step,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  step  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  step,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  step,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  step	218	None	add
63	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	32	None	replace
64	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	32	None	replace
65	[BUG]  [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	32	None	replace
66	[BUG]  [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	32	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	13	add
68	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	13	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	10	add
70	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	10	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	10	add
72	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	176	10	add
73	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	176	None	add
74	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	176	None	add
75	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	81	None	replace
76	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	81	None	replace
77	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -2;    stepb  =  -2;  stepb  =  -2;  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -2;        stepb    =    -2;    stepb  =  -2;  stepb  =  -2;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	38	1	add
78	[BUG]  [BUGGY]  stepb    =    -2;    stepb  =  -2;  stepb  =  -2;  stepb  =  -2;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -2;    stepb  =  -2;  stepb  =  -2;  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -2;        stepb    =    -2;    stepb  =  -2;  stepb  =  -2;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	38	1	add
79	[BUG]  [BUGGY]  stepb    =    -2;    stepb  =  -2;  nfxm  =  -2;  stepb  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -2;    stepb  =  -2;  nfxm  =  -2;  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -2;        stepb    =    -2;    nfxm  =  -2;  stepb  =  -2;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	38	None	add
80	[BUG]  [BUGGY]  stepb    =    -2;    stepb  =  -2;  nfm  =  -2;  stepb  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -2;    stepb  =  -2;  nfm  =  -2;  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -2;        stepb    =    -2;    nfm  =  -2;  stepb  =  -2;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	38	None	add
81	[BUG]  [BUGGY]  stepb    =    -2;    stepb  =  -2;  Stepb  =  -2;  stepb  =  -2;  [CE]  cannot  find  symbol  Stepb  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -2;    stepb  =  -2;  Stepb  =  -2;  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -2;        stepb    =    -2;    Stepb  =  -2;  stepb  =  -2;	  	non-compiled	[CE]  cannot  find  symbol  Stepb	38	None	add
82	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  stepb  =  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    1;    stepb  =  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	28	1	add
83	[BUG]  [BUGGY]  stepb  =  1;  stepb  =  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  stepb  =  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    stepb  =  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	28	1	add
84	[BUG]  [BUGGY]  stepb  =  1;  nfxm  =  1;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  nfxm  =  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    nfxm  =  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	28	None	add
85	[BUG]  [BUGGY]  stepb  =  1;  nfm  =  1;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  nfm  =  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    nfm  =  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	28	None	add
86	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  stepb  =  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    1;    stepb  =  2;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	28	1	add
87	[BUG]  [BUGGY]  stepb  =  1;  stepb  =  2;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  stepb  =  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    stepb  =  2;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	28	1	add
88	[BUG]  [BUGGY]  stepb  =  1;  nfxm  =  2;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  nfxm  =  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    nfxm  =  2;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	28	None	add
89	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound);	  stepb    =    Math.max(-TWO    *    lowerBound,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	138	None	replace
90	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound);	  stepb    =    Math.max(-TWO    *    lowerBound,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	138	None	replace
91	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerBound,  upperDifference.getEntry(nfxm));	  Math.max(stepa    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	159	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  Math.max(stepa    *    lowerBound,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	159	13	replace
93	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  Math.max(stepa    *    lowerBound,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	159	13	replace
94	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerBound,  stepa.getEntry(nfxm));	  Math.max(stepa    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	159	None	replace
95	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  unreachable  statement	170	None	replace
96	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	170	None	replace
97	[BUG]  [BUGGY]  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bMatrix    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  incompatible  types	161	None	replace
98	[BUG]  [BUGGY]  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bMatrix    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  incompatible  types	161	None	replace
99	[BUG]  [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  NUMBER  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  NUMBER	46	None	replace
100	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
101	[BUG]  [BUGGY]  Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  ')'  expected	46	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	18	12	add
103	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	18	12	add
104	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	18	None	add
105	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	18	None	add
106	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	18	None	add
107	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	18	None	add
108	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	82	None	replace
109	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	82	None	replace
110	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	185	1	add
111	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	185	1	add
112	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	185	1	add
113	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	185	1	add
114	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	185	None	add
115	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	185	None	add
116	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  InitialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  InitialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  InitialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	185	None	add
117	[BUG]  [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	94	None	replace
118	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	94	None	replace
119	[BUG]  [BUGGY]  Math.max(1  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(1  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(1  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	94	None	replace
120	[BUG]  [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	94	None	replace
121	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);	  stepb    =    Math.min(-TWO    *    lowerBound,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	131	None	replace
122	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  lowerBound);	  stepb    =    Math.min(-TWO    *    lowerBound,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	131	None	replace
123	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
124	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
125	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
126	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
127	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
128	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
129	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
130	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
131	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	52	None	add
132	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  bottomDifference  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    bottomDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  bottomDifference	71	None	replace
133	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    bottomDifference.getEntry(nfxm));    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
134	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    stepb  =  Math.max(-TWO  *  stepa,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	183	1	add
135	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    stepb  =  Math.max(-TWO  *  stepa,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	183	1	add
136	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  nfxm  =  Math.max(-TWO  *  stepa,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  nfxm  =  Math.max(-TWO  *  stepa,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    nfxm  =  Math.max(-TWO  *  stepa,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	183	None	add
137	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  stepb  =  Math.max(-TWO  *  stepA,  nfxm);  [CE]  cannot  find  symbol  stepA  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  stepb  =  Math.max(-TWO  *  stepA,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    stepb  =  Math.max(-TWO  *  stepA,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  stepA	183	None	add
138	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  Stepb  =  Math.max(-TWO  *  stepa,  nfxm);  [CE]  cannot  find  symbol  Stepb  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  Stepb  =  Math.max(-TWO  *  stepa,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    Stepb  =  Math.max(-TWO  *  stepa,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  Stepb	183	None	add
139	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
140	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
141	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
142	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
143	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
144	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	156	1	add
145	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	156	None	add
146	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	156	None	add
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	210	12	replace
148	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	210	12	replace
149	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	124	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(-TWO  *  nfxm,  nfxm);	  stepb    =    Math.min(-TWO    *    initialTrustRegius,    nfxm);    	compilable	  [FE]  AssertionError  	75	13	replace
151	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  nfxm);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  nfxm);	  stepb    =    Math.min(-TWO    *    initialTrustRegius,    nfxm);    	compilable	  [FE]  AssertionError  	75	13	replace
152	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  upperBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  upperBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  upperBound,  nfxm);	  stepb    =    Math.min(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	75	None	replace
153	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  alphaCauchy,  nfxm);  [CE]  cannot  find  symbol  alphaCauchy  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  alphaCauchy,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  alphaCauchy,  nfxm);	  stepb    =    Math.min(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	75	None	replace
154	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
155	[BUG]  [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
156	[BUG]  [BUGGY]  Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  NUMBER  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  NUMBER	191	None	replace
157	[BUG]  [BUGGY]  nfm  =  -n;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -n;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -n;	  nfm    =    -stepa;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	195	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  -stepa;	  nfm    =    -stepa;    	compilable	  [FE]  AssertionError  	195	13	replace
159	[BUG]  [BUGGY]  stepa  =  -stepa;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  -stepa;	  nfm    =    -stepa;    	compilable	  [FE]  AssertionError  	195	13	replace
160	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
161	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
162	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
163	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
164	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
165	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	84	1	add
166	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	84	None	add
167	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	84	None	add
168	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
169	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
170	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
171	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
172	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
173	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	163	1	add
174	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	163	None	add
175	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	13	add
176	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	13	add
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(-TWO  *  nfxm,  initialTrustRegionRadius);	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    	compilable	  [FE]  AssertionError  	186	13	replace
178	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  initialTrustRegionRadius);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  initialTrustRegionRadius);	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    	compilable	  [FE]  AssertionError  	186	13	replace
179	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
180	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
181	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
182	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
183	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	115	None	add
184	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	115	None	add
185	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
186	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	115	1	add
187	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  stepb  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    0;    stepb  =  0;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
188	[BUG]  [BUGGY]  stepb  =  0;  stepb  =  0;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  stepb  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    stepb  =  0;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
189	[BUG]  [BUGGY]  stepb  =  0;  nfm  =  0;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  nfm  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    nfm  =  0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	26	None	add
190	[BUG]  [BUGGY]  stepb  =  0;  Stepb  =  0;  [CE]  cannot  find  symbol  Stepb  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  Stepb  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    Stepb  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Stepb	26	None	add
191	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	197	None	replace
192	[BUG]  [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	13	None	replace
193	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	13	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	51	13	replace
195	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	51	13	replace
196	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  int  cannot  be  dereferenced	51	None	replace
197	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
198	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
199	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
200	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
201	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    nfxm  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	134	None	add
202	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepA,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  stepA  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepA,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  stepA,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  stepA	134	None	add
203	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  step,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  step  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  step,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  step,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  step	134	None	add
204	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Stepb	206	None	replace
205	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	206	None	replace
206	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  stepb  =  -stepa;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        stepb    =    -stepa;    stepb  =  -stepa;  stepb  =  -stepa;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	add
207	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  stepb  =  -stepa;  stepb  =  -stepa;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  stepb  =  -stepa;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    stepb  =  -stepa;  stepb  =  -stepa;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	add
208	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfm  =  -stepa;  stepb  =  -stepa;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfm  =  -stepa;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    nfm  =  -stepa;  stepb  =  -stepa;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	103	None	add
209	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfxm  =  -stepa;  stepb  =  -stepa;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfxm  =  -stepa;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    nfxm  =  -stepa;  stepb  =  -stepa;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	103	None	add
210	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfmm  =  -stepa;  stepb  =  -stepa;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  nfmm  =  -stepa;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    nfmm  =  -stepa;  stepb  =  -stepa;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	103	None	add
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	180	12	add
212	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	180	12	add
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	180	10	add
214	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	180	10	add
215	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	180	None	add
216	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	180	None	add
217	[BUG]  [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
218	[BUG]  [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
219	[BUG]  [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  2))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  2))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  1)&&  stepb  <  =  2))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
220	[BUG]  [BUGGY]  ((  nfm  <  1  &&  nfm  <  =  n)||  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  <  1  &&  nfm  <  =  n)||  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  <  1  &&  nfm  <  =  n)||  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
221	[BUG]  [BUGGY]  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	35	None	replace
222	[BUG]  [BUGGY]  nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	35	None	replace
223	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	35	None	replace
224	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	35	None	replace
225	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	119	1	add
226	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	119	1	add
227	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	119	None	add
228	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	119	None	add
229	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	119	1	add
230	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	119	1	add
231	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	119	None	add
232	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	148	None	replace
233	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	148	None	replace
234	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;	107	None	replace
235	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	107	None	replace
236	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;	107	None	replace
237	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	15	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	15	3	replace
239	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	15	3	replace
240	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	11	1	add
241	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	11	1	add
242	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	11	None	add
243	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	11	None	add
244	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	11	None	add
245	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	11	None	add
246	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	58	1	add
247	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	58	1	add
248	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	58	1	add
249	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	58	1	add
250	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	58	None	add
251	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	58	None	add
252	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	58	None	add
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  -1;	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    -stepa;    }    else    {    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	198	13	replace
254	[BUG]  [BUGGY]  stepa  =  -1;  [FE]  AssertionError  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  -1;	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    -stepa;    }    else    {    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	198	13	replace
255	[BUG]  [BUGGY]  (nfm  >  n)?  stepb  :  -nfm;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  (nfm  >  n)?  stepb  :  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	(nfm  >  n)?  stepb  :  -nfm;	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm;    	non-compiled	[CE]  not  a  statement	152	None	replace
256	[BUG]  [BUGGY]  nfm  =  -nfm;  (nfm  >  n)?  stepb  :  -nfm;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  (nfm  >  n)?  stepb  :  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  (nfm  >  n)?  stepb  :  -nfm;	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm;    	non-compiled	[CE]  not  a  statement	152	None	replace
257	[BUG]  [BUGGY]  nfm  =  -nfm;  (nfm  >  n)?  stepb  :  nfm;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  (nfm  >  n)?  stepb  :  nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  (nfm  >  n)?  stepb  :  nfm;	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm;    	non-compiled	[CE]  not  a  statement	152	None	replace
258	[BUG]  [BUGGY]  (nfm  >  1)?  stepb  :  -nfm;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  (nfm  >  1)?  stepb  :  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	(nfm  >  1)?  stepb  :  -nfm;	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm;    	non-compiled	[CE]  not  a  statement	152	None	replace
259	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
260	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
261	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	3	None	add
262	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	3	None	add
263	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	3	None	add
264	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
265	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
266	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  upperBound);	  stepb    =    Math.max(-TWO    *    upperBound,    nfxm);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	129	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	10	add
268	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	10	add
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	12	add
270	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	12	add
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	13	add
272	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	97	13	add
273	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	97	None	add
274	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	97	None	add
275	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfm,    nfxm);    stepb  =  Math.max(-TWO  *  nfm,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	187	1	add
276	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    nfxm);    stepb  =  Math.max(-TWO  *  nfm,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	187	1	add
277	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  nfxm  =  Math.max(-TWO  *  nfm,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  nfxm  =  Math.max(-TWO  *  nfm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    nfxm);    nfxm  =  Math.max(-TWO  *  nfm,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	187	None	add
278	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  nfm  =  Math.max(-TWO  *  nfm,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  nfm  =  Math.max(-TWO  *  nfm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    nfxm);    nfm  =  Math.max(-TWO  *  nfm,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	187	None	add
279	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  Stepb  =  Math.max(-TWO  *  nfm,  nfxm);  [CE]  cannot  find  symbol  Stepb  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  nfxm);  Stepb  =  Math.max(-TWO  *  nfm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    nfxm);    Stepb  =  Math.max(-TWO  *  nfm,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  Stepb	187	None	add
280	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));	  Math.max(stepa    *    lowerDifference,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	158	None	replace
281	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));	  Math.max(stepa    *    lowerDifference,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	158	None	replace
282	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	116	None	replace
283	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	116	None	replace
284	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	116	None	replace
285	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	116	None	replace
286	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	211	1	add
287	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	211	1	add
288	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	211	1	add
289	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	211	1	add
290	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowestDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	211	None	add
291	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	211	None	add
292	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  LowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  LowerDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  LowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  LowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  LowerDifference	211	None	add
293	[BUG]  [BUGGY]  Stepb  =  -1;  [CE]  cannot  find  symbol  Stepb  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Stepb  =  -1;	  stepb    =    -1;    Stepb    =    -1;    	non-compiled	[CE]  cannot  find  symbol  Stepb	143	None	replace
294	[BUG]  [BUGGY]  stepa  =  -1;  Stepb  =  -1;  [CE]  cannot  find  symbol  Stepb  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  -1;  Stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  -1;  Stepb  =  -1;	  stepb    =    -1;    Stepb    =    -1;    	non-compiled	[CE]  cannot  find  symbol  Stepb	143	None	replace
295	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	160	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	160	13	replace
297	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	160	13	replace
298	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	160	None	replace
299	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerDifference;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference    :    lowerDifference;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	9	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	164	13	replace
301	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	164	13	replace
302	[BUG]  [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  NUMBER  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(NUMBER  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  NUMBER	157	None	replace
303	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  stepb  =  -stepa  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    -stepa    +    1;    stepb  =  -stepa  +  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	1	add
304	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  stepb  =  -stepa  +  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  stepb  =  -stepa  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    stepb  =  -stepa  +  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	1	add
305	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  nfxm  =  -stepa  +  1;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  nfxm  =  -stepa  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    nfxm  =  -stepa  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	126	None	add
306	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  nfm  =  -stepa  +  1;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  nfm  =  -stepa  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    nfm  =  -stepa  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	126	None	add
307	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  nfmm  =  -stepa  +  1;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  nfmm  =  -stepa  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    nfmm  =  -stepa  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	126	None	add
308	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	166	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	166	13	replace
310	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	166	13	replace
311	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	220	1	add
312	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	220	1	add
313	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  step,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  step  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  step,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  step,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  step	220	None	add
314	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepA,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  stepA  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepA,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  stepA,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  stepA	220	None	add
315	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	220	1	add
316	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	220	1	add
317	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  topDifference	8	None	replace
318	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  stepb  =  -2;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  stepb  =  -2;	  stepb    =    -2;    stepb    =    -2;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	39	None	replace
319	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	144	None	replace
320	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	144	None	replace
321	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperBound);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	205	None	replace
322	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerBound);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	205	None	replace
323	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double,double[])  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  stepa,  upperBound);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[])	205	None	replace
324	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,int,double[])  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  nfm,  upperBound);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double[])	205	None	replace
325	[BUG]  [BUGGY]  Stepb  =  -nfm;  [CE]  cannot  find  symbol  Stepb  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Stepb  =  -nfm;	  stepb    =    -nfm;    Stepb    =    -nfm;    	non-compiled	[CE]  cannot  find  symbol  Stepb	153	None	replace
326	[BUG]  [BUGGY]  stepb  =  -1;  Stepb  =  -nfm;  [CE]  cannot  find  symbol  Stepb  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  Stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  Stepb  =  -nfm;	  stepb    =    -nfm;    Stepb    =    -nfm;    	non-compiled	[CE]  cannot  find  symbol  Stepb	153	None	replace
327	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
328	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
329	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	6	None	add
330	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	6	None	add
331	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
332	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
333	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	6	None	add
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	65	10	add
335	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	65	10	add
336	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	65	None	add
337	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	65	None	add
338	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	65	None	add
339	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	65	None	add
340	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	87	13	replace
341	[BUG]  [BUGGY]  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	87	13	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	87	13	replace
343	[BUG]  [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	87	13	replace
344	[BUG]  [BUGGY]  Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  NUMBER  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  NUMBER	87	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	53	13	replace
346	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	53	13	replace
347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	53	13	replace
348	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	53	13	replace
349	[BUG]  [BUGGY]  Math.min(Nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  Nfxm  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(Nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(Nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  Nfxm	48	None	replace
350	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
351	[BUG]  [BUGGY]  Math.min(TWO  *  nfxm,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  nfxm,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  nfxm,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
352	[BUG]  [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  NUMBER  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(NUMBER  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  NUMBER	48	None	replace
353	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	190	None	replace
354	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	190	None	replace
355	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  lowerBound;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference    :    lowerBound;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	10	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	20	10	add
357	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	20	10	add
358	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	20	None	add
359	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	20	None	add
360	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	20	None	add
361	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	20	None	add
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  nfxm,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	compilable	  [FE]  AssertionError  	113	13	replace
363	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	compilable	  [FE]  AssertionError  	113	13	replace
364	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
365	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
366	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	add
367	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	add
368	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	14	None	add
369	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	14	None	add
370	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	14	None	add
371	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	14	None	add
372	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	216	None	replace
373	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	216	None	replace
374	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	216	None	replace
375	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    }    else    {    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	108	13	replace
376	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  AssertionError  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    }    else    {    throw    new    PathIsExploredException();    }    	compilable	  [FE]  AssertionError  	108	13	replace
377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	93	13	replace
378	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	93	13	replace
379	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	93	None	replace
380	[BUG]  [BUGGY]  Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  nfxm,  stepa.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
381	[BUG]  [BUGGY]  Math.max(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  Nfxm  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Nfxm	88	None	replace
382	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	77	None	replace
383	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	77	None	replace
384	[BUG]  [BUGGY]  stepb  =  Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(nfxm  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	77	None	replace
385	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	202	1	add
386	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	202	1	add
387	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	202	None	add
388	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	202	None	add
389	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  InitialTrustRegionRadius,  stepa);  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  stepb  =  Math.max(-TWO  *  InitialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    stepb  =  Math.max(-TWO  *  InitialTrustRegionRadius,  stepa);	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	202	None	add
390	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	162	None	replace
391	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	162	None	replace
392	[BUG]  [BUGGY]  stepb  =  -1;  Stepb  =  -2;  [CE]  cannot  find  symbol  Stepb  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  Stepb  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  Stepb  =  -2;	  stepb    =    -2;    Stepb    =    -2;    	non-compiled	[CE]  cannot  find  symbol  Stepb	42	None	replace
393	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	96	None	replace
394	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
395	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
396	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	1	add
397	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	1	add
398	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfxm  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(nfxm  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
399	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfxm  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfxm  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(nfxm  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
400	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(stepa  ==  0)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	169	None	add
401	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(nfm  >  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	169	None	add
402	[BUG]  [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  NUMBER  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(NUMBER  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  NUMBER	193	None	replace
403	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	193	None	replace
404	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    b    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	168	None	replace
405	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  b  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  b  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    b    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  b	168	None	replace
406	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
407	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	89	None	replace
408	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfm,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	89	None	replace
409	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowestDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowestDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  lowestDifference	69	None	replace
410	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Stepb	194	None	replace
411	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	194	None	replace
412	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	194	None	replace
413	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	149	None	replace
414	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  stepb    =    0;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	27	None	replace
415	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  nfxm);	  stepb    =    Math.max(-TWO    *    lowerBound,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	74	None	replace
416	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
417	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
418	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	1	None	add
419	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	1	None	add
420	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
421	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
422	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	1	None	add
423	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	189	None	replace
424	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  nfxm,  stepa.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	189	None	replace
425	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	146	None	replace
426	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	add
427	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	add
428	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	23	None	add
429	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	23	None	add
430	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx)  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx)	  	non-compiled	[CE]  ')'  expected	23	None	add
431	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	23	None	add
432	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -1;    stepb  =  -1;  stepb  =  -1;  stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -1;        stepb    =    -1;    stepb  =  -1;  stepb  =  -1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	60	1	add
433	[BUG]  [BUGGY]  stepb    =    -1;    stepb  =  -1;  stepb  =  -1;  stepb  =  -1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -1;    stepb  =  -1;  stepb  =  -1;  stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -1;        stepb    =    -1;    stepb  =  -1;  stepb  =  -1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	60	1	add
434	[BUG]  [BUGGY]  stepb    =    -1;    stepb  =  -1;  nfxm  =  -1;  stepb  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -1;    stepb  =  -1;  nfxm  =  -1;  stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -1;        stepb    =    -1;    nfxm  =  -1;  stepb  =  -1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	60	None	add
435	[BUG]  [BUGGY]  stepb    =    -1;    stepb  =  -1;  nfm  =  -1;  stepb  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -1;    stepb  =  -1;  nfm  =  -1;  stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -1;        stepb    =    -1;    nfm  =  -1;  stepb  =  -1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	60	None	add
436	[BUG]  [BUGGY]  stepb    =    -1;    stepb  =  -1;  Stepb  =  -1;  stepb  =  -1;  [CE]  cannot  find  symbol  Stepb  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -1;    stepb  =  -1;  Stepb  =  -1;  stepb  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -1;        stepb    =    -1;    Stepb  =  -1;  stepb  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Stepb	60	None	add
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	141	12	add
438	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	141	12	add
439	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	141	13	add
440	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	141	13	add
441	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	141	None	add
442	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  nfxm,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	141	None	add
443	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  bottomDifference  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    bottomDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  bottomDifference	123	None	replace
444	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	100	None	replace
445	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
446	[BUG]  [BUGGY]  stepb  =  -initialTrustRegius;  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -initialTrustRegius;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -initialTrustRegius;	  stepb    =    -step;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	128	None	replace
447	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	92	None	replace
448	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
449	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	92	None	replace
450	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	92	None	replace
451	[BUG]  [BUGGY]  nfxm  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfxm  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfxm  =  -1;	  stepb    =    -1;    nfxm    =    -1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	62	None	replace
452	[BUG]  [BUGGY]  stepb  =  1;  nfxm  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  nfxm  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  1;  nfxm  =  -1;	  stepb    =    -1;    nfxm    =    -1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	62	None	replace
453	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	182	None	replace
454	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  int  cannot  be  dereferenced	182	None	replace
455	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);	  stepb    =    -1;    stepb    =    -1;    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	61	None	replace
456	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	34	None	replace
457	[BUG]  [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	34	None	replace
458	[BUG]  [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	34	None	replace
459	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	34	None	replace
460	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
461	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
462	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
463	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
464	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	111	None	add
465	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
466	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	111	1	add
467	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	111	None	add
468	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	120	12	replace
469	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	120	12	replace
470	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	98	13	replace
471	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	98	13	replace
472	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	98	13	replace
473	[BUG]  [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	98	13	replace
474	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  -nfm  +  2;	  stepb    =    -nfm    +    1;    	compilable	  [FE]  AssertionError  	37	3	replace
475	[BUG]  [BUGGY]  stepb  =  -nfm  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm  +  2;	  stepb    =    -nfm    +    1;    	compilable	  [FE]  AssertionError  	37	3	replace
476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  *  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  -nfm  *  1;	  stepb    =    -nfm    +    1;    	compilable	  [FE]  AssertionError  	37	3	replace
477	[BUG]  [BUGGY]  stepb  =  -nfm  *  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  *  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm  *  1;	  stepb    =    -nfm    +    1;    	compilable	  [FE]  AssertionError  	37	3	replace
478	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	203	None	replace
479	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  stepa);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	203	None	replace
480	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	compilable	  [FE]  AssertionError  	203	3	replace
481	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  stepa);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	compilable	  [FE]  AssertionError  	203	3	replace
482	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	203	None	replace
483	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	171	None	replace
484	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	171	None	replace
485	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    lowerDifference,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
486	[BUG]  [BUGGY]  Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    lowerDifference,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
487	[BUG]  [BUGGY]  Math.max(ZERO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(ZERO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(ZERO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    lowerDifference,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
488	[BUG]  [BUGGY]  nfmm  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfmm  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfmm  =  -1;	  stepb    =    -1;    nfmm    =    -1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	64	None	replace
489	[BUG]  [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  stepb  =  -nfm;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  0)&&  stepb  <  =  0))  {  stepb  =  -nfm;	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    stepb    =    -nfm;    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
490	[BUG]  [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  nfm))  {  stepb  =  -nfm;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  nfm))  {  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  0)&&  stepb  <  =  nfm))  {  stepb  =  -nfm;	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    stepb    =    -nfm;    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
491	[BUG]  [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  stepb  =  -1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  stepb  =  -1);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  1)&&  stepb  <  =  1))  {  stepb  =  -1);	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    stepb    =    -nfm;    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
492	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	172	None	replace
493	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	172	None	replace
494	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	179	None	replace
495	[BUG]  [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	192	None	replace
496	[BUG]  [BUGGY]  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  nfxm,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
497	[BUG]  [BUGGY]  Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	83	None	replace
498	[BUG]  [BUGGY]  Math.min(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  Nfxm  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(Nfxm  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Nfxm	83	None	replace
499	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	122	None	replace
500	[BUG]  [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  0)&&  stepb  <  =  0))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
501	[BUG]  [BUGGY]  ((  nfm  >=  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >=  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >=  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
502	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
503	[BUG]  [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  1)&&  stepb  <  =  1))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
504	[BUG]  [BUGGY]  stepb  =  -stepa.cloneTrustRegius();  [CE]  double  cannot  be  dereferenced  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa.cloneTrustRegius();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa.cloneTrustRegius();	  stepb    =    -stepa.cloneTrustRegius;    	non-compiled	[CE]  double  cannot  be  dereferenced	155	None	replace
505	[BUG]  [BUGGY]  stepb  =  -step.cloneTrustRegius;  [CE]  cannot  find  symbol  step  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -step.cloneTrustRegius;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -step.cloneTrustRegius;	  stepb    =    -stepa.cloneTrustRegius;    	non-compiled	[CE]  cannot  find  symbol  step	155	None	replace
506	[BUG]  [BUGGY]  stepb  =  -stepA.cloneTrustRegius;  [CE]  cannot  find  symbol  stepA  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepA.cloneTrustRegius;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepA.cloneTrustRegius;	  stepb    =    -stepa.cloneTrustRegius;    	non-compiled	[CE]  cannot  find  symbol  stepA	155	None	replace
507	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	174	1	add
508	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	174	1	add
509	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	174	1	add
510	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	174	1	add
511	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	174	None	add
512	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	174	None	add
513	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  nfm,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	174	None	add
514	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  stepb  =  -nfm  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    -nfm    +    1;    stepb  =  -nfm  +  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	36	1	add
515	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  stepb  =  -nfm  +  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  stepb  =  -nfm  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    stepb  =  -nfm  +  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	36	1	add
516	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
517	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
518	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    (nfm  +  1))  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
519	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    (nfm  +  1))  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
520	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
521	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
522	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
523	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
524	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	86	None	add
525	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Mat	86	None	add
526	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	86	None	add
527	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  TooManyEvaluationsException  	4	2	replace
528	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  TooManyEvaluationsException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  TooManyEvaluationsException  	4	2	replace
529	[BUG]  [BUGGY]  stepb  =  -stepa,  stepa.length  +  1;  [CE]  ';'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa,  stepa.length  +  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa,  stepa.length  +  1;	  stepb    =    -stepa.length    +    1;    	non-compiled	[CE]  ';'  expected	109	None	replace
530	[BUG]  [BUGGY]  stepb  =  -stepa.length  +  2;  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa.length  +  2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa.length  +  2;	  stepb    =    -stepa.length    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
531	[BUG]  [BUGGY]  stepb  =  -stepa.length  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa.length  *  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa.length  *  1;	  stepb    =    -stepa.length    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(nfxm  *  stepa,  upperDifference.getEntry(nfxm));	  Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	221	13	replace
533	[BUG]  [BUGGY]  Math.max(nfxm  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(nfxm  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(nfxm  *  stepa,  upperDifference.getEntry(nfxm));	  Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	221	13	replace
534	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
535	[BUG]  [BUGGY]  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Mat	54	None	replace
536	[BUG]  [BUGGY]  Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mapping  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mapping.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Mapping	147	None	replace
537	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
538	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
539	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
540	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
541	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifferenceRadius,  nfxm);  [CE]  cannot  find  symbol  lowerDifferenceRadius  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifferenceRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifferenceRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    inititrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  lowerDifferenceRadius	217	None	replace
542	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  lowerBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  lowerBound,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	90	None	replace
543	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  nfxm,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	90	None	replace
544	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  upperBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  upperBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  upperBound,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	90	None	replace
545	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  nfm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  nfm,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	90	None	replace
546	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	33	None	replace
547	[BUG]  [BUGGY]  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	33	None	replace
548	[BUG]  [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	33	None	replace
549	[BUG]  [BUGGY]  nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  n;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	33	None	replace
550	[BUG]  [BUGGY]  nfm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -2;	  stepb    =    -2;    nfm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	41	None	replace
551	[BUG]  [BUGGY]  stepb  =  -1;  nfm  =  -2;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  nfm  =  -2;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  nfm  =  -2;	  stepb    =    -2;    nfm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	41	None	replace
552	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	10	add
553	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	10	add
554	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	12	add
555	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	12	add
556	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	13	add
557	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	178	13	add
558	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	178	None	add
559	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	178	None	add
560	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	79	1	add
561	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	79	1	add
562	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	79	1	add
563	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	79	1	add
564	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  topDifference	79	None	add
565	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	79	None	add
566	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  UpperDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  UpperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  UpperDifference	79	None	add
567	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
568	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
569	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
570	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	80	13	replace
571	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	80	13	replace
572	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	112	None	replace
573	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	112	None	replace
574	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	112	None	replace
575	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();  [CE]  no  suitable  method  found  for  min(double,double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[])	173	None	replace
576	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	173	None	replace
577	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  [CE]  no  suitable  method  found  for  min(double,double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[])	173	None	replace
578	[BUG]  [BUGGY]  (nfm  >  n)?  stepb  :  -nfm);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  (nfm  >  n)?  stepb  :  -nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	(nfm  >  n)?  stepb  :  -nfm);	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm);    	non-compiled	[CE]  not  a  statement	154	None	replace
579	[BUG]  [BUGGY]  stepb  =  -1;  (nfm  >  n)?  stepb  :  -1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  (nfm  >  n)?  stepb  :  -1);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  (nfm  >  n)?  stepb  :  -1);	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm);    	non-compiled	[CE]  not  a  statement	154	None	replace
580	[BUG]  [BUGGY]  (nfm  >  1)?  stepb  :  -nfm);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  (nfm  >  1)?  stepb  :  -nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	(nfm  >  1)?  stepb  :  -nfm);	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm);    	non-compiled	[CE]  not  a  statement	154	None	replace
581	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	47	None	replace
582	[BUG]  [BUGGY]  Math.max(1  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(1  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(1  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	47	None	replace
583	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    InitialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	25	None	replace
584	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfx,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  nfx,  nfm);	  stepb    =    Math.max(-TWO    *    nfm,    nfxm);    	compilable	  [FE]  AssertionError  	188	5	replace
585	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfx,  nfm);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfx,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfx,  nfm);	  stepb    =    Math.max(-TWO    *    nfm,    nfxm);    	compilable	  [FE]  AssertionError  	188	5	replace
586	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	67	12	add
587	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	67	12	add
588	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	67	None	add
589	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	67	None	add
590	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	67	None	add
591	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	67	None	add
592	[BUG]  [BUGGY]  stepb  =  -stepa,  stepa.length  -  1;  [CE]  ';'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa,  stepa.length  -  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa,  stepa.length  -  1;	  stepb    =    -stepa,    stepa.length;    	non-compiled	[CE]  ';'  expected	110	None	replace
593	[BUG]  [BUGGY]  stepb  =  -1,  stepa.length;  [CE]  ';'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1,  stepa.length;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1,  stepa.length;	  stepb    =    -stepa,    stepa.length;    	non-compiled	[CE]  ';'  expected	110	None	replace
594	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
595	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
596	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	117	None	add
597	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  	non-compiled	[CE]  ')'  expected	117	None	add
598	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
599	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
600	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
601	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	117	1	add
602	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	209	1	add
603	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	209	1	add
604	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	209	1	add
605	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	209	1	add
606	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepA,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  stepA  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepA,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepA,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  stepA	209	None	add
607	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowestDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowestDifference  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowestDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowestDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowestDifference	209	None	add
608	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]            AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  lowDifference	209	None	add
609	[BUG]  [BUGGY]  nfm  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -1;	  stepb    =    -1;    nfm    =    -1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	63	None	replace
610	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  upperBound);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerBound,  upperBound);	  stepb    =    Math.max(-stepa    *    lowerBound,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	139	None	replace
611	[BUG]  [BUGGY]  stepb  =  Math.max(-stepa  *  initialTrustRegius,  upperBound);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-stepa  *  initialTrustRegius,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-stepa  *  initialTrustRegius,  upperBound);	  stepb    =    Math.max(-stepa    *    lowerBound,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	139	None	replace
612	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  lowerBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  lowerBound);	  stepb    =    Math.max(-stepa    *    lowerBound,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
613	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm);	  stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	73	5	replace
614	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm);	  stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    	compilable	  [FE]  AssertionError  	73	5	replace
615	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfm);	  stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	73	None	replace
616	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
617	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
618	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
619	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
620	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
621	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
622	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
623	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
624	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	50	None	add
625	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,int,double[])  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double[])	204	None	replace
626	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm,  upperBound);  [CE]  no  suitable  method  found  for  max(double,int,double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double[])	204	None	replace
627	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfm.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
628	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
629	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -nfm;        stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
630	[BUG]  [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;  stepb  =  -nfm;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -nfm;        stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
631	[BUG]  [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  nfm  =  -nfm;  stepb  =  -nfm;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  nfm  =  -nfm;  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -nfm;        stepb    =    -nfm;    nfm  =  -nfm;  stepb  =  -nfm;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	30	None	add
632	[BUG]  [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  Stepb  =  -nfm;  stepb  =  -nfm;  [CE]  cannot  find  symbol  Stepb  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  Stepb  =  -nfm;  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -nfm;        stepb    =    -nfm;    Stepb  =  -nfm;  stepb  =  -nfm;	  	non-compiled	[CE]  cannot  find  symbol  Stepb	30	None	add
633	[BUG]  [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;  stepb  =  -nfm);  [CE]  ';'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm;  stepb  =  -nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -nfm;        stepb    =    -nfm;    stepb  =  -nfm;  stepb  =  -nfm);	  	non-compiled	[CE]  ';'  expected	30	None	add
634	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	164	None	replace
635	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	13	add
636	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	13	add
637	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	126	None	add
638	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	13	add
639	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	126	13	add
640	[BUG]  [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa  +  1;  if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -stepa    +    1;    if(stepb  ==  -stepa  +  1)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	126	None	add
641	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
642	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	15	None	replace
643	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
644	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegiusRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegiusRadius  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegiusRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegiusRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    }    else    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegiusRadius	108	None	replace
645	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    Stepa  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	141	None	add
646	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    nfxm  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	209	None	add
647	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    lowerDifference.getEntry(nfxm));    Stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepb	209	None	add
648	[BUG]  [BUGGY]  stepb  =  1;  Stepb  =  1;  [CE]  cannot  find  symbol  Stepb  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  Stepb  =  1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    1;    Stepb  =  1;	  	non-compiled	[CE]  cannot  find  symbol  Stepb	28	None	add
649	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  lowDifference  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  lowDifference	70	None	replace
650	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  Stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    Stepa  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	180	None	add
651	[BUG]  [BUGGY]  Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	49	None	replace
652	[BUG]  [BUGGY]  Math.min(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
653	[BUG]  [BUGGY]  Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	49	None	replace
654	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  dsqCrvmin,  upperBound);  [CE]  cannot  find  symbol  dsqCrvmin  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  dsqCrvmin,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  dsqCrvmin,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	90	None	replace
655	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  lowBound,  upperBound);  [CE]  cannot  find  symbol  lowBound  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  lowBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  lowBound,  upperBound);	  stepb    =    Math.max(TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  lowBound	90	None	replace
656	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  initialTrustRegionRadius,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
657	[BUG]  [BUGGY]  Math.min(TWO  *  stepa,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  stepa,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  stepa,  nfxm.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    nfxm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
658	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	194	None	replace
659	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
660	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	194	None	replace
661	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	146	None	replace
662	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	146	None	replace
663	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  Stepb  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  Stepb	146	None	replace
664	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	146	None	replace
665	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	115	None	add
666	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfx);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	115	None	add
667	[BUG]  [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	33	None	replace
668	[BUG]  [BUGGY]  stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	33	None	replace
669	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
670	[BUG]  [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(nfxm  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	85	13	replace
671	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	80	12	replace
672	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	80	12	replace
673	[BUG]  [BUGGY]  stepb  =  -stepa;  Stepb  =  -nfm;  [CE]  cannot  find  symbol  Stepb  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa;  Stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa;  Stepb  =  -nfm;	  stepb    =    -nfm;    Stepb    =    -nfm;    	non-compiled	[CE]  cannot  find  symbol  Stepb	153	None	replace
674	[BUG]  [BUGGY]  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  InitialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    InitialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	55	None	replace
675	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	179	None	replace
676	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
677	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
678	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
679	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	6	1	add
680	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	compilable	  [FE]  AssertionError  	94	13	replace
681	[BUG]  [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	compilable	  [FE]  AssertionError  	94	13	replace
682	[BUG]  [BUGGY]  Math.min(NONE  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  NONE  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(NONE  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(NONE  *  initialTrustRegionRadius,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  find  symbol  NONE	46	None	replace
683	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  upperBound);  [CE]  cannot  find  symbol  dsqCrvmin  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  dsqCrvmin,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	89	None	replace
684	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperBound);  [CE]  cannot  find  symbol  alphaCauchy  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  alphaCauchy,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperBound);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	89	None	replace
685	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	84	None	add
686	[BUG]  [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Mat	84	None	add
687	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	98	None	replace
688	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	65	12	add
689	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	65	12	add
690	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
691	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
692	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
693	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [CE]  cannot  find  symbol  alphaCauchy  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  alphaCauchy,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	113	None	replace
694	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm)	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	206	None	replace
695	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Stepb	206	None	replace
696	[BUG]  [BUGGY]  stepb  =  Math.max(stepa  *  lowerBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(stepa  *  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(stepa  *  lowerBound,  upperBound);	  stepb    =    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
697	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  stepa);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	203	None	replace
698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  nfm,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	compilable	  [FE]  AssertionError  	203	13	replace
699	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  stepa);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfm,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	compilable	  [FE]  AssertionError  	203	13	replace
700	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  stepa);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  stepa);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	203	None	replace
701	[BUG]  [BUGGY]  stepb  =  -1;  lowerBound  =  -1;  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  lowerBound  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  lowerBound  =  -1;	  stepb    =    -1;    nfxm    =    -1;    	non-compiled	[CE]  incompatible  types	62	None	replace
702	[BUG]  [BUGGY]  stepb  =  -1;  upperBound  =  -1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  upperBound  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  upperBound  =  -1;	  stepb    =    -1;    nfxm    =    -1;    	non-compiled	[CE]  incompatible  types	62	None	replace
703	[BUG]  [BUGGY]  Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  upperDifference,  stepa.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
704	[BUG]  [BUGGY]  Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  lowerDifference,  stepa.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
705	[BUG]  [BUGGY]  Math.min(stepa  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  lowerBound,  stepa.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
706	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    Stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepb	58	None	add
707	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	97	None	add
708	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	97	None	add
709	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [CE]  cannot  find  symbol  Stepb  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);	  	non-compiled	[CE]  cannot  find  symbol  Stepb	202	None	add
710	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  nfm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  nfm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa);    nfm  =  Math.max(-TWO  *  initialTrustRegionRadius,  stepa);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	202	None	add
711	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	216	None	replace
712	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  nfxm);  Stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	216	None	replace
713	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  Stepb  =  Math.max(-TWO  *  upperBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	216	None	replace
714	[BUG]  [BUGGY]  Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	191	None	replace
715	[BUG]  [BUGGY]  Math.max(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
716	[BUG]  [BUGGY]  Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	191	None	replace
717	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	114	None	replace
718	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	114	None	replace
719	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfm);	  stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	73	None	replace
720	[BUG]  [BUGGY]  stepb  =  0;  nfmm  =  0;  [CE]  cannot  assign  a  value  to  final  variable  nfmm  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  nfmm  =  0;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  0;  nfmm  =  0;	  stepb    =    -2;    nfmm    =    -2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfmm	215	None	replace
721	[BUG]  [BUGGY]  step  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  step  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  step  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	step  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  step	4	None	replace
722	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepa  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepa	178	None	add
723	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	43	None	add
724	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	172	None	replace
725	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
726	[BUG]  [BUGGY]  ((  nfm  >  1)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  1)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  1)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
727	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepb  <  =  nfm))  {  throw  new  PathIsExploredException( " ");	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
728	[BUG]  [BUGGY]  Math.max(stepa  *  upperBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  upperBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  upperBound,  upperDifference.getEntry(nfxm));	  Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	221	None	replace
729	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    nfxm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
730	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	12	None	replace
731	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nf	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	118	None	replace
732	[BUG]  [BUGGY]  stepb  =  -stepa.length  +  3;  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa.length  +  3;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa.length  +  3;	  stepb    =    -stepa.length    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
733	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Mat.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Mat	156	None	add
734	[BUG]  [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	156	None	add
735	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperDifference,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	91	None	replace
736	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bM    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	167	None	replace
737	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bM  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bM    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
738	[BUG]  [BUGGY]  Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  upperDifference,  stepa.getEntry(nfxm));	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
739	[BUG]  [BUGGY]  Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  lowerDifference,  stepa.getEntry(nfxm));	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
740	[BUG]  [BUGGY]  Math.max(stepa  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  lowerBound,  stepa.getEntry(nfxm));	  Math.max(stepa    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
741	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  stepa.getEntry(nfxm));	  stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	189	None	replace
742	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	160	None	replace
743	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  upperDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	160	None	replace
744	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(stepa  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	132	None	add
745	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	5	None	replace
746	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
747	[BUG]  [BUGGY]  Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	88	None	replace
748	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	163	None	add
749	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	163	None	add
750	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  Mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    Mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Mat	220	None	add
751	[BUG]  [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  mat  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    mat.max(stepa  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  mat	220	None	add
752	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  nfxm  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  nfxm  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    nfxm  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	72	None	add
753	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  Stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [CE]  cannot  find  symbol  Stepb  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegionRadius);  Stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfxm,    initialTrustRegionRadius);    Stepb  =  Math.max(-TWO  *  nfxm,  initialTrustRegius);	  	non-compiled	[CE]  cannot  find  symbol  Stepb	72	None	add
754	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	8	None	replace
755	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
756	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
757	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    b    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	168	None	replace
758	[BUG]  [BUGGY]  stepb  =  1;  nfm  =  -1;  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  1;  nfm  =  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  1;  nfm  =  -1;	  stepb    =    -1;    nfm    =    -1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	63	None	replace
759	[BUG]  [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	32	None	replace
760	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfx);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfx);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  nfx);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	116	None	replace
761	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfx);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfx);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	116	None	replace
762	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  -1;  stepb  =  -stepa;	  stepb    =    -stepa;    stepb    =    -stepa;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	104	1	replace
763	[BUG]  [BUGGY]  stepb  =  -1;  stepb  =  -stepa;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  stepb  =  -stepa;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  stepb  =  -stepa;	  stepb    =    -stepa;    stepb    =    -stepa;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	104	1	replace
764	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mat  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Mat	54	None	replace
765	[BUG]  [BUGGY]  Math.max(stepa  *  lowerDifference,  upperDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  lowerDifference,  upperDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  lowerDifference,  upperDifference.getEntry(nfxm));  Mat.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mat.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
766	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	182	None	replace
767	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	182	None	replace
768	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  upperDifference,  stepa.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	182	None	replace
769	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference;	  BOBYQAOptimizer$PathIsExploredException    =    isMinimize?    upperDifference    :    lowerDifference;    	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	9	None	replace
770	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
771	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	17	None	replace
772	[BUG]  [BUGGY]  Math.max(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.max(stepa    *    stepa,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	214	None	replace
773	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Mapping  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Mapping.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Mapping.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  Mapping	147	None	replace
774	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
775	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
776	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
777	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	52	1	add
778	[BUG]  [BUGGY]  stepb  =  -1;  (nfm  >  n)?  stepb  :  -1;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  (nfm  >  n)?  stepb  :  -1;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  (nfm  >  n)?  stepb  :  -1;	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm;    	non-compiled	[CE]  not  a  statement	152	None	replace
779	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  bottomDifference.getEntry(	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    bottomDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
780	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa    =    Math.min(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.min(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	176	None	add
781	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	23	None	add
782	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
783	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
784	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
785	[BUG]  [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -nfm  +  1;  ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    -nfm    +    1;    ((  nfm  +  1)  ==  n)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperBound);  throw  new  PathIsExploredException();	  	non-compiled	[CE]  not  a  statement	36	None	add
786	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  stepb  =  -nfm;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepa  <  =  nfm))  {  stepb  =  -nfm;	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    stepb    =    -nfm;    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
787	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepa  <  =  nfm))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
788	[BUG]  [BUGGY]  ((  nfm  >  n)&&  stepa  ==  nfm))  {  throw  new  PathIsExploredException();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  ((  nfm  >  n)&&  stepa  ==  nfm))  {  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	((  nfm  >  n)&&  stepa  ==  nfm))  {  throw  new  PathIsExploredException();	  stepb    =    -nfm;    ((    nfm    >    n)&&    stepb    <    =    nfm))    {    throw    new    PathIsExploredException();    	non-compiled	[CE]  not  a  statement	200	None	replace
789	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	18	None	add
790	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerBound,  stepa.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
791	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
792	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTestRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTestRegius	166	None	replace
793	[BUG]  [BUGGY]  stepb  =  Math.max(stepb  *  lowerBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(stepb  *  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(stepb  *  lowerBound,  upperBound);	  stepb    =    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	29	None	replace
794	[BUG]  [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  isMinimize  =  Math.max(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.max(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	34	None	replace
795	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	7	None	replace
796	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	7	12	replace
797	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	7	12	replace
798	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	7	None	replace
799	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();  [CE]  cannot  find  symbol  initialTrustRegius  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperBound);  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	173	None	replace
800	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	11	None	add
801	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTestRegius  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTestRegius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegius,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTestRegius	149	None	replace
802	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
803	[BUG]  [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
804	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
805	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfx));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
806	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	169	None	add
807	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(lowerDifference!=  null)  {  stepa  =  Math.min(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	169	None	add
808	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
809	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    if(lowerDifference!=  null)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	169	13	add
810	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  nfxm  =  upperDifference.getEntry(nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  nfxm  =  upperDifference.getEntry(nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    nfxm  =  upperDifference.getEntry(nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	169	None	add
811	[BUG]  [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference.getEntry(nfxm);  [CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference.getEntry(nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    BOBYQAOptimizer$PathIsExploredException  =  isMinimize?  lowerDifference  :  upperDifference.getEntry(nfxm);	  	non-compiled	[CE]  cannot  find  symbol  BOBYQAOptimizer$PathIsExploredException	169	None	add
812	[BUG]  [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	nfm  =  -nfm;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	35	None	replace
813	[BUG]  [BUGGY]  stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -1;  isMinimize  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    -nfm;    stepb    =    -nfm;    isMinimize    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  incompatible  types	35	None	replace
814	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	20	12	add
815	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  AssertionError  	20	12	add
816	[BUG]  [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepa        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepa  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepa  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	20	None	add
817	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	119	None	add
818	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	119	None	add
819	[BUG]  [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	86	None	add
820	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        lowerDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(	  	non-compiled	[CE]  ')'  expected	117	None	add
821	[BUG]  [BUGGY]  stepb  =  Math.max(stepa  *  upperBound,  initialTrustRegionRadius);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(stepa  *  upperBound,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(stepa  *  upperBound,  initialTrustRegionRadius);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	205	None	replace
822	[BUG]  [BUGGY]  stepb  =  Math.max(ZERO  *  initialTrustRegionRadius,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(ZERO  *  initialTrustRegionRadius,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(ZERO  *  initialTrustRegionRadius,  upperBound);	  stepb    =    Math.max(stepa    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	205	None	replace
823	[BUG]  [BUGGY]  Math.min(ZERO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  unreachable  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(ZERO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(ZERO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  Math.min(NUMBER    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  unreachable  statement	95	None	replace
824	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
825	[BUG]  [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
826	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
827	[BUG]  [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
828	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
829	[BUG]  [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
830	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
831	[BUG]  [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  0;  if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    0;    if(stepb  ==  0)  {  stepb  =  0;  }  else  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	26	1	add
832	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  assign  a  value  to  final  variable  nfxm  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    nfxm  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfxm	185	None	add
833	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  Stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  Stepb  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  Stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(-TWO    *    initialTrustRegionRadius,    nfxm);    Stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  Stepb	185	None	add
834	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  double  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  stepa.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  double  cannot  be  dereferenced	124	None	replace
835	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  nfm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  nfm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    upperDifference.getEntry(nfxm));    nfm  =  Math.max(-TWO  *  nfm,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	174	None	add
836	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	150	None	replace
837	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));  [CE]  int  cannot  be  dereferenced  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  nfxm,  nfm.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfm.getEntry(nfxm));    throw    new    PathIsExploredException();    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	compilable	  [FE]  AssertionError  	77	12	replace
839	[BUG]  [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    	compilable	  [FE]  AssertionError  	77	12	replace
840	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  nfm  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  nfm  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    nfm  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	211	None	add
841	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    Stepb  =  Math.max(-TWO  *  nfm,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepb	211	None	add
842	[BUG]  [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  phaseb  =  -nfm;  stepb  =  -nfm;  [CE]  cannot  find  symbol  phaseb  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -nfm;    stepb  =  -nfm;  phaseb  =  -nfm;  stepb  =  -nfm;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -nfm;        stepb    =    -nfm;    phaseb  =  -nfm;  stepb  =  -nfm;	  	non-compiled	[CE]  cannot  find  symbol  phaseb	30	None	add
843	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	add
844	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	add
845	[BUG]  [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	14	None	add
846	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  initialTrustRegionRadius);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  initialTrustRegionRadius);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  initialTrustRegionRadius);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	204	None	replace
847	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[],double[])  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerBound,  upperBound);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperBound);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double[])	204	None	replace
848	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bMatrix    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	161	None	replace
849	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bMatrix    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
850	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  bMatrix  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    bMatrix    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	161	None	replace
851	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  phaseb  =  Math.max(-TWO  *  stepa,  nfxm);  [CE]  cannot  find  symbol  phaseb  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  nfxm);  phaseb  =  Math.max(-TWO  *  stepa,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    nfxm);    phaseb  =  Math.max(-TWO  *  stepa,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  phaseb	183	None	add
852	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);  stepb  =  Math.max(-TWO  *  lowerDifference,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    inititrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	217	None	replace
853	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);  [CE]  cannot  find  symbol  lowerRegius  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    inititrustRegionRadius,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  lowerRegius	217	None	replace
854	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegionRadius,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerRegionRadius,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    inititrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	217	None	replace
855	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  dsqCrvmin  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    lowerBound,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	140	None	replace
856	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	120	None	replace
857	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
858	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nf	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	120	None	replace
859	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  dsqCrvmin  [FE]        AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  dsqCrvmin,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    upperBound,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	136	None	replace
860	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
861	[BUG]  [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                Math.max(stepa        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  Math.max(stepa  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
862	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  lowerDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerBound,  lowerDifference.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerBound,  lowerDifference.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    nfm,    lowerDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	212	None	replace
863	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowerDifference,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();	  stepb    =    -stepa;    if(stepb    ==    0)    {    stepb    =    Math.max(-TWO    *    initialTrustRegius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	171	None	replace
864	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  lowerBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  lowerBound,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  lowerBound,  stepa.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	82	None	replace
865	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	82	None	replace
866	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  Stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    Stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepb	134	None	add
867	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
868	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	134	1	add
869	[BUG]  [BUGGY]  stepb  =  -stepa;  (nfm  >  n)?  stepb  :  -nfm);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepa;  (nfm  >  n)?  stepb  :  -nfm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepa;  (nfm  >  n)?  stepb  :  -nfm);	  stepb    =    -nfm;    (nfm    >    n)?    stepb    :    -nfm);    	non-compiled	[CE]  not  a  statement	154	None	replace
870	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  upperBound,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  upperBound,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	92	None	replace
871	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  lowBound  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowBound,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  lowBound	92	None	replace
872	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  stepa.getEntry(nfxm));  [CE]  cannot  find  symbol  alphaCauchy  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  alphaCauchy,  stepa.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  alphaCauchy,  stepa.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	92	None	replace
873	[BUG]  [BUGGY]  stepb  =  -stepA;  [CE]  cannot  find  symbol  stepA  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  -stepA;  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  -stepA;	  stepb    =    -step;    	non-compiled	[CE]  cannot  find  symbol  stepA	128	None	replace
874	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegius,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	79	None	add
875	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	218	1	add
876	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    stepb  =  Math.max(-TWO  *  stepa,  lowerDifference.getEntry(nfxm));	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	218	1	add
877	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  Stepb  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  Stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb    =    Math.max(-TWO    *    stepa,    upperDifference.getEntry(nfxm));    Stepb  =  Math.max(-TWO  *  stepa,  upperDifference.getEntry(nfxm));	  	non-compiled	[CE]  cannot  find  symbol  Stepb	218	None	add
878	[BUG]  [BUGGY]  stepb  =  Math.max(-stepa  *  upperBound,  lowerBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-stepa  *  upperBound,  lowerBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-stepa  *  upperBound,  lowerBound);	  stepb    =    Math.max(-stepa    *    lowerBound,    upperBound);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
879	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  upperBound);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  upperBound);	  stepb    =    Math.min(-TWO    *    lowerBound,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	131	None	replace
880	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerBound,  nfxm);  [CE]  cannot  find  symbol  dsqCrvmin  [FE]              AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  dsqCrvmin,  lowerBound,  nfxm);	  stepb    =    Math.min(-TWO    *    lowerBound,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	131	None	replace
881	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  lowerBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
882	[BUG]  [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(-TWO  *  lowerBound,  nfxm);  stepb  =  Math.max(-TWO  *  upperBound,  nfxm);	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
883	[BUG]  [BUGGY]  Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  lowerDifference,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	83	None	replace
884	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  InitialTrustRegionRadius  [FE]                AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  InitialTrustRegionRadius,  lowerDifference.getEntry(nfxm));	          stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepa    =    Math.max(-TWO    *    InitialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  InitialTrustRegionRadius	25	None	replace
885	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	13	add
886	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	13	add
887	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb        =        -stepa;        stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	add
888	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	add
889	[BUG]  [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  System.arraycopy(lowerBound,  0,  stepb,  upperBound,  upperBound);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    -stepa;    stepb  =  -stepa;  if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  System.arraycopy(lowerBound,  0,  stepb,  upperBound,  upperBound);  }  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        -stepa;        stepb    =    -stepa;    if(stepb  ==  0)  {  stepb  =  -stepa;  stepb  =  -stepa;  }  else  {  throw  new  PathIsExploredException();  System.arraycopy(lowerBound,  0,  stepb,  upperBound,  upperBound);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	103	None	add
890	[BUG]  [BUGGY]  stepb  =  Math.min(TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.min(TWO  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.min(TWO  *  lowerBound,  upperDifference.getEntry(nfxm));	  stepb    =    Math.min(TWO    *    stepa,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	135	None	replace
891	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	2	2	replace
892	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	2	2	replace
893	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	2	2	replace
894	[BUG]  [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [FE]  AssertionError  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	  [FE]  AssertionError  	2	2	replace
895	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfx	          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  ')'  expected	2	None	replace
896	[BUG]  [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  topDifference  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.max(stepa  *  initialTrustRegionRadius,  topDifference.getEntry(nfxm));	          Math.max(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    Math.max(stepa    *    initialTrustRegionRadius,    topDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  topDifference	56	None	replace
897	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  nfxm);  [CE]  cannot  find  symbol  lowBound  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  lowBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  lowBound,  nfxm);	  stepb    =    Math.max(-TWO    *    alphaCauchy,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  lowBound	130	None	replace
898	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  highBound,  nfxm);  [CE]  cannot  find  symbol  highBound  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  highBound,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  highBound,  nfxm);	  stepb    =    Math.max(-TWO    *    alphaCauchy,    nfxm);    	non-compiled	[CE]  cannot  find  symbol  highBound	130	None	replace
899	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [CE]  illegal  start  of  expression  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  nfxm  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(	          stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    nfxm    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
900	[BUG]  [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [CE]  cannot  find  symbol  initialTrustRegius  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb        =        Math.max(-TWO        *        initialTrustRegionRadius,        nfxm);        stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    nfxm);    stepb  =  Math.min(-TWO  *  initialTrustRegius,  nfxm);  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  nfxm);	  	non-compiled	[CE]  cannot  find  symbol  initialTrustRegius	111	None	add
901	[BUG]  [BUGGY]  Math.min(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  lowerBound,  upperDifference.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	157	None	replace
902	[BUG]  [BUGGY]  Math.min(stepa  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [CE]  cannot  find  symbol  alphaCauchy  [FE]      AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(stepa  *  alphaCauchy,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(stepa  *  alphaCauchy,  upperDifference.getEntry(nfxm));	  Math.min(stepa    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  alphaCauchy	157	None	replace
903	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException( " ");	  stepb    =    -stepa;    if(stepb    ==    null)    {    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;	107	None	replace
904	[BUG]  [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  entry.getEntry(nfxm));  [CE]  cannot  find  symbol  entry  [FE]            AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  entry.getEntry(nfxm));  [BUGGY]      if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  entry.getEntry(nfxm));	  stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb    =    Math.max(-TWO    *    initialTrustRegionRadius,    lowestDifference.getEntry(nfxm));    	non-compiled	[CE]  cannot  find  symbol  entry	121	None	replace
905	[BUG]  [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.max(-TWO  *  nfm,  stepa.getEntry(nfxm));	  stepa    =    Math.max(-TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	182	None	replace
906	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm)	  	non-compiled	[CE]  ')'  expected	6	None	add
907	[BUG]  [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]          stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	                stepb        =        Math.min(TWO        *        initialTrustRegionRadius,        upperDifference.getEntry(nfxm));        stepb    =    Math.min(TWO    *    initialTrustRegionRadius,    lowerDifference.getEntry(nfxm));    stepb  =  Math.max(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfx	  	non-compiled	[CE]  ')'  expected	6	None	add
908	[BUG]  [BUGGY]  Math.min(TWO  *  stepa,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  stepa,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  stepa,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
909	[BUG]  [BUGGY]  Math.min(TWO  *  nfm,  stepa.getEntry(nfxm));  [CE]  double  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  Math.min(TWO  *  nfm,  stepa.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	Math.min(TWO  *  nfm,  stepa.getEntry(nfxm));	  Math.min(TWO    *    initialTrustRegionRadius,    stepa.getEntry(nfxm));    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
910	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	add	stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	timeout	98	1	replace
911	[BUG]  [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  timeout  [FE]    AssertionError    [CONTEXT]      if  (nfm  >=  1  &&  nfm  <=  n)  {  stepa  =  initialTrustRegionRadius;  if  (upperDifference.getEntry(nfmm)  ==  ZERO)  {  stepa  =  -stepa;  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfmm,  stepa);  }  else  if  (nfm  >  n)  {  stepa  =  interpolationPoints.getEntry(nfx,  nfxm);      [BUGGY]  stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));  [BUGGY]      stepb  =  -initialTrustRegionRadius;  if  (lowerDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.min(TWO  *  initialTrustRegionRadius,  upperDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	0.2773500981126146	1641	1641	1	replace	stepa  =  Math.min(TWO  *  nfm,  upperDifference.getEntry(nfxm));	  stepa    =    Math.min(TWO    *    initialTrustRegionRadius,    upperDifference.getEntry(nfxm));    	compilable	timeout	98	1	replace
